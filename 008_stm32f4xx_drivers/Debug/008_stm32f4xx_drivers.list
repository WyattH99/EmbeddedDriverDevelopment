
008_stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002824  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080029f4  080029f4  000129f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b0c  08002b0c  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08002b0c  08002b0c  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b0c  08002b0c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b0c  08002b0c  00012b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b10  08002b10  00012b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08002b14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000080  08002b94  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  08002b94  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001ff5  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000087f  00000000  00000000  000220e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000278  00000000  00000000  00022968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001d1  00000000  00000000  00022be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002fdf  00000000  00000000  00022db1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002b53  00000000  00000000  00025d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b27f  00000000  00000000  000288e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000014b8  00000000  00000000  00033b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0003501c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080029dc 	.word	0x080029dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	080029dc 	.word	0x080029dc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <ds1307_init>:
static uint8_t bcd_to_binary(uint8_t value);


/* ds1307 Initialization */
// Returns Value of CH. If 1 then Initialization Failed else Success
uint8_t ds1307_init(void){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0

	// 1. Initialize the I2C GPIO Pins
	ds1307_i2c_pin_config();
 80002c6:	f000 f90f 	bl	80004e8 <ds1307_i2c_pin_config>

	// 2. Initialize the I2C Peripheral
	ds1307_i2c_config();
 80002ca:	f000 f949 	bl	8000560 <ds1307_i2c_config>

	// 3. Enable the I2C Peripheral
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 80002ce:	2101      	movs	r1, #1
 80002d0:	4809      	ldr	r0, [pc, #36]	; (80002f8 <ds1307_init+0x38>)
 80002d2:	f000 fd31 	bl	8000d38 <I2C_PeripheralControl>

	// 4. Make Clock Halt = 0;
	ds1307_write(0x00, DS1307_ADDR_SEC);
 80002d6:	2100      	movs	r1, #0
 80002d8:	2000      	movs	r0, #0
 80002da:	f000 f957 	bl	800058c <ds1307_write>

	// 5. Read Clock Halt Bit to see if Write was successful
	uint8_t clock_state = ds1307_read(DS1307_ADDR_SEC);
 80002de:	2000      	movs	r0, #0
 80002e0:	f000 f970 	bl	80005c4 <ds1307_read>
 80002e4:	4603      	mov	r3, r0
 80002e6:	71fb      	strb	r3, [r7, #7]

	// Clock State is the 7th bit
	return ((clock_state >> 7) & 0x1);
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	09db      	lsrs	r3, r3, #7
 80002ec:	b2db      	uxtb	r3, r3

}
 80002ee:	4618      	mov	r0, r3
 80002f0:	3708      	adds	r7, #8
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40005400 	.word	0x40005400

080002fc <ds1307_set_current_time>:


/* Set / Get Time */
void ds1307_set_current_time(RTC_time_t *rtc_time){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hours;

	// Set Seconds
	seconds = binary_to_bcd(rtc_time->seconds);
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	785b      	ldrb	r3, [r3, #1]
 8000308:	4618      	mov	r0, r3
 800030a:	f000 f979 	bl	8000600 <binary_to_bcd>
 800030e:	4603      	mov	r3, r0
 8000310:	73bb      	strb	r3, [r7, #14]
	seconds &= ~(1 << 7); // Make sure the clock is not halted
 8000312:	7bbb      	ldrb	r3, [r7, #14]
 8000314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000318:	73bb      	strb	r3, [r7, #14]
	ds1307_write(seconds, DS1307_ADDR_SEC);
 800031a:	7bbb      	ldrb	r3, [r7, #14]
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f000 f934 	bl	800058c <ds1307_write>

	// Set Minutes
	ds1307_write(binary_to_bcd(rtc_time->minutes), DS1307_ADDR_MIN);
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	789b      	ldrb	r3, [r3, #2]
 8000328:	4618      	mov	r0, r3
 800032a:	f000 f969 	bl	8000600 <binary_to_bcd>
 800032e:	4603      	mov	r3, r0
 8000330:	2101      	movs	r1, #1
 8000332:	4618      	mov	r0, r3
 8000334:	f000 f92a 	bl	800058c <ds1307_write>

	// Set Hours
	hours = binary_to_bcd(rtc_time->hours);
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	4618      	mov	r0, r3
 800033e:	f000 f95f 	bl	8000600 <binary_to_bcd>
 8000342:	4603      	mov	r3, r0
 8000344:	73fb      	strb	r3, [r7, #15]
	if(rtc_time->time_format == TIME_FORMAT_24HRS){
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	78db      	ldrb	r3, [r3, #3]
 800034a:	2b02      	cmp	r3, #2
 800034c:	d104      	bne.n	8000358 <ds1307_set_current_time+0x5c>
		hours &= ~(1 << 6);
 800034e:	7bfb      	ldrb	r3, [r7, #15]
 8000350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000354:	73fb      	strb	r3, [r7, #15]
 8000356:	e011      	b.n	800037c <ds1307_set_current_time+0x80>
	}else{
		// 12 Hour Format
		hours |= (1 << 6);
 8000358:	7bfb      	ldrb	r3, [r7, #15]
 800035a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800035e:	73fb      	strb	r3, [r7, #15]
		hours = (rtc_time->time_format == TIME_FORMAT_12HRS_PM) ? hours | (1 << 5) : hours & ~(1 << 5);
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	78db      	ldrb	r3, [r3, #3]
 8000364:	2b01      	cmp	r3, #1
 8000366:	d104      	bne.n	8000372 <ds1307_set_current_time+0x76>
 8000368:	7bfb      	ldrb	r3, [r7, #15]
 800036a:	f043 0320 	orr.w	r3, r3, #32
 800036e:	b2db      	uxtb	r3, r3
 8000370:	e003      	b.n	800037a <ds1307_set_current_time+0x7e>
 8000372:	7bfb      	ldrb	r3, [r7, #15]
 8000374:	f023 0320 	bic.w	r3, r3, #32
 8000378:	b2db      	uxtb	r3, r3
 800037a:	73fb      	strb	r3, [r7, #15]
	}
	ds1307_write(hours, DS1307_ADDR_HRS);
 800037c:	7bfb      	ldrb	r3, [r7, #15]
 800037e:	2102      	movs	r1, #2
 8000380:	4618      	mov	r0, r3
 8000382:	f000 f903 	bl	800058c <ds1307_write>

}
 8000386:	bf00      	nop
 8000388:	3710      	adds	r7, #16
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}

0800038e <ds1307_get_current_time>:

void ds1307_get_current_time(RTC_time_t *rtc_time){
 800038e:	b580      	push	{r7, lr}
 8000390:	b084      	sub	sp, #16
 8000392:	af00      	add	r7, sp, #0
 8000394:	6078      	str	r0, [r7, #4]
	// Get Seconds
	uint8_t seconds = ds1307_read(DS1307_ADDR_SEC);
 8000396:	2000      	movs	r0, #0
 8000398:	f000 f914 	bl	80005c4 <ds1307_read>
 800039c:	4603      	mov	r3, r0
 800039e:	73bb      	strb	r3, [r7, #14]
	seconds &= ~(1 << 7); // Clear the Clock Halt
 80003a0:	7bbb      	ldrb	r3, [r7, #14]
 80003a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80003a6:	73bb      	strb	r3, [r7, #14]
	rtc_time->seconds = bcd_to_binary(seconds);
 80003a8:	7bbb      	ldrb	r3, [r7, #14]
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 f954 	bl	8000658 <bcd_to_binary>
 80003b0:	4603      	mov	r3, r0
 80003b2:	461a      	mov	r2, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	705a      	strb	r2, [r3, #1]

	// Get Minutes
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 80003b8:	2001      	movs	r0, #1
 80003ba:	f000 f903 	bl	80005c4 <ds1307_read>
 80003be:	4603      	mov	r3, r0
 80003c0:	4618      	mov	r0, r3
 80003c2:	f000 f949 	bl	8000658 <bcd_to_binary>
 80003c6:	4603      	mov	r3, r0
 80003c8:	461a      	mov	r2, r3
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	709a      	strb	r2, [r3, #2]

	// Get Hours
	uint8_t hours = ds1307_read(DS1307_ADDR_HRS);
 80003ce:	2002      	movs	r0, #2
 80003d0:	f000 f8f8 	bl	80005c4 <ds1307_read>
 80003d4:	4603      	mov	r3, r0
 80003d6:	73fb      	strb	r3, [r7, #15]
	if(hours & (1 << 6)){
 80003d8:	7bfb      	ldrb	r3, [r7, #15]
 80003da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d00f      	beq.n	8000402 <ds1307_get_current_time+0x74>
		// 12 Hour Format
		rtc_time->time_format = !((hours & (1 << 5)) == 0); // PM or AM
 80003e2:	7bfb      	ldrb	r3, [r7, #15]
 80003e4:	f003 0320 	and.w	r3, r3, #32
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	bf14      	ite	ne
 80003ec:	2301      	movne	r3, #1
 80003ee:	2300      	moveq	r3, #0
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	461a      	mov	r2, r3
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	70da      	strb	r2, [r3, #3]
		hours &= ~(0x3 << 5); // Clear 6 and 5 bit
 80003f8:	7bfb      	ldrb	r3, [r7, #15]
 80003fa:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80003fe:	73fb      	strb	r3, [r7, #15]
 8000400:	e002      	b.n	8000408 <ds1307_get_current_time+0x7a>
	}else{
		// 24 Hour Format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	2202      	movs	r2, #2
 8000406:	70da      	strb	r2, [r3, #3]
	}
	rtc_time->hours = bcd_to_binary(hours);
 8000408:	7bfb      	ldrb	r3, [r7, #15]
 800040a:	4618      	mov	r0, r3
 800040c:	f000 f924 	bl	8000658 <bcd_to_binary>
 8000410:	4603      	mov	r3, r0
 8000412:	461a      	mov	r2, r3
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	701a      	strb	r2, [r3, #0]
}
 8000418:	bf00      	nop
 800041a:	3710      	adds	r7, #16
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}

08000420 <ds1307_set_current_date>:


/* Set / Get Date */
void ds1307_set_current_date(RTC_date_t *rtc_date){
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	// Set Day
	ds1307_write(binary_to_bcd(rtc_date->day), DS1307_ADDR_DAY);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	78db      	ldrb	r3, [r3, #3]
 800042c:	4618      	mov	r0, r3
 800042e:	f000 f8e7 	bl	8000600 <binary_to_bcd>
 8000432:	4603      	mov	r3, r0
 8000434:	2103      	movs	r1, #3
 8000436:	4618      	mov	r0, r3
 8000438:	f000 f8a8 	bl	800058c <ds1307_write>

	// Set Date
	ds1307_write(binary_to_bcd(rtc_date->date), DS1307_ADDR_DATE);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	4618      	mov	r0, r3
 8000442:	f000 f8dd 	bl	8000600 <binary_to_bcd>
 8000446:	4603      	mov	r3, r0
 8000448:	2104      	movs	r1, #4
 800044a:	4618      	mov	r0, r3
 800044c:	f000 f89e 	bl	800058c <ds1307_write>

	// Set Month
	ds1307_write(binary_to_bcd(rtc_date->month), DS1307_ADDR_MONTH);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	785b      	ldrb	r3, [r3, #1]
 8000454:	4618      	mov	r0, r3
 8000456:	f000 f8d3 	bl	8000600 <binary_to_bcd>
 800045a:	4603      	mov	r3, r0
 800045c:	2105      	movs	r1, #5
 800045e:	4618      	mov	r0, r3
 8000460:	f000 f894 	bl	800058c <ds1307_write>

	// Set Year
	ds1307_write(binary_to_bcd(rtc_date->year), DS1307_ADDR_YEAR);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	789b      	ldrb	r3, [r3, #2]
 8000468:	4618      	mov	r0, r3
 800046a:	f000 f8c9 	bl	8000600 <binary_to_bcd>
 800046e:	4603      	mov	r3, r0
 8000470:	2106      	movs	r1, #6
 8000472:	4618      	mov	r0, r3
 8000474:	f000 f88a 	bl	800058c <ds1307_write>

}
 8000478:	bf00      	nop
 800047a:	3708      	adds	r7, #8
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}

08000480 <ds1307_get_current_date>:

void ds1307_get_current_date(RTC_date_t *rtc_date){
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	// Get Day
	rtc_date->day = bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 8000488:	2003      	movs	r0, #3
 800048a:	f000 f89b 	bl	80005c4 <ds1307_read>
 800048e:	4603      	mov	r3, r0
 8000490:	4618      	mov	r0, r3
 8000492:	f000 f8e1 	bl	8000658 <bcd_to_binary>
 8000496:	4603      	mov	r3, r0
 8000498:	461a      	mov	r2, r3
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	70da      	strb	r2, [r3, #3]
	// Get Date
	rtc_date->date = bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 800049e:	2004      	movs	r0, #4
 80004a0:	f000 f890 	bl	80005c4 <ds1307_read>
 80004a4:	4603      	mov	r3, r0
 80004a6:	4618      	mov	r0, r3
 80004a8:	f000 f8d6 	bl	8000658 <bcd_to_binary>
 80004ac:	4603      	mov	r3, r0
 80004ae:	461a      	mov	r2, r3
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	701a      	strb	r2, [r3, #0]
	// Get Month
	rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 80004b4:	2005      	movs	r0, #5
 80004b6:	f000 f885 	bl	80005c4 <ds1307_read>
 80004ba:	4603      	mov	r3, r0
 80004bc:	4618      	mov	r0, r3
 80004be:	f000 f8cb 	bl	8000658 <bcd_to_binary>
 80004c2:	4603      	mov	r3, r0
 80004c4:	461a      	mov	r2, r3
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	705a      	strb	r2, [r3, #1]
	// Get Year
	rtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 80004ca:	2006      	movs	r0, #6
 80004cc:	f000 f87a 	bl	80005c4 <ds1307_read>
 80004d0:	4603      	mov	r3, r0
 80004d2:	4618      	mov	r0, r3
 80004d4:	f000 f8c0 	bl	8000658 <bcd_to_binary>
 80004d8:	4603      	mov	r3, r0
 80004da:	461a      	mov	r2, r3
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	709a      	strb	r2, [r3, #2]
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <ds1307_i2c_pin_config>:


/*
 * Private Helper Functions Definitions
 */
static void ds1307_i2c_pin_config(void){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af00      	add	r7, sp, #0
	 * ALT Function Mode: 4
	 */

	/* I2C SCL */
	GPIO_Handle_t i2c_scl;
	memset(&i2c_scl, 0, sizeof(i2c_scl)); // Clear all the Variables
 80004ee:	f107 030c 	add.w	r3, r7, #12
 80004f2:	220c      	movs	r2, #12
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f001 fa2e 	bl	8001958 <memset>
	i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT;
 80004fc:	4b17      	ldr	r3, [pc, #92]	; (800055c <ds1307_i2c_pin_config+0x74>)
 80004fe:	60fb      	str	r3, [r7, #12]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 8000500:	2308      	movs	r3, #8
 8000502:	743b      	strb	r3, [r7, #16]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000504:	2301      	movs	r3, #1
 8000506:	74fb      	strb	r3, [r7, #19]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFUN;
 8000508:	2302      	movs	r3, #2
 800050a:	747b      	strb	r3, [r7, #17]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800050c:	2304      	movs	r3, #4
 800050e:	757b      	strb	r3, [r7, #21]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000510:	2301      	movs	r3, #1
 8000512:	753b      	strb	r3, [r7, #20]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000514:	2302      	movs	r3, #2
 8000516:	74bb      	strb	r3, [r7, #18]
	GPIO_Init(&i2c_scl);
 8000518:	f107 030c 	add.w	r3, r7, #12
 800051c:	4618      	mov	r0, r3
 800051e:	f000 f987 	bl	8000830 <GPIO_Init>

	/* I2C SDA */
	GPIO_Handle_t i2c_sda;
	memset(&i2c_sda, 0, sizeof(i2c_sda)); // Clear all the Variables
 8000522:	463b      	mov	r3, r7
 8000524:	220c      	movs	r2, #12
 8000526:	2100      	movs	r1, #0
 8000528:	4618      	mov	r0, r3
 800052a:	f001 fa15 	bl	8001958 <memset>
	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT;
 800052e:	4b0b      	ldr	r3, [pc, #44]	; (800055c <ds1307_i2c_pin_config+0x74>)
 8000530:	603b      	str	r3, [r7, #0]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 8000532:	2309      	movs	r3, #9
 8000534:	713b      	strb	r3, [r7, #4]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000536:	2301      	movs	r3, #1
 8000538:	71fb      	strb	r3, [r7, #7]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFUN;
 800053a:	2302      	movs	r3, #2
 800053c:	717b      	strb	r3, [r7, #5]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800053e:	2304      	movs	r3, #4
 8000540:	727b      	strb	r3, [r7, #9]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000542:	2301      	movs	r3, #1
 8000544:	723b      	strb	r3, [r7, #8]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000546:	2302      	movs	r3, #2
 8000548:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(&i2c_sda);
 800054a:	463b      	mov	r3, r7
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f96f 	bl	8000830 <GPIO_Init>

}
 8000552:	bf00      	nop
 8000554:	3718      	adds	r7, #24
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40020400 	.word	0x40020400

08000560 <ds1307_i2c_config>:


static void ds1307_i2c_config(void){
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	g_ds1307I2cHandle.pI2Cx = DS1307_I2C;
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <ds1307_i2c_config+0x20>)
 8000566:	4a07      	ldr	r2, [pc, #28]	; (8000584 <ds1307_i2c_config+0x24>)
 8000568:	601a      	str	r2, [r3, #0]
//	g_ds1307I2cHandle.I2C_Config.I2C_DeviceAddress = DS1307_I2C_ADDRESS;
	g_ds1307I2cHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 800056a:	4b05      	ldr	r3, [pc, #20]	; (8000580 <ds1307_i2c_config+0x20>)
 800056c:	4a06      	ldr	r2, [pc, #24]	; (8000588 <ds1307_i2c_config+0x28>)
 800056e:	605a      	str	r2, [r3, #4]
	g_ds1307I2cHandle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 8000570:	4b03      	ldr	r3, [pc, #12]	; (8000580 <ds1307_i2c_config+0x20>)
 8000572:	2201      	movs	r2, #1
 8000574:	725a      	strb	r2, [r3, #9]
//	g_ds1307I2cHandle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;

	I2C_Init(&g_ds1307I2cHandle);
 8000576:	4802      	ldr	r0, [pc, #8]	; (8000580 <ds1307_i2c_config+0x20>)
 8000578:	f000 fbfa 	bl	8000d70 <I2C_Init>
}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}
 8000580:	2000009c 	.word	0x2000009c
 8000584:	40005400 	.word	0x40005400
 8000588:	000186a0 	.word	0x000186a0

0800058c <ds1307_write>:


static void ds1307_write(uint8_t value, uint8_t reg_addr){
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af02      	add	r7, sp, #8
 8000592:	4603      	mov	r3, r0
 8000594:	460a      	mov	r2, r1
 8000596:	71fb      	strb	r3, [r7, #7]
 8000598:	4613      	mov	r3, r2
 800059a:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = reg_addr;
 800059c:	79bb      	ldrb	r3, [r7, #6]
 800059e:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	737b      	strb	r3, [r7, #13]

	// Send Register Address then the Value
	I2C_MasterSendData(&g_ds1307I2cHandle, tx, 2, DS1307_I2C_ADDRESS, 0);
 80005a4:	f107 010c 	add.w	r1, r7, #12
 80005a8:	2300      	movs	r3, #0
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	2368      	movs	r3, #104	; 0x68
 80005ae:	2202      	movs	r2, #2
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <ds1307_write+0x34>)
 80005b2:	f000 fc9f 	bl	8000ef4 <I2C_MasterSendData>

}
 80005b6:	bf00      	nop
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	2000009c 	.word	0x2000009c

080005c4 <ds1307_read>:


static uint8_t ds1307_read(uint8_t reg_addr){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af02      	add	r7, sp, #8
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]

	uint8_t data;
	I2C_MasterSendData(&g_ds1307I2cHandle, &reg_addr, 1, DS1307_I2C_ADDRESS, 0);
 80005ce:	1df9      	adds	r1, r7, #7
 80005d0:	2300      	movs	r3, #0
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	2368      	movs	r3, #104	; 0x68
 80005d6:	2201      	movs	r2, #1
 80005d8:	4808      	ldr	r0, [pc, #32]	; (80005fc <ds1307_read+0x38>)
 80005da:	f000 fc8b 	bl	8000ef4 <I2C_MasterSendData>
	I2C_MasterReceiveData(&g_ds1307I2cHandle, &data, 1, DS1307_I2C_ADDRESS, 0);
 80005de:	f107 010f 	add.w	r1, r7, #15
 80005e2:	2300      	movs	r3, #0
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2368      	movs	r3, #104	; 0x68
 80005e8:	2201      	movs	r2, #1
 80005ea:	4804      	ldr	r0, [pc, #16]	; (80005fc <ds1307_read+0x38>)
 80005ec:	f000 fce9 	bl	8000fc2 <I2C_MasterReceiveData>

	return data;
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	2000009c 	.word	0x2000009c

08000600 <binary_to_bcd>:



static uint8_t binary_to_bcd(uint8_t value){
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
	uint8_t m, n, bcd;
	if(value >= 10){
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	2b09      	cmp	r3, #9
 800060e:	d919      	bls.n	8000644 <binary_to_bcd+0x44>
		m = value / 10;
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	4a10      	ldr	r2, [pc, #64]	; (8000654 <binary_to_bcd+0x54>)
 8000614:	fba2 2303 	umull	r2, r3, r2, r3
 8000618:	08db      	lsrs	r3, r3, #3
 800061a:	73bb      	strb	r3, [r7, #14]
		n = value % 10;
 800061c:	79fa      	ldrb	r2, [r7, #7]
 800061e:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <binary_to_bcd+0x54>)
 8000620:	fba3 1302 	umull	r1, r3, r3, r2
 8000624:	08d9      	lsrs	r1, r3, #3
 8000626:	460b      	mov	r3, r1
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	440b      	add	r3, r1
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	737b      	strb	r3, [r7, #13]
		bcd = (uint8_t)((m << 4) | n);
 8000632:	7bbb      	ldrb	r3, [r7, #14]
 8000634:	011b      	lsls	r3, r3, #4
 8000636:	b25a      	sxtb	r2, r3
 8000638:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800063c:	4313      	orrs	r3, r2
 800063e:	b25b      	sxtb	r3, r3
 8000640:	73fb      	strb	r3, [r7, #15]
 8000642:	e001      	b.n	8000648 <binary_to_bcd+0x48>
	}else{
		bcd = value;
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	73fb      	strb	r3, [r7, #15]
	}

	return bcd;
 8000648:	7bfb      	ldrb	r3, [r7, #15]

}
 800064a:	4618      	mov	r0, r3
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	cccccccd 	.word	0xcccccccd

08000658 <bcd_to_binary>:


static uint8_t bcd_to_binary(uint8_t value){
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
	uint8_t m, n, binary;
	m = (uint8_t)(value >> 4) * 10;
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	091b      	lsrs	r3, r3, #4
 8000666:	b2db      	uxtb	r3, r3
 8000668:	461a      	mov	r2, r3
 800066a:	0092      	lsls	r2, r2, #2
 800066c:	4413      	add	r3, r2
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	73fb      	strb	r3, [r7, #15]
	n = (value & (uint8_t)0x0F);
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	f003 030f 	and.w	r3, r3, #15
 8000678:	73bb      	strb	r3, [r7, #14]
	binary = (uint8_t)(m + n);
 800067a:	7bfa      	ldrb	r2, [r7, #15]
 800067c:	7bbb      	ldrb	r3, [r7, #14]
 800067e:	4413      	add	r3, r2
 8000680:	737b      	strb	r3, [r7, #13]
	return binary;
 8000682:	7b7b      	ldrb	r3, [r7, #13]
}
 8000684:	4618      	mov	r0, r3
 8000686:	3714      	adds	r7, #20
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
	...

08000690 <GPIO_PeriClockControl>:
 * @return            -  void
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi){
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	460b      	mov	r3, r1
 800069a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){ // Enable
 800069c:	78fb      	ldrb	r3, [r7, #3]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d157      	bne.n	8000752 <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA){
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4a59      	ldr	r2, [pc, #356]	; (800080c <GPIO_PeriClockControl+0x17c>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d106      	bne.n	80006b8 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80006aa:	4b59      	ldr	r3, [pc, #356]	; (8000810 <GPIO_PeriClockControl+0x180>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a58      	ldr	r2, [pc, #352]	; (8000810 <GPIO_PeriClockControl+0x180>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
		}else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}

}
 80006b6:	e0a3      	b.n	8000800 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB){
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4a56      	ldr	r2, [pc, #344]	; (8000814 <GPIO_PeriClockControl+0x184>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d106      	bne.n	80006ce <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80006c0:	4b53      	ldr	r3, [pc, #332]	; (8000810 <GPIO_PeriClockControl+0x180>)
 80006c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c4:	4a52      	ldr	r2, [pc, #328]	; (8000810 <GPIO_PeriClockControl+0x180>)
 80006c6:	f043 0302 	orr.w	r3, r3, #2
 80006ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006cc:	e098      	b.n	8000800 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC){
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4a51      	ldr	r2, [pc, #324]	; (8000818 <GPIO_PeriClockControl+0x188>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d106      	bne.n	80006e4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80006d6:	4b4e      	ldr	r3, [pc, #312]	; (8000810 <GPIO_PeriClockControl+0x180>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a4d      	ldr	r2, [pc, #308]	; (8000810 <GPIO_PeriClockControl+0x180>)
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006e2:	e08d      	b.n	8000800 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOD){
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4a4d      	ldr	r2, [pc, #308]	; (800081c <GPIO_PeriClockControl+0x18c>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d106      	bne.n	80006fa <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80006ec:	4b48      	ldr	r3, [pc, #288]	; (8000810 <GPIO_PeriClockControl+0x180>)
 80006ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f0:	4a47      	ldr	r2, [pc, #284]	; (8000810 <GPIO_PeriClockControl+0x180>)
 80006f2:	f043 0308 	orr.w	r3, r3, #8
 80006f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006f8:	e082      	b.n	8000800 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE){
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4a48      	ldr	r2, [pc, #288]	; (8000820 <GPIO_PeriClockControl+0x190>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d106      	bne.n	8000710 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000702:	4b43      	ldr	r3, [pc, #268]	; (8000810 <GPIO_PeriClockControl+0x180>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a42      	ldr	r2, [pc, #264]	; (8000810 <GPIO_PeriClockControl+0x180>)
 8000708:	f043 0310 	orr.w	r3, r3, #16
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800070e:	e077      	b.n	8000800 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF){
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4a44      	ldr	r2, [pc, #272]	; (8000824 <GPIO_PeriClockControl+0x194>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d106      	bne.n	8000726 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000718:	4b3d      	ldr	r3, [pc, #244]	; (8000810 <GPIO_PeriClockControl+0x180>)
 800071a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071c:	4a3c      	ldr	r2, [pc, #240]	; (8000810 <GPIO_PeriClockControl+0x180>)
 800071e:	f043 0320 	orr.w	r3, r3, #32
 8000722:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000724:	e06c      	b.n	8000800 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOG){
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4a3f      	ldr	r2, [pc, #252]	; (8000828 <GPIO_PeriClockControl+0x198>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d106      	bne.n	800073c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800072e:	4b38      	ldr	r3, [pc, #224]	; (8000810 <GPIO_PeriClockControl+0x180>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a37      	ldr	r2, [pc, #220]	; (8000810 <GPIO_PeriClockControl+0x180>)
 8000734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
}
 800073a:	e061      	b.n	8000800 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOH){
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a3b      	ldr	r2, [pc, #236]	; (800082c <GPIO_PeriClockControl+0x19c>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d15d      	bne.n	8000800 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000744:	4b32      	ldr	r3, [pc, #200]	; (8000810 <GPIO_PeriClockControl+0x180>)
 8000746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000748:	4a31      	ldr	r2, [pc, #196]	; (8000810 <GPIO_PeriClockControl+0x180>)
 800074a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800074e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000750:	e056      	b.n	8000800 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA){
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4a2d      	ldr	r2, [pc, #180]	; (800080c <GPIO_PeriClockControl+0x17c>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d106      	bne.n	8000768 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 800075a:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <GPIO_PeriClockControl+0x180>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a2c      	ldr	r2, [pc, #176]	; (8000810 <GPIO_PeriClockControl+0x180>)
 8000760:	f023 0301 	bic.w	r3, r3, #1
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000766:	e04b      	b.n	8000800 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB){
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4a2a      	ldr	r2, [pc, #168]	; (8000814 <GPIO_PeriClockControl+0x184>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d106      	bne.n	800077e <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 8000770:	4b27      	ldr	r3, [pc, #156]	; (8000810 <GPIO_PeriClockControl+0x180>)
 8000772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000774:	4a26      	ldr	r2, [pc, #152]	; (8000810 <GPIO_PeriClockControl+0x180>)
 8000776:	f023 0302 	bic.w	r3, r3, #2
 800077a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800077c:	e040      	b.n	8000800 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC){
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4a25      	ldr	r2, [pc, #148]	; (8000818 <GPIO_PeriClockControl+0x188>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d106      	bne.n	8000794 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 8000786:	4b22      	ldr	r3, [pc, #136]	; (8000810 <GPIO_PeriClockControl+0x180>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a21      	ldr	r2, [pc, #132]	; (8000810 <GPIO_PeriClockControl+0x180>)
 800078c:	f023 0304 	bic.w	r3, r3, #4
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000792:	e035      	b.n	8000800 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOD){
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4a21      	ldr	r2, [pc, #132]	; (800081c <GPIO_PeriClockControl+0x18c>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d106      	bne.n	80007aa <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 800079c:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <GPIO_PeriClockControl+0x180>)
 800079e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a0:	4a1b      	ldr	r2, [pc, #108]	; (8000810 <GPIO_PeriClockControl+0x180>)
 80007a2:	f023 0308 	bic.w	r3, r3, #8
 80007a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007a8:	e02a      	b.n	8000800 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE){
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4a1c      	ldr	r2, [pc, #112]	; (8000820 <GPIO_PeriClockControl+0x190>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d106      	bne.n	80007c0 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <GPIO_PeriClockControl+0x180>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a16      	ldr	r2, [pc, #88]	; (8000810 <GPIO_PeriClockControl+0x180>)
 80007b8:	f023 0310 	bic.w	r3, r3, #16
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007be:	e01f      	b.n	8000800 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF){
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	4a18      	ldr	r2, [pc, #96]	; (8000824 <GPIO_PeriClockControl+0x194>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d106      	bne.n	80007d6 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <GPIO_PeriClockControl+0x180>)
 80007ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007cc:	4a10      	ldr	r2, [pc, #64]	; (8000810 <GPIO_PeriClockControl+0x180>)
 80007ce:	f023 0320 	bic.w	r3, r3, #32
 80007d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007d4:	e014      	b.n	8000800 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOG){
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a13      	ldr	r2, [pc, #76]	; (8000828 <GPIO_PeriClockControl+0x198>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d106      	bne.n	80007ec <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 80007de:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <GPIO_PeriClockControl+0x180>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a0b      	ldr	r2, [pc, #44]	; (8000810 <GPIO_PeriClockControl+0x180>)
 80007e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ea:	e009      	b.n	8000800 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOH){
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4a0f      	ldr	r2, [pc, #60]	; (800082c <GPIO_PeriClockControl+0x19c>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d105      	bne.n	8000800 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <GPIO_PeriClockControl+0x180>)
 80007f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f8:	4a05      	ldr	r2, [pc, #20]	; (8000810 <GPIO_PeriClockControl+0x180>)
 80007fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80007fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	40020000 	.word	0x40020000
 8000810:	40023800 	.word	0x40023800
 8000814:	40020400 	.word	0x40020400
 8000818:	40020800 	.word	0x40020800
 800081c:	40020c00 	.word	0x40020c00
 8000820:	40021000 	.word	0x40021000
 8000824:	40021400 	.word	0x40021400
 8000828:	40021800 	.word	0x40021800
 800082c:	40021c00 	.word	0x40021c00

08000830 <GPIO_Init>:


/*
 * Initialize and De-Initialize
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]

	// Enable Peripheral Clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2101      	movs	r1, #1
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ff26 	bl	8000690 <GPIO_PeriClockControl>

	uint32_t temp = 0; // Temporary Register
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]

	// 1. Configure Mode of GPIO Pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	795b      	ldrb	r3, [r3, #5]
 800084c:	2b03      	cmp	r3, #3
 800084e:	d821      	bhi.n	8000894 <GPIO_Init+0x64>
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	795b      	ldrb	r3, [r3, #5]
 8000854:	461a      	mov	r2, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	791b      	ldrb	r3, [r3, #4]
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	fa02 f303 	lsl.w	r3, r2, r3
 8000860:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	791b      	ldrb	r3, [r3, #4]
 800086c:	4619      	mov	r1, r3
 800086e:	2303      	movs	r3, #3
 8000870:	408b      	lsls	r3, r1
 8000872:	43db      	mvns	r3, r3
 8000874:	4619      	mov	r1, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	400a      	ands	r2, r1
 800087c:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // Set
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	6819      	ldr	r1, [r3, #0]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	68fa      	ldr	r2, [r7, #12]
 800088a:	430a      	orrs	r2, r1
 800088c:	601a      	str	r2, [r3, #0]
		temp = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	e0b8      	b.n	8000a06 <GPIO_Init+0x1d6>
	}else{
		// TODO: Interrupt Mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	795b      	ldrb	r3, [r3, #5]
 8000898:	2b04      	cmp	r3, #4
 800089a:	d117      	bne.n	80008cc <GPIO_Init+0x9c>
			// Configure the Falling Trigger Selection Register
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800089c:	4b43      	ldr	r3, [pc, #268]	; (80009ac <GPIO_Init+0x17c>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	7912      	ldrb	r2, [r2, #4]
 80008a4:	4611      	mov	r1, r2
 80008a6:	2201      	movs	r2, #1
 80008a8:	408a      	lsls	r2, r1
 80008aa:	4611      	mov	r1, r2
 80008ac:	4a3f      	ldr	r2, [pc, #252]	; (80009ac <GPIO_Init+0x17c>)
 80008ae:	430b      	orrs	r3, r1
 80008b0:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear RTSR
 80008b2:	4b3e      	ldr	r3, [pc, #248]	; (80009ac <GPIO_Init+0x17c>)
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	7912      	ldrb	r2, [r2, #4]
 80008ba:	4611      	mov	r1, r2
 80008bc:	2201      	movs	r2, #1
 80008be:	408a      	lsls	r2, r1
 80008c0:	43d2      	mvns	r2, r2
 80008c2:	4611      	mov	r1, r2
 80008c4:	4a39      	ldr	r2, [pc, #228]	; (80009ac <GPIO_Init+0x17c>)
 80008c6:	400b      	ands	r3, r1
 80008c8:	6093      	str	r3, [r2, #8]
 80008ca:	e035      	b.n	8000938 <GPIO_Init+0x108>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	795b      	ldrb	r3, [r3, #5]
 80008d0:	2b05      	cmp	r3, #5
 80008d2:	d117      	bne.n	8000904 <GPIO_Init+0xd4>
			// Configure the Rising Trigger Selection Register
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008d4:	4b35      	ldr	r3, [pc, #212]	; (80009ac <GPIO_Init+0x17c>)
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	7912      	ldrb	r2, [r2, #4]
 80008dc:	4611      	mov	r1, r2
 80008de:	2201      	movs	r2, #1
 80008e0:	408a      	lsls	r2, r1
 80008e2:	4611      	mov	r1, r2
 80008e4:	4a31      	ldr	r2, [pc, #196]	; (80009ac <GPIO_Init+0x17c>)
 80008e6:	430b      	orrs	r3, r1
 80008e8:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear FTSR
 80008ea:	4b30      	ldr	r3, [pc, #192]	; (80009ac <GPIO_Init+0x17c>)
 80008ec:	68db      	ldr	r3, [r3, #12]
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	7912      	ldrb	r2, [r2, #4]
 80008f2:	4611      	mov	r1, r2
 80008f4:	2201      	movs	r2, #1
 80008f6:	408a      	lsls	r2, r1
 80008f8:	43d2      	mvns	r2, r2
 80008fa:	4611      	mov	r1, r2
 80008fc:	4a2b      	ldr	r2, [pc, #172]	; (80009ac <GPIO_Init+0x17c>)
 80008fe:	400b      	ands	r3, r1
 8000900:	60d3      	str	r3, [r2, #12]
 8000902:	e019      	b.n	8000938 <GPIO_Init+0x108>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	795b      	ldrb	r3, [r3, #5]
 8000908:	2b06      	cmp	r3, #6
 800090a:	d115      	bne.n	8000938 <GPIO_Init+0x108>
			// Configure Both Falling and Rising
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800090c:	4b27      	ldr	r3, [pc, #156]	; (80009ac <GPIO_Init+0x17c>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	7912      	ldrb	r2, [r2, #4]
 8000914:	4611      	mov	r1, r2
 8000916:	2201      	movs	r2, #1
 8000918:	408a      	lsls	r2, r1
 800091a:	4611      	mov	r1, r2
 800091c:	4a23      	ldr	r2, [pc, #140]	; (80009ac <GPIO_Init+0x17c>)
 800091e:	430b      	orrs	r3, r1
 8000920:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000922:	4b22      	ldr	r3, [pc, #136]	; (80009ac <GPIO_Init+0x17c>)
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	7912      	ldrb	r2, [r2, #4]
 800092a:	4611      	mov	r1, r2
 800092c:	2201      	movs	r2, #1
 800092e:	408a      	lsls	r2, r1
 8000930:	4611      	mov	r1, r2
 8000932:	4a1e      	ldr	r2, [pc, #120]	; (80009ac <GPIO_Init+0x17c>)
 8000934:	430b      	orrs	r3, r1
 8000936:	6093      	str	r3, [r2, #8]
		}

		// Configure the GPIO port Selection in SYSCFG_EXTICR
		uint8_t ExtiCR_Number = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	791b      	ldrb	r3, [r3, #4]
 800093c:	089b      	lsrs	r3, r3, #2
 800093e:	72fb      	strb	r3, [r7, #11]
		uint8_t ExtiCR_ShiftOffset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	791b      	ldrb	r3, [r3, #4]
 8000944:	f003 0303 	and.w	r3, r3, #3
 8000948:	72bb      	strb	r3, [r7, #10]
		uint8_t portcode = GPIO_BASEADDR_TO_PORTCODE(pGPIOHandle->pGPIOx);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a18      	ldr	r2, [pc, #96]	; (80009b0 <GPIO_Init+0x180>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d03b      	beq.n	80009cc <GPIO_Init+0x19c>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a16      	ldr	r2, [pc, #88]	; (80009b4 <GPIO_Init+0x184>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d024      	beq.n	80009a8 <GPIO_Init+0x178>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a15      	ldr	r2, [pc, #84]	; (80009b8 <GPIO_Init+0x188>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d01d      	beq.n	80009a4 <GPIO_Init+0x174>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a13      	ldr	r2, [pc, #76]	; (80009bc <GPIO_Init+0x18c>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d016      	beq.n	80009a0 <GPIO_Init+0x170>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a12      	ldr	r2, [pc, #72]	; (80009c0 <GPIO_Init+0x190>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d00f      	beq.n	800099c <GPIO_Init+0x16c>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a10      	ldr	r2, [pc, #64]	; (80009c4 <GPIO_Init+0x194>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d008      	beq.n	8000998 <GPIO_Init+0x168>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a0f      	ldr	r2, [pc, #60]	; (80009c8 <GPIO_Init+0x198>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d101      	bne.n	8000994 <GPIO_Init+0x164>
 8000990:	2306      	movs	r3, #6
 8000992:	e01c      	b.n	80009ce <GPIO_Init+0x19e>
 8000994:	2300      	movs	r3, #0
 8000996:	e01a      	b.n	80009ce <GPIO_Init+0x19e>
 8000998:	2305      	movs	r3, #5
 800099a:	e018      	b.n	80009ce <GPIO_Init+0x19e>
 800099c:	2304      	movs	r3, #4
 800099e:	e016      	b.n	80009ce <GPIO_Init+0x19e>
 80009a0:	2303      	movs	r3, #3
 80009a2:	e014      	b.n	80009ce <GPIO_Init+0x19e>
 80009a4:	2302      	movs	r3, #2
 80009a6:	e012      	b.n	80009ce <GPIO_Init+0x19e>
 80009a8:	2301      	movs	r3, #1
 80009aa:	e010      	b.n	80009ce <GPIO_Init+0x19e>
 80009ac:	40013c00 	.word	0x40013c00
 80009b0:	40020000 	.word	0x40020000
 80009b4:	40020400 	.word	0x40020400
 80009b8:	40020800 	.word	0x40020800
 80009bc:	40020c00 	.word	0x40020c00
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40021400 	.word	0x40021400
 80009c8:	40021800 	.word	0x40021800
 80009cc:	2300      	movs	r3, #0
 80009ce:	727b      	strb	r3, [r7, #9]
		SYSCFG_PCLK_EN();
 80009d0:	4b6a      	ldr	r3, [pc, #424]	; (8000b7c <GPIO_Init+0x34c>)
 80009d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d4:	4a69      	ldr	r2, [pc, #420]	; (8000b7c <GPIO_Init+0x34c>)
 80009d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009da:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[ExtiCR_Number] = portcode << (ExtiCR_ShiftOffset * 4);
 80009dc:	7a7a      	ldrb	r2, [r7, #9]
 80009de:	7abb      	ldrb	r3, [r7, #10]
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	fa02 f103 	lsl.w	r1, r2, r3
 80009e6:	4a66      	ldr	r2, [pc, #408]	; (8000b80 <GPIO_Init+0x350>)
 80009e8:	7afb      	ldrb	r3, [r7, #11]
 80009ea:	3302      	adds	r3, #2
 80009ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80009f0:	4b64      	ldr	r3, [pc, #400]	; (8000b84 <GPIO_Init+0x354>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	7912      	ldrb	r2, [r2, #4]
 80009f8:	4611      	mov	r1, r2
 80009fa:	2201      	movs	r2, #1
 80009fc:	408a      	lsls	r2, r1
 80009fe:	4611      	mov	r1, r2
 8000a00:	4a60      	ldr	r2, [pc, #384]	; (8000b84 <GPIO_Init+0x354>)
 8000a02:	430b      	orrs	r3, r1
 8000a04:	6013      	str	r3, [r2, #0]
	}

	// 2. Configure Speed
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	799b      	ldrb	r3, [r3, #6]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	791b      	ldrb	r3, [r3, #4]
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	689a      	ldr	r2, [r3, #8]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	791b      	ldrb	r3, [r3, #4]
 8000a22:	4619      	mov	r1, r3
 8000a24:	2303      	movs	r3, #3
 8000a26:	408b      	lsls	r3, r1
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	400a      	ands	r2, r1
 8000a32:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	6899      	ldr	r1, [r3, #8]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	430a      	orrs	r2, r1
 8000a42:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]

	// 3. Configure Pull-up Pull-down Settings
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	79db      	ldrb	r3, [r3, #7]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	791b      	ldrb	r3, [r3, #4]
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	68da      	ldr	r2, [r3, #12]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	791b      	ldrb	r3, [r3, #4]
 8000a64:	4619      	mov	r1, r3
 8000a66:	2303      	movs	r3, #3
 8000a68:	408b      	lsls	r3, r1
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	400a      	ands	r2, r1
 8000a74:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	68d9      	ldr	r1, [r3, #12]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	430a      	orrs	r2, r1
 8000a84:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]

	// 4. Configure the Output Type
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	7a1b      	ldrb	r3, [r3, #8]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	791b      	ldrb	r3, [r3, #4]
 8000a94:	fa02 f303 	lsl.w	r3, r2, r3
 8000a98:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	685a      	ldr	r2, [r3, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	791b      	ldrb	r3, [r3, #4]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	408b      	lsls	r3, r1
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	4619      	mov	r1, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	400a      	ands	r2, r1
 8000ab4:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	6859      	ldr	r1, [r3, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	68fa      	ldr	r2, [r7, #12]
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]

	// 5. Configure Alternate Functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFUN){
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	795b      	ldrb	r3, [r3, #5]
 8000ace:	2b02      	cmp	r3, #2
 8000ad0:	d150      	bne.n	8000b74 <GPIO_Init+0x344>
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= GPIO_PIN_NO_7){
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	791b      	ldrb	r3, [r3, #4]
 8000ad6:	2b07      	cmp	r3, #7
 8000ad8:	d826      	bhi.n	8000b28 <GPIO_Init+0x2f8>
				// AFRL Registers
				temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	7a5b      	ldrb	r3, [r3, #9]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	791b      	ldrb	r3, [r3, #4]
 8000ae4:	f003 0307 	and.w	r3, r3, #7
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->AFRL &= ~(0xF << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8))); // Clear
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	6a1a      	ldr	r2, [r3, #32]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	791b      	ldrb	r3, [r3, #4]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	210f      	movs	r1, #15
 8000b02:	fa01 f303 	lsl.w	r3, r1, r3
 8000b06:	43db      	mvns	r3, r3
 8000b08:	4619      	mov	r1, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	400a      	ands	r2, r1
 8000b10:	621a      	str	r2, [r3, #32]
				pGPIOHandle->pGPIOx->AFRL |= temp;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	6a19      	ldr	r1, [r3, #32]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	621a      	str	r2, [r3, #32]
				temp = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->AFRH |= temp;
				temp = 0;
			}
	}

}
 8000b26:	e025      	b.n	8000b74 <GPIO_Init+0x344>
				temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	7a5b      	ldrb	r3, [r3, #9]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	791b      	ldrb	r3, [r3, #4]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->AFRH &= ~(0xF << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8))); // Clear
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	791b      	ldrb	r3, [r3, #4]
 8000b48:	f003 0307 	and.w	r3, r3, #7
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	210f      	movs	r1, #15
 8000b50:	fa01 f303 	lsl.w	r3, r1, r3
 8000b54:	43db      	mvns	r3, r3
 8000b56:	4619      	mov	r1, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	400a      	ands	r2, r1
 8000b5e:	625a      	str	r2, [r3, #36]	; 0x24
				pGPIOHandle->pGPIOx->AFRH |= temp;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	625a      	str	r2, [r3, #36]	; 0x24
				temp = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
}
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40013800 	.word	0x40013800
 8000b84:	40013c00 	.word	0x40013c00

08000b88 <I2C_GenerateStartCondition>:
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle);
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle);
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle);

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	601a      	str	r2, [r3, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr

08000ba6 <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	460b      	mov	r3, r1
 8000bb0:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000bb2:	78fb      	ldrb	r3, [r7, #3]
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 8000bb8:	78fb      	ldrb	r3, [r7, #3]
 8000bba:	f023 0301 	bic.w	r3, r3, #1
 8000bbe:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000bc0:	78fa      	ldrb	r2, [r7, #3]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	611a      	str	r2, [r3, #16]
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <I2C_ExecuteAddressPhaseRead>:


static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000bdc:	78fb      	ldrb	r3, [r7, #3]
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 8000be2:	78fb      	ldrb	r3, [r7, #3]
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000bea:	78fa      	ldrb	r2, [r7, #3]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	611a      	str	r2, [r3, #16]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr

08000bfa <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle){
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b084      	sub	sp, #16
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	// Check for Device Mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d01f      	beq.n	8000c50 <I2C_ClearADDRFlag+0x56>
		// Master
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	7f1b      	ldrb	r3, [r3, #28]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d112      	bne.n	8000c3e <I2C_ClearADDRFlag+0x44>
			if(pI2CHandle->RxSize == 1){
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6a1b      	ldr	r3, [r3, #32]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d11f      	bne.n	8000c60 <I2C_ClearADDRFlag+0x66>
				// Disable the ACK
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 fa5d 	bl	80010e6 <I2C_ManageAcking>

				// Clear the ADDR Flag (read SR1 and SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	699b      	ldr	r3, [r3, #24]
 8000c3a:	60fb      	str	r3, [r7, #12]
		// Clear the ADDR Flag (read SR1 and SR2)
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}
}
 8000c3c:	e010      	b.n	8000c60 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	60fb      	str	r3, [r7, #12]
}
 8000c4e:	e007      	b.n	8000c60 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	60fb      	str	r3, [r7, #12]
}
 8000c60:	bf00      	nop
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <I2C_GenerateStopCondition>:

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	601a      	str	r2, [r3, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
	...

08000c88 <I2C_PeriClockControl>:
	}
}


// Peripheral Clock Setup
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000c94:	78fb      	ldrb	r3, [r7, #3]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d120      	bne.n	8000cdc <I2C_PeriClockControl+0x54>
		// Enable
		if(pI2Cx == I2C1){
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a22      	ldr	r2, [pc, #136]	; (8000d28 <I2C_PeriClockControl+0xa0>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d106      	bne.n	8000cb0 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 8000ca2:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <I2C_PeriClockControl+0xa4>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	4a21      	ldr	r2, [pc, #132]	; (8000d2c <I2C_PeriClockControl+0xa4>)
 8000ca8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cac:	6413      	str	r3, [r2, #64]	; 0x40
			I2C2_PCLK_DI();
		}else if(pI2Cx == I2C3){
			I2C3_PCLK_DI();
		}
	}
}
 8000cae:	e035      	b.n	8000d1c <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C2){
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a1f      	ldr	r2, [pc, #124]	; (8000d30 <I2C_PeriClockControl+0xa8>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d106      	bne.n	8000cc6 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <I2C_PeriClockControl+0xa4>)
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	4a1b      	ldr	r2, [pc, #108]	; (8000d2c <I2C_PeriClockControl+0xa4>)
 8000cbe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cc2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000cc4:	e02a      	b.n	8000d1c <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C3){
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a1a      	ldr	r2, [pc, #104]	; (8000d34 <I2C_PeriClockControl+0xac>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d126      	bne.n	8000d1c <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <I2C_PeriClockControl+0xa4>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	4a16      	ldr	r2, [pc, #88]	; (8000d2c <I2C_PeriClockControl+0xa4>)
 8000cd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000cd8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000cda:	e01f      	b.n	8000d1c <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1){
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a12      	ldr	r2, [pc, #72]	; (8000d28 <I2C_PeriClockControl+0xa0>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d106      	bne.n	8000cf2 <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <I2C_PeriClockControl+0xa4>)
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce8:	4a10      	ldr	r2, [pc, #64]	; (8000d2c <I2C_PeriClockControl+0xa4>)
 8000cea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000cee:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000cf0:	e014      	b.n	8000d1c <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C2){
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <I2C_PeriClockControl+0xa8>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d106      	bne.n	8000d08 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <I2C_PeriClockControl+0xa4>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <I2C_PeriClockControl+0xa4>)
 8000d00:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000d04:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d06:	e009      	b.n	8000d1c <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C3){
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <I2C_PeriClockControl+0xac>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d105      	bne.n	8000d1c <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <I2C_PeriClockControl+0xa4>)
 8000d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d14:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <I2C_PeriClockControl+0xa4>)
 8000d16:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000d1a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40005400 	.word	0x40005400
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40005800 	.word	0x40005800
 8000d34:	40005c00 	.word	0x40005c00

08000d38 <I2C_PeripheralControl>:

// I2C Peripheral Control
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000d44:	78fb      	ldrb	r3, [r7, #3]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d106      	bne.n	8000d58 <I2C_PeripheralControl+0x20>
		// Enable
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f043 0201 	orr.w	r2, r3, #1
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	601a      	str	r2, [r3, #0]
	}else{
		// Disable
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}

}
 8000d56:	e005      	b.n	8000d64 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f023 0201 	bic.w	r2, r3, #1
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	601a      	str	r2, [r3, #0]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr
	...

08000d70 <I2C_Init>:


void I2C_Init(I2C_Handle_t *pI2C_Handle){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]

	// Enable the Clock for the I2Cx Peripheral
	I2C_PeriClockControl(pI2C_Handle->pI2Cx, ENABLE);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2101      	movs	r1, #1
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ff80 	bl	8000c88 <I2C_PeriClockControl>

	// ACK Control Bit
	tempreg |= pI2C_Handle->I2C_Config.I2C_ACKControl << 10;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	7a5b      	ldrb	r3, [r3, #9]
 8000d8c:	029b      	lsls	r3, r3, #10
 8000d8e:	461a      	mov	r2, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]
	pI2C_Handle->pI2Cx->CR1 = tempreg;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	601a      	str	r2, [r3, #0]

	// Configure the FREQ field of CR2
	tempreg = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
	tempreg |= (RCC_GetPCLK1Value() / 1000000U); // Divide by 1MHz to only get 16 instead of 16MHz
 8000da2:	f000 f9d9 	bl	8001158 <RCC_GetPCLK1Value>
 8000da6:	4603      	mov	r3, r0
 8000da8:	4a4f      	ldr	r2, [pc, #316]	; (8000ee8 <I2C_Init+0x178>)
 8000daa:	fba2 2303 	umull	r2, r3, r2, r3
 8000dae:	0c9b      	lsrs	r3, r3, #18
 8000db0:	68fa      	ldr	r2, [r7, #12]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	60fb      	str	r3, [r7, #12]
	pI2C_Handle->pI2Cx->CR2 = (tempreg & 0x3F);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000dc0:	605a      	str	r2, [r3, #4]

	// Device Own Address
	tempreg = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2C_Handle->I2C_Config.I2C_DeviceAddress << 1;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	7a1b      	ldrb	r3, [r3, #8]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	461a      	mov	r2, r3
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dda:	60fb      	str	r3, [r7, #12]
	pI2C_Handle->pI2Cx->OAR1 |= tempreg;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	6899      	ldr	r1, [r3, #8]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	430a      	orrs	r2, r1
 8000dea:	609a      	str	r2, [r3, #8]

	// Clock Control Calculations
	uint16_t ccr_value = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
	if(pI2C_Handle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	4a3c      	ldr	r2, [pc, #240]	; (8000eec <I2C_Init+0x17c>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d813      	bhi.n	8000e26 <I2C_Init+0xb6>
		// Standard Mode
		tempreg &= ~(1 << 15);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e04:	60fb      	str	r3, [r7, #12]
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2C_Handle->I2C_Config.I2C_SCLSpeed);
 8000e06:	f000 f9a7 	bl	8001158 <RCC_GetPCLK1Value>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e16:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000e18:	897b      	ldrh	r3, [r7, #10]
 8000e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	e02d      	b.n	8000e82 <I2C_Init+0x112>
	}else{
		// Fast Mode
		tempreg |= (1 << 15);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e2c:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2C_Handle->I2C_Config.I2C_FMDutyCycle << 14);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	7a9b      	ldrb	r3, [r3, #10]
 8000e32:	039b      	lsls	r3, r3, #14
 8000e34:	461a      	mov	r2, r3
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	60fb      	str	r3, [r7, #12]
		if(pI2C_Handle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	7a9b      	ldrb	r3, [r3, #10]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d10b      	bne.n	8000e5c <I2C_Init+0xec>
			ccr_value = RCC_GetPCLK1Value() / (3 * pI2C_Handle->I2C_Config.I2C_SCLSpeed);
 8000e44:	f000 f988 	bl	8001158 <RCC_GetPCLK1Value>
 8000e48:	4601      	mov	r1, r0
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	4413      	add	r3, r2
 8000e54:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e58:	817b      	strh	r3, [r7, #10]
 8000e5a:	e00c      	b.n	8000e76 <I2C_Init+0x106>
		}else{
			ccr_value = RCC_GetPCLK1Value() / (25 * pI2C_Handle->I2C_Config.I2C_SCLSpeed);
 8000e5c:	f000 f97c 	bl	8001158 <RCC_GetPCLK1Value>
 8000e60:	4601      	mov	r1, r0
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	4613      	mov	r3, r2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	4413      	add	r3, r2
 8000e6c:	009a      	lsls	r2, r3, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e74:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000e76:	897b      	ldrh	r3, [r7, #10]
 8000e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e7c:	68fa      	ldr	r2, [r7, #12]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	60fb      	str	r3, [r7, #12]
	}

	pI2C_Handle->pI2Cx->CCR |= tempreg;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	69d9      	ldr	r1, [r3, #28]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	68fa      	ldr	r2, [r7, #12]
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	61da      	str	r2, [r3, #28]

	// TRISE
	if(pI2C_Handle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	4a15      	ldr	r2, [pc, #84]	; (8000eec <I2C_Init+0x17c>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d809      	bhi.n	8000eb0 <I2C_Init+0x140>
		// Standard Mode
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000e9c:	f000 f95c 	bl	8001158 <RCC_GetPCLK1Value>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	4a11      	ldr	r2, [pc, #68]	; (8000ee8 <I2C_Init+0x178>)
 8000ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea8:	0c9b      	lsrs	r3, r3, #18
 8000eaa:	3301      	adds	r3, #1
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	e00d      	b.n	8000ecc <I2C_Init+0x15c>
	}else{
		// Fast Mode
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 8000eb0:	f000 f952 	bl	8001158 <RCC_GetPCLK1Value>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000eba:	fb02 f303 	mul.w	r3, r2, r3
 8000ebe:	0a5b      	lsrs	r3, r3, #9
 8000ec0:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <I2C_Init+0x180>)
 8000ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec6:	09db      	lsrs	r3, r3, #7
 8000ec8:	3301      	adds	r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
	}

	pI2C_Handle->pI2Cx->TRISE |= (tempreg & 0x3F);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	6a19      	ldr	r1, [r3, #32]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	430a      	orrs	r2, r1
 8000ede:	621a      	str	r2, [r3, #32]
}
 8000ee0:	bf00      	nop
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	431bde83 	.word	0x431bde83
 8000eec:	000186a0 	.word	0x000186a0
 8000ef0:	00044b83 	.word	0x00044b83

08000ef4 <I2C_MasterSendData>:
}




void I2C_MasterSendData(I2C_Handle_t *pI2C_Handle, uint8_t *pTxBuffer, uint8_t Length, uint8_t SlaveAddr, uint8_t Sr){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	4611      	mov	r1, r2
 8000f00:	461a      	mov	r2, r3
 8000f02:	460b      	mov	r3, r1
 8000f04:	71fb      	strb	r3, [r7, #7]
 8000f06:	4613      	mov	r3, r2
 8000f08:	71bb      	strb	r3, [r7, #6]
	// 1. Generate the Start Condition
	I2C_GenerateStartCondition(pI2C_Handle->pI2Cx);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fe3a 	bl	8000b88 <I2C_GenerateStartCondition>

	// 2. Confirm that start generation is completed by checking the SB Flag in the SR1
	while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_SB));
 8000f14:	bf00      	nop
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f000 f8fd 	bl	800111c <I2C_GetFlagStatus>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d0f6      	beq.n	8000f16 <I2C_MasterSendData+0x22>

	// 3. Send the Address of the slave with R/nW bit set to W(0) (total 8 bits)
	I2C_ExecuteAddressPhaseWrite(pI2C_Handle->pI2Cx, SlaveAddr);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	79ba      	ldrb	r2, [r7, #6]
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fe38 	bl	8000ba6 <I2C_ExecuteAddressPhaseWrite>

	// 4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_ADDR));
 8000f36:	bf00      	nop
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2102      	movs	r1, #2
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f8ec 	bl	800111c <I2C_GetFlagStatus>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0f6      	beq.n	8000f38 <I2C_MasterSendData+0x44>

	// 5. Clear the ADDR Flag according to its software sequence
	I2C_ClearADDRFlag(pI2C_Handle);
 8000f4a:	68f8      	ldr	r0, [r7, #12]
 8000f4c:	f7ff fe55 	bl	8000bfa <I2C_ClearADDRFlag>

	// 6. Send the data until Length becomes 0
	while(Length > 0){
 8000f50:	e014      	b.n	8000f7c <I2C_MasterSendData+0x88>
		while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_TXE)); // Wait till TXE is set
 8000f52:	bf00      	nop
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2180      	movs	r1, #128	; 0x80
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f8de 	bl	800111c <I2C_GetFlagStatus>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d0f6      	beq.n	8000f54 <I2C_MasterSendData+0x60>
		pI2C_Handle->pI2Cx->DR = *pTxBuffer;
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	781a      	ldrb	r2, [r3, #0]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	3301      	adds	r3, #1
 8000f74:	60bb      	str	r3, [r7, #8]
		Length--;
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	71fb      	strb	r3, [r7, #7]
	while(Length > 0){
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1e7      	bne.n	8000f52 <I2C_MasterSendData+0x5e>
	}

	// 7. When Length becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_TXE));
 8000f82:	bf00      	nop
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2180      	movs	r1, #128	; 0x80
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f8c6 	bl	800111c <I2C_GetFlagStatus>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d0f6      	beq.n	8000f84 <I2C_MasterSendData+0x90>
	while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_BTF));
 8000f96:	bf00      	nop
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2104      	movs	r1, #4
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f8bc 	bl	800111c <I2C_GetFlagStatus>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d0f6      	beq.n	8000f98 <I2C_MasterSendData+0xa4>

	// 8. Generate STOP condition and master need not to wait for the completion of stop condition
	if(Sr == I2C_DISABLE_SR){
 8000faa:	7e3b      	ldrb	r3, [r7, #24]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d104      	bne.n	8000fba <I2C_MasterSendData+0xc6>
		I2C_GenerateStopCondition(pI2C_Handle->pI2Cx);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fe57 	bl	8000c68 <I2C_GenerateStopCondition>
	}


}
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <I2C_MasterReceiveData>:


void I2C_MasterReceiveData(I2C_Handle_t *pI2C_Handle, uint8_t *pRxBuffer, uint8_t Length, uint8_t SlaveAddr, uint8_t Sr){
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b086      	sub	sp, #24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	60f8      	str	r0, [r7, #12]
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	4611      	mov	r1, r2
 8000fce:	461a      	mov	r2, r3
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	71fb      	strb	r3, [r7, #7]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	71bb      	strb	r3, [r7, #6]

	// 1. Generate the Start Condition
	I2C_GenerateStartCondition(pI2C_Handle->pI2Cx);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fdd3 	bl	8000b88 <I2C_GenerateStartCondition>

	// 2. Confirm that start generation is completed by checking the SB Flag in the SR1
	while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_SB));
 8000fe2:	bf00      	nop
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2101      	movs	r1, #1
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 f896 	bl	800111c <I2C_GetFlagStatus>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d0f6      	beq.n	8000fe4 <I2C_MasterReceiveData+0x22>

	// 3. Send the Address of the slave with R/nW bit set to R(1) (total 8 bits)
	I2C_ExecuteAddressPhaseRead(pI2C_Handle->pI2Cx, SlaveAddr);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	79ba      	ldrb	r2, [r7, #6]
 8000ffc:	4611      	mov	r1, r2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fde6 	bl	8000bd0 <I2C_ExecuteAddressPhaseRead>

	// 4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_ADDR));
 8001004:	bf00      	nop
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2102      	movs	r1, #2
 800100c:	4618      	mov	r0, r3
 800100e:	f000 f885 	bl	800111c <I2C_GetFlagStatus>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d0f6      	beq.n	8001006 <I2C_MasterReceiveData+0x44>

	// if Reading Length only 1 Byte
	if(Length == 1){
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d121      	bne.n	8001062 <I2C_MasterReceiveData+0xa0>
		// Disable ACKing
		I2C_ManageAcking(pI2C_Handle->pI2Cx, I2C_ACK_DISABLE);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f000 f85e 	bl	80010e6 <I2C_ManageAcking>

		// Clear the ADDR Flag
		I2C_ClearADDRFlag(pI2C_Handle);
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f7ff fde5 	bl	8000bfa <I2C_ClearADDRFlag>

		// Wait until RXNE Becomes 1
		while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_RXNE));
 8001030:	bf00      	nop
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2140      	movs	r1, #64	; 0x40
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f86f 	bl	800111c <I2C_GetFlagStatus>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0f6      	beq.n	8001032 <I2C_MasterReceiveData+0x70>

		// Generate STOP Condition
		if(Sr == I2C_DISABLE_SR){
 8001044:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d104      	bne.n	8001056 <I2C_MasterReceiveData+0x94>
			I2C_GenerateStopCondition(pI2C_Handle->pI2Cx);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fe09 	bl	8000c68 <I2C_GenerateStopCondition>
		}

		// Read Data into Buffer
		*pRxBuffer = pI2C_Handle->pI2Cx->DR;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	701a      	strb	r2, [r3, #0]

	}

	// if Reading Length > 1
	if(Length > 1){
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d930      	bls.n	80010ca <I2C_MasterReceiveData+0x108>
		// Clear the ADDR Flag
		I2C_ClearADDRFlag(pI2C_Handle);
 8001068:	68f8      	ldr	r0, [r7, #12]
 800106a:	f7ff fdc6 	bl	8000bfa <I2C_ClearADDRFlag>

		// Read the Data until Length becomes zero
		for(uint32_t i = Length; i > 0; i--){
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	e027      	b.n	80010c4 <I2C_MasterReceiveData+0x102>
			// wait for RXNE becomes 1
			while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_RXNE));
 8001074:	bf00      	nop
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2140      	movs	r1, #64	; 0x40
 800107c:	4618      	mov	r0, r3
 800107e:	f000 f84d 	bl	800111c <I2C_GetFlagStatus>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0f6      	beq.n	8001076 <I2C_MasterReceiveData+0xb4>

			// Last 2 Bytes remaining
			if(i == 2){
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	2b02      	cmp	r3, #2
 800108c:	d10e      	bne.n	80010ac <I2C_MasterReceiveData+0xea>
				// Clear the ACK bit
				I2C_ManageAcking(pI2C_Handle->pI2Cx, I2C_ACK_DISABLE);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f000 f826 	bl	80010e6 <I2C_ManageAcking>

				// Generate STOP Condition
				if(Sr == I2C_DISABLE_SR){
 800109a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d104      	bne.n	80010ac <I2C_MasterReceiveData+0xea>
					I2C_GenerateStopCondition(pI2C_Handle->pI2Cx);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fdde 	bl	8000c68 <I2C_GenerateStopCondition>
				}
			}

			// Read the Data from the Data Register into Buffer
			*pRxBuffer = pI2C_Handle->pI2Cx->DR;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	701a      	strb	r2, [r3, #0]

			// Increment the Buffer Address
			pRxBuffer++;
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	3301      	adds	r3, #1
 80010bc:	60bb      	str	r3, [r7, #8]
		for(uint32_t i = Length; i > 0; i--){
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1d4      	bne.n	8001074 <I2C_MasterReceiveData+0xb2>

		}
	}

	// Re-Enable ACKing
	if(pI2C_Handle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE){
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	7a5b      	ldrb	r3, [r3, #9]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d105      	bne.n	80010de <I2C_MasterReceiveData+0x11c>
		I2C_ManageAcking(pI2C_Handle->pI2Cx, I2C_ACK_ENABLE);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2101      	movs	r1, #1
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 f804 	bl	80010e6 <I2C_ManageAcking>
	}


}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <I2C_ManageAcking>:
	}

}


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	460b      	mov	r3, r1
 80010f0:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == I2C_ACK_ENABLE){
 80010f2:	78fb      	ldrb	r3, [r7, #3]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d106      	bne.n	8001106 <I2C_ManageAcking+0x20>
		// Enable ACKing
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	601a      	str	r2, [r3, #0]
	}else{
		// Disable ACKing
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 8001104:	e005      	b.n	8001112 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	601a      	str	r2, [r3, #0]
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <I2C_GetFlagStatus>:

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName){
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName){
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	695a      	ldr	r2, [r3, #20]
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	4013      	ands	r3, r2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <I2C_GetFlagStatus+0x1a>
		return FLAG_SET;
 8001132:	2301      	movs	r3, #1
 8001134:	e000      	b.n	8001138 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr

08001142 <RCC_GetPLLOutputClock>:
#include "stm32f446xx_rcc_driver.h"



// Not implemented, just a placeholder
uint32_t RCC_GetPLLOutputClock(void){
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
	uint32_t temp = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	607b      	str	r3, [r7, #4]
	return temp;
 800114c:	687b      	ldr	r3, [r7, #4]
}
 800114e:	4618      	mov	r0, r3
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <RCC_GetPCLK1Value>:

uint16_t AHB_PreScaler[8] = {2, 4, 8, 16, 64, 128, 512};
uint16_t APB1_PreScaler[4] = {2, 4, 8, 16};
uint16_t APB2_PreScaler[4] = {2, 4, 8, 16};

uint32_t RCC_GetPCLK1Value(void){
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, ahbp, apb1p;
	clksrc = (RCC->CFGR >> 2) & 0x3;
 800115e:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <RCC_GetPCLK1Value+0xa0>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	089b      	lsrs	r3, r3, #2
 8001164:	b2db      	uxtb	r3, r3
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0){
 800116c:	7a7b      	ldrb	r3, [r7, #9]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d102      	bne.n	8001178 <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 8001172:	4b22      	ldr	r3, [pc, #136]	; (80011fc <RCC_GetPCLK1Value+0xa4>)
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	e00b      	b.n	8001190 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1){
 8001178:	7a7b      	ldrb	r3, [r7, #9]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d102      	bne.n	8001184 <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 800117e:	4b20      	ldr	r3, [pc, #128]	; (8001200 <RCC_GetPCLK1Value+0xa8>)
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	e005      	b.n	8001190 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 2){
 8001184:	7a7b      	ldrb	r3, [r7, #9]
 8001186:	2b02      	cmp	r3, #2
 8001188:	d102      	bne.n	8001190 <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 800118a:	f7ff ffda 	bl	8001142 <RCC_GetPLLOutputClock>
 800118e:	60f8      	str	r0, [r7, #12]
	}

	// AHB Pre-scaler
	temp = (RCC->CFGR >> 4) & 0xF;
 8001190:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <RCC_GetPCLK1Value+0xa0>)
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	091b      	lsrs	r3, r3, #4
 8001196:	b2db      	uxtb	r3, r3
 8001198:	f003 030f 	and.w	r3, r3, #15
 800119c:	723b      	strb	r3, [r7, #8]
	if(temp < 8){
 800119e:	7a3b      	ldrb	r3, [r7, #8]
 80011a0:	2b07      	cmp	r3, #7
 80011a2:	d802      	bhi.n	80011aa <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 80011a4:	2301      	movs	r3, #1
 80011a6:	72fb      	strb	r3, [r7, #11]
 80011a8:	e005      	b.n	80011b6 <RCC_GetPCLK1Value+0x5e>
	}else{
		ahbp = AHB_PreScaler[temp-8];
 80011aa:	7a3b      	ldrb	r3, [r7, #8]
 80011ac:	3b08      	subs	r3, #8
 80011ae:	4a15      	ldr	r2, [pc, #84]	; (8001204 <RCC_GetPCLK1Value+0xac>)
 80011b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011b4:	72fb      	strb	r3, [r7, #11]
	}

	// APB1 Pre-scaler
	temp = (RCC->CFGR >> 10) & 0x7;
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <RCC_GetPCLK1Value+0xa0>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	0a9b      	lsrs	r3, r3, #10
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	723b      	strb	r3, [r7, #8]
	if(temp < 8){
 80011c4:	7a3b      	ldrb	r3, [r7, #8]
 80011c6:	2b07      	cmp	r3, #7
 80011c8:	d802      	bhi.n	80011d0 <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 80011ca:	2301      	movs	r3, #1
 80011cc:	72bb      	strb	r3, [r7, #10]
 80011ce:	e005      	b.n	80011dc <RCC_GetPCLK1Value+0x84>
	}else{
		apb1p = APB1_PreScaler[temp-4];
 80011d0:	7a3b      	ldrb	r3, [r7, #8]
 80011d2:	3b04      	subs	r3, #4
 80011d4:	4a0c      	ldr	r2, [pc, #48]	; (8001208 <RCC_GetPCLK1Value+0xb0>)
 80011d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011da:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1p;
 80011dc:	7afb      	ldrb	r3, [r7, #11]
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80011e4:	7abb      	ldrb	r3, [r7, #10]
 80011e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ea:	607b      	str	r3, [r7, #4]

	return pclk1;
 80011ec:	687b      	ldr	r3, [r7, #4]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800
 80011fc:	00f42400 	.word	0x00f42400
 8001200:	007a1200 	.word	0x007a1200
 8001204:	20000000 	.word	0x20000000
 8001208:	20000010 	.word	0x20000010

0800120c <init_systick_timer>:
extern void initialise_monitor_handles();

#define SYSTICK_TIM_CLK		16000000UL

void init_systick_timer(uint32_t tick_hz)
{
 800120c:	b480      	push	{r7}
 800120e:	b087      	sub	sp, #28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <init_systick_timer+0x5c>)
 8001216:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <init_systick_timer+0x60>)
 800121a:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 800121c:	4a14      	ldr	r2, [pc, #80]	; (8001270 <init_systick_timer+0x64>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	fbb2 f3f3 	udiv	r3, r2, r3
 8001224:	3b01      	subs	r3, #1
 8001226:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	431a      	orrs	r2, r3
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f043 0202 	orr.w	r2, r3, #2
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f043 0204 	orr.w	r2, r3, #4
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f043 0201 	orr.w	r2, r3, #1
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	601a      	str	r2, [r3, #0]

}
 800125e:	bf00      	nop
 8001260:	371c      	adds	r7, #28
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	e000e014 	.word	0xe000e014
 800126c:	e000e010 	.word	0xe000e010
 8001270:	00f42400 	.word	0x00f42400

08001274 <main>:


RTC_time_t current_time;
RTC_date_t current_date;

int main(void){
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0

	initialise_monitor_handles();
 8001278:	f001 fb2e 	bl	80028d8 <initialise_monitor_handles>


	printf("RTC test\n");
 800127c:	481a      	ldr	r0, [pc, #104]	; (80012e8 <main+0x74>)
 800127e:	f000 fa8b 	bl	8001798 <puts>

	if(ds1307_init()){
 8001282:	f7ff f81d 	bl	80002c0 <ds1307_init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d003      	beq.n	8001294 <main+0x20>
		printf("RTC Init Failed\n");
 800128c:	4817      	ldr	r0, [pc, #92]	; (80012ec <main+0x78>)
 800128e:	f000 fa83 	bl	8001798 <puts>
		while(1);
 8001292:	e7fe      	b.n	8001292 <main+0x1e>
	}

	init_systick_timer(1);
 8001294:	2001      	movs	r0, #1
 8001296:	f7ff ffb9 	bl	800120c <init_systick_timer>

	// Configure Date
	current_date.day = MONDAY;
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <main+0x7c>)
 800129c:	2202      	movs	r2, #2
 800129e:	70da      	strb	r2, [r3, #3]
	current_date.date = 4;
 80012a0:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <main+0x7c>)
 80012a2:	2204      	movs	r2, #4
 80012a4:	701a      	strb	r2, [r3, #0]
	current_date.month = 3;
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <main+0x7c>)
 80012a8:	2203      	movs	r2, #3
 80012aa:	705a      	strb	r2, [r3, #1]
	current_date.year = 24;
 80012ac:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <main+0x7c>)
 80012ae:	2218      	movs	r2, #24
 80012b0:	709a      	strb	r2, [r3, #2]

	// Configure Time
	current_time.seconds = 50;
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <main+0x80>)
 80012b4:	2232      	movs	r2, #50	; 0x32
 80012b6:	705a      	strb	r2, [r3, #1]
	current_time.minutes = 59;
 80012b8:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <main+0x80>)
 80012ba:	223b      	movs	r2, #59	; 0x3b
 80012bc:	709a      	strb	r2, [r3, #2]
	current_time.hours = 11;
 80012be:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <main+0x80>)
 80012c0:	220b      	movs	r2, #11
 80012c2:	701a      	strb	r2, [r3, #0]
	current_time.time_format = TIME_FORMAT_12HRS_PM;
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <main+0x80>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	70da      	strb	r2, [r3, #3]

	ds1307_set_current_date(&current_date);
 80012ca:	4809      	ldr	r0, [pc, #36]	; (80012f0 <main+0x7c>)
 80012cc:	f7ff f8a8 	bl	8000420 <ds1307_set_current_date>
	ds1307_set_current_time(&current_time);
 80012d0:	4808      	ldr	r0, [pc, #32]	; (80012f4 <main+0x80>)
 80012d2:	f7ff f813 	bl	80002fc <ds1307_set_current_time>

	ds1307_get_current_date(&current_date);
 80012d6:	4806      	ldr	r0, [pc, #24]	; (80012f0 <main+0x7c>)
 80012d8:	f7ff f8d2 	bl	8000480 <ds1307_get_current_date>
	ds1307_get_current_time(&current_time);
 80012dc:	4805      	ldr	r0, [pc, #20]	; (80012f4 <main+0x80>)
 80012de:	f7ff f856 	bl	800038e <ds1307_get_current_time>

	printf_rtc();
 80012e2:	f000 f809 	bl	80012f8 <printf_rtc>


	while(1);
 80012e6:	e7fe      	b.n	80012e6 <main+0x72>
 80012e8:	080029f4 	.word	0x080029f4
 80012ec:	08002a00 	.word	0x08002a00
 80012f0:	200000c8 	.word	0x200000c8
 80012f4:	200000c4 	.word	0x200000c4

080012f8 <printf_rtc>:

	return 0;
}


void printf_rtc(void){
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS){
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <printf_rtc+0x68>)
 8001300:	78db      	ldrb	r3, [r3, #3]
 8001302:	2b02      	cmp	r3, #2
 8001304:	d011      	beq.n	800132a <printf_rtc+0x32>
		am_pm = (current_time.time_format) ? "PM" : "AM";
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <printf_rtc+0x68>)
 8001308:	78db      	ldrb	r3, [r3, #3]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <printf_rtc+0x1a>
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <printf_rtc+0x6c>)
 8001310:	e000      	b.n	8001314 <printf_rtc+0x1c>
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <printf_rtc+0x70>)
 8001314:	607b      	str	r3, [r7, #4]
		printf("Current Time: %s %s\n", time_to_string(&current_time), am_pm); // 08:08:41 PM
 8001316:	4812      	ldr	r0, [pc, #72]	; (8001360 <printf_rtc+0x68>)
 8001318:	f000 f888 	bl	800142c <time_to_string>
 800131c:	4603      	mov	r3, r0
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	4619      	mov	r1, r3
 8001322:	4812      	ldr	r0, [pc, #72]	; (800136c <printf_rtc+0x74>)
 8001324:	f000 f9d2 	bl	80016cc <iprintf>
 8001328:	e007      	b.n	800133a <printf_rtc+0x42>
	}else{
		// 24 Hours Format
		printf("Current Time: %s\n", time_to_string(&current_time)); // 20:08:41
 800132a:	480d      	ldr	r0, [pc, #52]	; (8001360 <printf_rtc+0x68>)
 800132c:	f000 f87e 	bl	800142c <time_to_string>
 8001330:	4603      	mov	r3, r0
 8001332:	4619      	mov	r1, r3
 8001334:	480e      	ldr	r0, [pc, #56]	; (8001370 <printf_rtc+0x78>)
 8001336:	f000 f9c9 	bl	80016cc <iprintf>
	}

	printf("Current Date: %s <%s>\n", date_to_string(&current_date), get_day_of_week(current_date.day));
 800133a:	480e      	ldr	r0, [pc, #56]	; (8001374 <printf_rtc+0x7c>)
 800133c:	f000 f8a0 	bl	8001480 <date_to_string>
 8001340:	4604      	mov	r4, r0
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <printf_rtc+0x7c>)
 8001344:	78db      	ldrb	r3, [r3, #3]
 8001346:	4618      	mov	r0, r3
 8001348:	f000 f818 	bl	800137c <get_day_of_week>
 800134c:	4603      	mov	r3, r0
 800134e:	461a      	mov	r2, r3
 8001350:	4621      	mov	r1, r4
 8001352:	4809      	ldr	r0, [pc, #36]	; (8001378 <printf_rtc+0x80>)
 8001354:	f000 f9ba 	bl	80016cc <iprintf>

}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	bd90      	pop	{r4, r7, pc}
 8001360:	200000c4 	.word	0x200000c4
 8001364:	08002a10 	.word	0x08002a10
 8001368:	08002a14 	.word	0x08002a14
 800136c:	08002a18 	.word	0x08002a18
 8001370:	08002a30 	.word	0x08002a30
 8001374:	200000c8 	.word	0x200000c8
 8001378:	08002a44 	.word	0x08002a44

0800137c <get_day_of_week>:

char* get_day_of_week(uint8_t day){
 800137c:	b4b0      	push	{r4, r5, r7}
 800137e:	b08b      	sub	sp, #44	; 0x2c
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
	char *days_list[] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <get_day_of_week+0x38>)
 8001388:	f107 040c 	add.w	r4, r7, #12
 800138c:	461d      	mov	r5, r3
 800138e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001390:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001392:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001396:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return days_list[day-1];
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	3b01      	subs	r3, #1
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	3328      	adds	r3, #40	; 0x28
 80013a2:	443b      	add	r3, r7
 80013a4:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	372c      	adds	r7, #44	; 0x2c
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bcb0      	pop	{r4, r5, r7}
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	08002aa0 	.word	0x08002aa0

080013b8 <number_to_string>:


void number_to_string(uint8_t num, char* buf){
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	6039      	str	r1, [r7, #0]
 80013c2:	71fb      	strb	r3, [r7, #7]

	if(num < 10){
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	2b09      	cmp	r3, #9
 80013c8:	d809      	bhi.n	80013de <number_to_string+0x26>
		buf[0] = '0';
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	2230      	movs	r2, #48	; 0x30
 80013ce:	701a      	strb	r2, [r3, #0]
		buf[1] = num + 48;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	3301      	adds	r3, #1
 80013d4:	79fa      	ldrb	r2, [r7, #7]
 80013d6:	3230      	adds	r2, #48	; 0x30
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	701a      	strb	r2, [r3, #0]
	}else if(num >= 10 && num < 99){
		buf[0] = (num /10) + 48;
		buf[1] = (num % 10) + 48;
	}
}
 80013dc:	e01f      	b.n	800141e <number_to_string+0x66>
	}else if(num >= 10 && num < 99){
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	2b09      	cmp	r3, #9
 80013e2:	d91c      	bls.n	800141e <number_to_string+0x66>
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	2b62      	cmp	r3, #98	; 0x62
 80013e8:	d819      	bhi.n	800141e <number_to_string+0x66>
		buf[0] = (num /10) + 48;
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	4a0e      	ldr	r2, [pc, #56]	; (8001428 <number_to_string+0x70>)
 80013ee:	fba2 2303 	umull	r2, r3, r2, r3
 80013f2:	08db      	lsrs	r3, r3, #3
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	3330      	adds	r3, #48	; 0x30
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	701a      	strb	r2, [r3, #0]
		buf[1] = (num % 10) + 48;
 80013fe:	79fa      	ldrb	r2, [r7, #7]
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <number_to_string+0x70>)
 8001402:	fba3 1302 	umull	r1, r3, r3, r2
 8001406:	08d9      	lsrs	r1, r3, #3
 8001408:	460b      	mov	r3, r1
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	440b      	add	r3, r1
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	b2da      	uxtb	r2, r3
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	3301      	adds	r3, #1
 8001418:	3230      	adds	r2, #48	; 0x30
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	701a      	strb	r2, [r3, #0]
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	cccccccd 	.word	0xcccccccd

0800142c <time_to_string>:


// hh:mm:ss'\0'
char* time_to_string(RTC_time_t *rtc_time){
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	static char buf[9];
	buf[2] = ':';
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <time_to_string+0x48>)
 8001436:	223a      	movs	r2, #58	; 0x3a
 8001438:	709a      	strb	r2, [r3, #2]
	buf[5] = ':';
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <time_to_string+0x48>)
 800143c:	223a      	movs	r2, #58	; 0x3a
 800143e:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_time->hours, buf);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	490b      	ldr	r1, [pc, #44]	; (8001474 <time_to_string+0x48>)
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff ffb6 	bl	80013b8 <number_to_string>
	number_to_string(rtc_time->minutes, &buf[3]);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	789b      	ldrb	r3, [r3, #2]
 8001450:	4909      	ldr	r1, [pc, #36]	; (8001478 <time_to_string+0x4c>)
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff ffb0 	bl	80013b8 <number_to_string>
	number_to_string(rtc_time->seconds, &buf[6]);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	785b      	ldrb	r3, [r3, #1]
 800145c:	4907      	ldr	r1, [pc, #28]	; (800147c <time_to_string+0x50>)
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff ffaa 	bl	80013b8 <number_to_string>

	buf[8] = '\0';
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <time_to_string+0x48>)
 8001466:	2200      	movs	r2, #0
 8001468:	721a      	strb	r2, [r3, #8]

	return buf;
 800146a:	4b02      	ldr	r3, [pc, #8]	; (8001474 <time_to_string+0x48>)

}
 800146c:	4618      	mov	r0, r3
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	200000cc 	.word	0x200000cc
 8001478:	200000cf 	.word	0x200000cf
 800147c:	200000d2 	.word	0x200000d2

08001480 <date_to_string>:

// dd/mm/yy'\0'
char* date_to_string(RTC_date_t *rtc_date){
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2] = '/';
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <date_to_string+0x48>)
 800148a:	222f      	movs	r2, #47	; 0x2f
 800148c:	709a      	strb	r2, [r3, #2]
	buf[5] = '/';
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <date_to_string+0x48>)
 8001490:	222f      	movs	r2, #47	; 0x2f
 8001492:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_date->month, buf);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	785b      	ldrb	r3, [r3, #1]
 8001498:	490b      	ldr	r1, [pc, #44]	; (80014c8 <date_to_string+0x48>)
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ff8c 	bl	80013b8 <number_to_string>
	number_to_string(rtc_date->date, &buf[3]);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4909      	ldr	r1, [pc, #36]	; (80014cc <date_to_string+0x4c>)
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff ff86 	bl	80013b8 <number_to_string>
	number_to_string(rtc_date->year, &buf[6]);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	789b      	ldrb	r3, [r3, #2]
 80014b0:	4907      	ldr	r1, [pc, #28]	; (80014d0 <date_to_string+0x50>)
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff80 	bl	80013b8 <number_to_string>

	buf[8] = '\0';
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <date_to_string+0x48>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	721a      	strb	r2, [r3, #8]

	return buf;
 80014be:	4b02      	ldr	r3, [pc, #8]	; (80014c8 <date_to_string+0x48>)
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	200000d8 	.word	0x200000d8
 80014cc:	200000db 	.word	0x200000db
 80014d0:	200000de 	.word	0x200000de

080014d4 <SysTick_Handler>:



void SysTick_Handler(void){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
	ds1307_get_current_date(&current_date);
 80014d8:	4804      	ldr	r0, [pc, #16]	; (80014ec <SysTick_Handler+0x18>)
 80014da:	f7fe ffd1 	bl	8000480 <ds1307_get_current_date>
	ds1307_get_current_time(&current_time);
 80014de:	4804      	ldr	r0, [pc, #16]	; (80014f0 <SysTick_Handler+0x1c>)
 80014e0:	f7fe ff55 	bl	800038e <ds1307_get_current_time>
	printf_rtc();
 80014e4:	f7ff ff08 	bl	80012f8 <printf_rtc>
}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200000c8 	.word	0x200000c8
 80014f0:	200000c4 	.word	0x200000c4

080014f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014f4:	480d      	ldr	r0, [pc, #52]	; (800152c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80014f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014fc:	480c      	ldr	r0, [pc, #48]	; (8001530 <LoopForever+0x6>)
  ldr r1, =_edata
 80014fe:	490d      	ldr	r1, [pc, #52]	; (8001534 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001500:	4a0d      	ldr	r2, [pc, #52]	; (8001538 <LoopForever+0xe>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001504:	e002      	b.n	800150c <LoopCopyDataInit>

08001506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800150a:	3304      	adds	r3, #4

0800150c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800150c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001510:	d3f9      	bcc.n	8001506 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001514:	4c0a      	ldr	r4, [pc, #40]	; (8001540 <LoopForever+0x16>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001518:	e001      	b.n	800151e <LoopFillZerobss>

0800151a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800151a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800151c:	3204      	adds	r2, #4

0800151e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001520:	d3fb      	bcc.n	800151a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001522:	f000 fa67 	bl	80019f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001526:	f7ff fea5 	bl	8001274 <main>

0800152a <LoopForever>:

LoopForever:
  b LoopForever
 800152a:	e7fe      	b.n	800152a <LoopForever>
  ldr   r0, =_estack
 800152c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001534:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001538:	08002b14 	.word	0x08002b14
  ldr r2, =_sbss
 800153c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001540:	200002e0 	.word	0x200002e0

08001544 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001544:	e7fe      	b.n	8001544 <ADC_IRQHandler>
	...

08001548 <std>:
 8001548:	2300      	movs	r3, #0
 800154a:	b510      	push	{r4, lr}
 800154c:	4604      	mov	r4, r0
 800154e:	e9c0 3300 	strd	r3, r3, [r0]
 8001552:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001556:	6083      	str	r3, [r0, #8]
 8001558:	8181      	strh	r1, [r0, #12]
 800155a:	6643      	str	r3, [r0, #100]	; 0x64
 800155c:	81c2      	strh	r2, [r0, #14]
 800155e:	6183      	str	r3, [r0, #24]
 8001560:	4619      	mov	r1, r3
 8001562:	2208      	movs	r2, #8
 8001564:	305c      	adds	r0, #92	; 0x5c
 8001566:	f000 f9f7 	bl	8001958 <memset>
 800156a:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <std+0x58>)
 800156c:	6263      	str	r3, [r4, #36]	; 0x24
 800156e:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <std+0x5c>)
 8001570:	62a3      	str	r3, [r4, #40]	; 0x28
 8001572:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <std+0x60>)
 8001574:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001576:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <std+0x64>)
 8001578:	6323      	str	r3, [r4, #48]	; 0x30
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <std+0x68>)
 800157c:	6224      	str	r4, [r4, #32]
 800157e:	429c      	cmp	r4, r3
 8001580:	d006      	beq.n	8001590 <std+0x48>
 8001582:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001586:	4294      	cmp	r4, r2
 8001588:	d002      	beq.n	8001590 <std+0x48>
 800158a:	33d0      	adds	r3, #208	; 0xd0
 800158c:	429c      	cmp	r4, r3
 800158e:	d105      	bne.n	800159c <std+0x54>
 8001590:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001598:	f000 ba50 	b.w	8001a3c <__retarget_lock_init_recursive>
 800159c:	bd10      	pop	{r4, pc}
 800159e:	bf00      	nop
 80015a0:	080017a9 	.word	0x080017a9
 80015a4:	080017cb 	.word	0x080017cb
 80015a8:	08001803 	.word	0x08001803
 80015ac:	08001827 	.word	0x08001827
 80015b0:	200000e4 	.word	0x200000e4

080015b4 <stdio_exit_handler>:
 80015b4:	4a02      	ldr	r2, [pc, #8]	; (80015c0 <stdio_exit_handler+0xc>)
 80015b6:	4903      	ldr	r1, [pc, #12]	; (80015c4 <stdio_exit_handler+0x10>)
 80015b8:	4803      	ldr	r0, [pc, #12]	; (80015c8 <stdio_exit_handler+0x14>)
 80015ba:	f000 b869 	b.w	8001690 <_fwalk_sglue>
 80015be:	bf00      	nop
 80015c0:	20000018 	.word	0x20000018
 80015c4:	080022d9 	.word	0x080022d9
 80015c8:	20000024 	.word	0x20000024

080015cc <cleanup_stdio>:
 80015cc:	6841      	ldr	r1, [r0, #4]
 80015ce:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <cleanup_stdio+0x34>)
 80015d0:	4299      	cmp	r1, r3
 80015d2:	b510      	push	{r4, lr}
 80015d4:	4604      	mov	r4, r0
 80015d6:	d001      	beq.n	80015dc <cleanup_stdio+0x10>
 80015d8:	f000 fe7e 	bl	80022d8 <_fflush_r>
 80015dc:	68a1      	ldr	r1, [r4, #8]
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <cleanup_stdio+0x38>)
 80015e0:	4299      	cmp	r1, r3
 80015e2:	d002      	beq.n	80015ea <cleanup_stdio+0x1e>
 80015e4:	4620      	mov	r0, r4
 80015e6:	f000 fe77 	bl	80022d8 <_fflush_r>
 80015ea:	68e1      	ldr	r1, [r4, #12]
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <cleanup_stdio+0x3c>)
 80015ee:	4299      	cmp	r1, r3
 80015f0:	d004      	beq.n	80015fc <cleanup_stdio+0x30>
 80015f2:	4620      	mov	r0, r4
 80015f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015f8:	f000 be6e 	b.w	80022d8 <_fflush_r>
 80015fc:	bd10      	pop	{r4, pc}
 80015fe:	bf00      	nop
 8001600:	200000e4 	.word	0x200000e4
 8001604:	2000014c 	.word	0x2000014c
 8001608:	200001b4 	.word	0x200001b4

0800160c <global_stdio_init.part.0>:
 800160c:	b510      	push	{r4, lr}
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <global_stdio_init.part.0+0x30>)
 8001610:	4c0b      	ldr	r4, [pc, #44]	; (8001640 <global_stdio_init.part.0+0x34>)
 8001612:	4a0c      	ldr	r2, [pc, #48]	; (8001644 <global_stdio_init.part.0+0x38>)
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	4620      	mov	r0, r4
 8001618:	2200      	movs	r2, #0
 800161a:	2104      	movs	r1, #4
 800161c:	f7ff ff94 	bl	8001548 <std>
 8001620:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001624:	2201      	movs	r2, #1
 8001626:	2109      	movs	r1, #9
 8001628:	f7ff ff8e 	bl	8001548 <std>
 800162c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001630:	2202      	movs	r2, #2
 8001632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001636:	2112      	movs	r1, #18
 8001638:	f7ff bf86 	b.w	8001548 <std>
 800163c:	2000021c 	.word	0x2000021c
 8001640:	200000e4 	.word	0x200000e4
 8001644:	080015b5 	.word	0x080015b5

08001648 <__sfp_lock_acquire>:
 8001648:	4801      	ldr	r0, [pc, #4]	; (8001650 <__sfp_lock_acquire+0x8>)
 800164a:	f000 b9f8 	b.w	8001a3e <__retarget_lock_acquire_recursive>
 800164e:	bf00      	nop
 8001650:	20000225 	.word	0x20000225

08001654 <__sfp_lock_release>:
 8001654:	4801      	ldr	r0, [pc, #4]	; (800165c <__sfp_lock_release+0x8>)
 8001656:	f000 b9f3 	b.w	8001a40 <__retarget_lock_release_recursive>
 800165a:	bf00      	nop
 800165c:	20000225 	.word	0x20000225

08001660 <__sinit>:
 8001660:	b510      	push	{r4, lr}
 8001662:	4604      	mov	r4, r0
 8001664:	f7ff fff0 	bl	8001648 <__sfp_lock_acquire>
 8001668:	6a23      	ldr	r3, [r4, #32]
 800166a:	b11b      	cbz	r3, 8001674 <__sinit+0x14>
 800166c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001670:	f7ff bff0 	b.w	8001654 <__sfp_lock_release>
 8001674:	4b04      	ldr	r3, [pc, #16]	; (8001688 <__sinit+0x28>)
 8001676:	6223      	str	r3, [r4, #32]
 8001678:	4b04      	ldr	r3, [pc, #16]	; (800168c <__sinit+0x2c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1f5      	bne.n	800166c <__sinit+0xc>
 8001680:	f7ff ffc4 	bl	800160c <global_stdio_init.part.0>
 8001684:	e7f2      	b.n	800166c <__sinit+0xc>
 8001686:	bf00      	nop
 8001688:	080015cd 	.word	0x080015cd
 800168c:	2000021c 	.word	0x2000021c

08001690 <_fwalk_sglue>:
 8001690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001694:	4607      	mov	r7, r0
 8001696:	4688      	mov	r8, r1
 8001698:	4614      	mov	r4, r2
 800169a:	2600      	movs	r6, #0
 800169c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80016a0:	f1b9 0901 	subs.w	r9, r9, #1
 80016a4:	d505      	bpl.n	80016b2 <_fwalk_sglue+0x22>
 80016a6:	6824      	ldr	r4, [r4, #0]
 80016a8:	2c00      	cmp	r4, #0
 80016aa:	d1f7      	bne.n	800169c <_fwalk_sglue+0xc>
 80016ac:	4630      	mov	r0, r6
 80016ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016b2:	89ab      	ldrh	r3, [r5, #12]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d907      	bls.n	80016c8 <_fwalk_sglue+0x38>
 80016b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80016bc:	3301      	adds	r3, #1
 80016be:	d003      	beq.n	80016c8 <_fwalk_sglue+0x38>
 80016c0:	4629      	mov	r1, r5
 80016c2:	4638      	mov	r0, r7
 80016c4:	47c0      	blx	r8
 80016c6:	4306      	orrs	r6, r0
 80016c8:	3568      	adds	r5, #104	; 0x68
 80016ca:	e7e9      	b.n	80016a0 <_fwalk_sglue+0x10>

080016cc <iprintf>:
 80016cc:	b40f      	push	{r0, r1, r2, r3}
 80016ce:	b507      	push	{r0, r1, r2, lr}
 80016d0:	4906      	ldr	r1, [pc, #24]	; (80016ec <iprintf+0x20>)
 80016d2:	ab04      	add	r3, sp, #16
 80016d4:	6808      	ldr	r0, [r1, #0]
 80016d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80016da:	6881      	ldr	r1, [r0, #8]
 80016dc:	9301      	str	r3, [sp, #4]
 80016de:	f000 facf 	bl	8001c80 <_vfiprintf_r>
 80016e2:	b003      	add	sp, #12
 80016e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80016e8:	b004      	add	sp, #16
 80016ea:	4770      	bx	lr
 80016ec:	20000070 	.word	0x20000070

080016f0 <_puts_r>:
 80016f0:	6a03      	ldr	r3, [r0, #32]
 80016f2:	b570      	push	{r4, r5, r6, lr}
 80016f4:	6884      	ldr	r4, [r0, #8]
 80016f6:	4605      	mov	r5, r0
 80016f8:	460e      	mov	r6, r1
 80016fa:	b90b      	cbnz	r3, 8001700 <_puts_r+0x10>
 80016fc:	f7ff ffb0 	bl	8001660 <__sinit>
 8001700:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001702:	07db      	lsls	r3, r3, #31
 8001704:	d405      	bmi.n	8001712 <_puts_r+0x22>
 8001706:	89a3      	ldrh	r3, [r4, #12]
 8001708:	0598      	lsls	r0, r3, #22
 800170a:	d402      	bmi.n	8001712 <_puts_r+0x22>
 800170c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800170e:	f000 f996 	bl	8001a3e <__retarget_lock_acquire_recursive>
 8001712:	89a3      	ldrh	r3, [r4, #12]
 8001714:	0719      	lsls	r1, r3, #28
 8001716:	d513      	bpl.n	8001740 <_puts_r+0x50>
 8001718:	6923      	ldr	r3, [r4, #16]
 800171a:	b18b      	cbz	r3, 8001740 <_puts_r+0x50>
 800171c:	3e01      	subs	r6, #1
 800171e:	68a3      	ldr	r3, [r4, #8]
 8001720:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001724:	3b01      	subs	r3, #1
 8001726:	60a3      	str	r3, [r4, #8]
 8001728:	b9e9      	cbnz	r1, 8001766 <_puts_r+0x76>
 800172a:	2b00      	cmp	r3, #0
 800172c:	da2e      	bge.n	800178c <_puts_r+0x9c>
 800172e:	4622      	mov	r2, r4
 8001730:	210a      	movs	r1, #10
 8001732:	4628      	mov	r0, r5
 8001734:	f000 f87b 	bl	800182e <__swbuf_r>
 8001738:	3001      	adds	r0, #1
 800173a:	d007      	beq.n	800174c <_puts_r+0x5c>
 800173c:	250a      	movs	r5, #10
 800173e:	e007      	b.n	8001750 <_puts_r+0x60>
 8001740:	4621      	mov	r1, r4
 8001742:	4628      	mov	r0, r5
 8001744:	f000 f8b0 	bl	80018a8 <__swsetup_r>
 8001748:	2800      	cmp	r0, #0
 800174a:	d0e7      	beq.n	800171c <_puts_r+0x2c>
 800174c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001750:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001752:	07da      	lsls	r2, r3, #31
 8001754:	d405      	bmi.n	8001762 <_puts_r+0x72>
 8001756:	89a3      	ldrh	r3, [r4, #12]
 8001758:	059b      	lsls	r3, r3, #22
 800175a:	d402      	bmi.n	8001762 <_puts_r+0x72>
 800175c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800175e:	f000 f96f 	bl	8001a40 <__retarget_lock_release_recursive>
 8001762:	4628      	mov	r0, r5
 8001764:	bd70      	pop	{r4, r5, r6, pc}
 8001766:	2b00      	cmp	r3, #0
 8001768:	da04      	bge.n	8001774 <_puts_r+0x84>
 800176a:	69a2      	ldr	r2, [r4, #24]
 800176c:	429a      	cmp	r2, r3
 800176e:	dc06      	bgt.n	800177e <_puts_r+0x8e>
 8001770:	290a      	cmp	r1, #10
 8001772:	d004      	beq.n	800177e <_puts_r+0x8e>
 8001774:	6823      	ldr	r3, [r4, #0]
 8001776:	1c5a      	adds	r2, r3, #1
 8001778:	6022      	str	r2, [r4, #0]
 800177a:	7019      	strb	r1, [r3, #0]
 800177c:	e7cf      	b.n	800171e <_puts_r+0x2e>
 800177e:	4622      	mov	r2, r4
 8001780:	4628      	mov	r0, r5
 8001782:	f000 f854 	bl	800182e <__swbuf_r>
 8001786:	3001      	adds	r0, #1
 8001788:	d1c9      	bne.n	800171e <_puts_r+0x2e>
 800178a:	e7df      	b.n	800174c <_puts_r+0x5c>
 800178c:	6823      	ldr	r3, [r4, #0]
 800178e:	250a      	movs	r5, #10
 8001790:	1c5a      	adds	r2, r3, #1
 8001792:	6022      	str	r2, [r4, #0]
 8001794:	701d      	strb	r5, [r3, #0]
 8001796:	e7db      	b.n	8001750 <_puts_r+0x60>

08001798 <puts>:
 8001798:	4b02      	ldr	r3, [pc, #8]	; (80017a4 <puts+0xc>)
 800179a:	4601      	mov	r1, r0
 800179c:	6818      	ldr	r0, [r3, #0]
 800179e:	f7ff bfa7 	b.w	80016f0 <_puts_r>
 80017a2:	bf00      	nop
 80017a4:	20000070 	.word	0x20000070

080017a8 <__sread>:
 80017a8:	b510      	push	{r4, lr}
 80017aa:	460c      	mov	r4, r1
 80017ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017b0:	f000 f8fc 	bl	80019ac <_read_r>
 80017b4:	2800      	cmp	r0, #0
 80017b6:	bfab      	itete	ge
 80017b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80017ba:	89a3      	ldrhlt	r3, [r4, #12]
 80017bc:	181b      	addge	r3, r3, r0
 80017be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80017c2:	bfac      	ite	ge
 80017c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80017c6:	81a3      	strhlt	r3, [r4, #12]
 80017c8:	bd10      	pop	{r4, pc}

080017ca <__swrite>:
 80017ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017ce:	461f      	mov	r7, r3
 80017d0:	898b      	ldrh	r3, [r1, #12]
 80017d2:	05db      	lsls	r3, r3, #23
 80017d4:	4605      	mov	r5, r0
 80017d6:	460c      	mov	r4, r1
 80017d8:	4616      	mov	r6, r2
 80017da:	d505      	bpl.n	80017e8 <__swrite+0x1e>
 80017dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017e0:	2302      	movs	r3, #2
 80017e2:	2200      	movs	r2, #0
 80017e4:	f000 f8d0 	bl	8001988 <_lseek_r>
 80017e8:	89a3      	ldrh	r3, [r4, #12]
 80017ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80017ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017f2:	81a3      	strh	r3, [r4, #12]
 80017f4:	4632      	mov	r2, r6
 80017f6:	463b      	mov	r3, r7
 80017f8:	4628      	mov	r0, r5
 80017fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80017fe:	f000 b8e7 	b.w	80019d0 <_write_r>

08001802 <__sseek>:
 8001802:	b510      	push	{r4, lr}
 8001804:	460c      	mov	r4, r1
 8001806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800180a:	f000 f8bd 	bl	8001988 <_lseek_r>
 800180e:	1c43      	adds	r3, r0, #1
 8001810:	89a3      	ldrh	r3, [r4, #12]
 8001812:	bf15      	itete	ne
 8001814:	6560      	strne	r0, [r4, #84]	; 0x54
 8001816:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800181a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800181e:	81a3      	strheq	r3, [r4, #12]
 8001820:	bf18      	it	ne
 8001822:	81a3      	strhne	r3, [r4, #12]
 8001824:	bd10      	pop	{r4, pc}

08001826 <__sclose>:
 8001826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800182a:	f000 b89d 	b.w	8001968 <_close_r>

0800182e <__swbuf_r>:
 800182e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001830:	460e      	mov	r6, r1
 8001832:	4614      	mov	r4, r2
 8001834:	4605      	mov	r5, r0
 8001836:	b118      	cbz	r0, 8001840 <__swbuf_r+0x12>
 8001838:	6a03      	ldr	r3, [r0, #32]
 800183a:	b90b      	cbnz	r3, 8001840 <__swbuf_r+0x12>
 800183c:	f7ff ff10 	bl	8001660 <__sinit>
 8001840:	69a3      	ldr	r3, [r4, #24]
 8001842:	60a3      	str	r3, [r4, #8]
 8001844:	89a3      	ldrh	r3, [r4, #12]
 8001846:	071a      	lsls	r2, r3, #28
 8001848:	d525      	bpl.n	8001896 <__swbuf_r+0x68>
 800184a:	6923      	ldr	r3, [r4, #16]
 800184c:	b31b      	cbz	r3, 8001896 <__swbuf_r+0x68>
 800184e:	6823      	ldr	r3, [r4, #0]
 8001850:	6922      	ldr	r2, [r4, #16]
 8001852:	1a98      	subs	r0, r3, r2
 8001854:	6963      	ldr	r3, [r4, #20]
 8001856:	b2f6      	uxtb	r6, r6
 8001858:	4283      	cmp	r3, r0
 800185a:	4637      	mov	r7, r6
 800185c:	dc04      	bgt.n	8001868 <__swbuf_r+0x3a>
 800185e:	4621      	mov	r1, r4
 8001860:	4628      	mov	r0, r5
 8001862:	f000 fd39 	bl	80022d8 <_fflush_r>
 8001866:	b9e0      	cbnz	r0, 80018a2 <__swbuf_r+0x74>
 8001868:	68a3      	ldr	r3, [r4, #8]
 800186a:	3b01      	subs	r3, #1
 800186c:	60a3      	str	r3, [r4, #8]
 800186e:	6823      	ldr	r3, [r4, #0]
 8001870:	1c5a      	adds	r2, r3, #1
 8001872:	6022      	str	r2, [r4, #0]
 8001874:	701e      	strb	r6, [r3, #0]
 8001876:	6962      	ldr	r2, [r4, #20]
 8001878:	1c43      	adds	r3, r0, #1
 800187a:	429a      	cmp	r2, r3
 800187c:	d004      	beq.n	8001888 <__swbuf_r+0x5a>
 800187e:	89a3      	ldrh	r3, [r4, #12]
 8001880:	07db      	lsls	r3, r3, #31
 8001882:	d506      	bpl.n	8001892 <__swbuf_r+0x64>
 8001884:	2e0a      	cmp	r6, #10
 8001886:	d104      	bne.n	8001892 <__swbuf_r+0x64>
 8001888:	4621      	mov	r1, r4
 800188a:	4628      	mov	r0, r5
 800188c:	f000 fd24 	bl	80022d8 <_fflush_r>
 8001890:	b938      	cbnz	r0, 80018a2 <__swbuf_r+0x74>
 8001892:	4638      	mov	r0, r7
 8001894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001896:	4621      	mov	r1, r4
 8001898:	4628      	mov	r0, r5
 800189a:	f000 f805 	bl	80018a8 <__swsetup_r>
 800189e:	2800      	cmp	r0, #0
 80018a0:	d0d5      	beq.n	800184e <__swbuf_r+0x20>
 80018a2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80018a6:	e7f4      	b.n	8001892 <__swbuf_r+0x64>

080018a8 <__swsetup_r>:
 80018a8:	b538      	push	{r3, r4, r5, lr}
 80018aa:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <__swsetup_r+0xac>)
 80018ac:	4605      	mov	r5, r0
 80018ae:	6818      	ldr	r0, [r3, #0]
 80018b0:	460c      	mov	r4, r1
 80018b2:	b118      	cbz	r0, 80018bc <__swsetup_r+0x14>
 80018b4:	6a03      	ldr	r3, [r0, #32]
 80018b6:	b90b      	cbnz	r3, 80018bc <__swsetup_r+0x14>
 80018b8:	f7ff fed2 	bl	8001660 <__sinit>
 80018bc:	89a3      	ldrh	r3, [r4, #12]
 80018be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80018c2:	0718      	lsls	r0, r3, #28
 80018c4:	d422      	bmi.n	800190c <__swsetup_r+0x64>
 80018c6:	06d9      	lsls	r1, r3, #27
 80018c8:	d407      	bmi.n	80018da <__swsetup_r+0x32>
 80018ca:	2309      	movs	r3, #9
 80018cc:	602b      	str	r3, [r5, #0]
 80018ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80018d2:	81a3      	strh	r3, [r4, #12]
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018d8:	e034      	b.n	8001944 <__swsetup_r+0x9c>
 80018da:	0758      	lsls	r0, r3, #29
 80018dc:	d512      	bpl.n	8001904 <__swsetup_r+0x5c>
 80018de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80018e0:	b141      	cbz	r1, 80018f4 <__swsetup_r+0x4c>
 80018e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80018e6:	4299      	cmp	r1, r3
 80018e8:	d002      	beq.n	80018f0 <__swsetup_r+0x48>
 80018ea:	4628      	mov	r0, r5
 80018ec:	f000 f8aa 	bl	8001a44 <_free_r>
 80018f0:	2300      	movs	r3, #0
 80018f2:	6363      	str	r3, [r4, #52]	; 0x34
 80018f4:	89a3      	ldrh	r3, [r4, #12]
 80018f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80018fa:	81a3      	strh	r3, [r4, #12]
 80018fc:	2300      	movs	r3, #0
 80018fe:	6063      	str	r3, [r4, #4]
 8001900:	6923      	ldr	r3, [r4, #16]
 8001902:	6023      	str	r3, [r4, #0]
 8001904:	89a3      	ldrh	r3, [r4, #12]
 8001906:	f043 0308 	orr.w	r3, r3, #8
 800190a:	81a3      	strh	r3, [r4, #12]
 800190c:	6923      	ldr	r3, [r4, #16]
 800190e:	b94b      	cbnz	r3, 8001924 <__swsetup_r+0x7c>
 8001910:	89a3      	ldrh	r3, [r4, #12]
 8001912:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001916:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800191a:	d003      	beq.n	8001924 <__swsetup_r+0x7c>
 800191c:	4621      	mov	r1, r4
 800191e:	4628      	mov	r0, r5
 8001920:	f000 fd28 	bl	8002374 <__smakebuf_r>
 8001924:	89a0      	ldrh	r0, [r4, #12]
 8001926:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800192a:	f010 0301 	ands.w	r3, r0, #1
 800192e:	d00a      	beq.n	8001946 <__swsetup_r+0x9e>
 8001930:	2300      	movs	r3, #0
 8001932:	60a3      	str	r3, [r4, #8]
 8001934:	6963      	ldr	r3, [r4, #20]
 8001936:	425b      	negs	r3, r3
 8001938:	61a3      	str	r3, [r4, #24]
 800193a:	6923      	ldr	r3, [r4, #16]
 800193c:	b943      	cbnz	r3, 8001950 <__swsetup_r+0xa8>
 800193e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001942:	d1c4      	bne.n	80018ce <__swsetup_r+0x26>
 8001944:	bd38      	pop	{r3, r4, r5, pc}
 8001946:	0781      	lsls	r1, r0, #30
 8001948:	bf58      	it	pl
 800194a:	6963      	ldrpl	r3, [r4, #20]
 800194c:	60a3      	str	r3, [r4, #8]
 800194e:	e7f4      	b.n	800193a <__swsetup_r+0x92>
 8001950:	2000      	movs	r0, #0
 8001952:	e7f7      	b.n	8001944 <__swsetup_r+0x9c>
 8001954:	20000070 	.word	0x20000070

08001958 <memset>:
 8001958:	4402      	add	r2, r0
 800195a:	4603      	mov	r3, r0
 800195c:	4293      	cmp	r3, r2
 800195e:	d100      	bne.n	8001962 <memset+0xa>
 8001960:	4770      	bx	lr
 8001962:	f803 1b01 	strb.w	r1, [r3], #1
 8001966:	e7f9      	b.n	800195c <memset+0x4>

08001968 <_close_r>:
 8001968:	b538      	push	{r3, r4, r5, lr}
 800196a:	4d06      	ldr	r5, [pc, #24]	; (8001984 <_close_r+0x1c>)
 800196c:	2300      	movs	r3, #0
 800196e:	4604      	mov	r4, r0
 8001970:	4608      	mov	r0, r1
 8001972:	602b      	str	r3, [r5, #0]
 8001974:	f000 fe3e 	bl	80025f4 <_close>
 8001978:	1c43      	adds	r3, r0, #1
 800197a:	d102      	bne.n	8001982 <_close_r+0x1a>
 800197c:	682b      	ldr	r3, [r5, #0]
 800197e:	b103      	cbz	r3, 8001982 <_close_r+0x1a>
 8001980:	6023      	str	r3, [r4, #0]
 8001982:	bd38      	pop	{r3, r4, r5, pc}
 8001984:	20000220 	.word	0x20000220

08001988 <_lseek_r>:
 8001988:	b538      	push	{r3, r4, r5, lr}
 800198a:	4d07      	ldr	r5, [pc, #28]	; (80019a8 <_lseek_r+0x20>)
 800198c:	4604      	mov	r4, r0
 800198e:	4608      	mov	r0, r1
 8001990:	4611      	mov	r1, r2
 8001992:	2200      	movs	r2, #0
 8001994:	602a      	str	r2, [r5, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	f000 fded 	bl	8002576 <_lseek>
 800199c:	1c43      	adds	r3, r0, #1
 800199e:	d102      	bne.n	80019a6 <_lseek_r+0x1e>
 80019a0:	682b      	ldr	r3, [r5, #0]
 80019a2:	b103      	cbz	r3, 80019a6 <_lseek_r+0x1e>
 80019a4:	6023      	str	r3, [r4, #0]
 80019a6:	bd38      	pop	{r3, r4, r5, pc}
 80019a8:	20000220 	.word	0x20000220

080019ac <_read_r>:
 80019ac:	b538      	push	{r3, r4, r5, lr}
 80019ae:	4d07      	ldr	r5, [pc, #28]	; (80019cc <_read_r+0x20>)
 80019b0:	4604      	mov	r4, r0
 80019b2:	4608      	mov	r0, r1
 80019b4:	4611      	mov	r1, r2
 80019b6:	2200      	movs	r2, #0
 80019b8:	602a      	str	r2, [r5, #0]
 80019ba:	461a      	mov	r2, r3
 80019bc:	f000 fd85 	bl	80024ca <_read>
 80019c0:	1c43      	adds	r3, r0, #1
 80019c2:	d102      	bne.n	80019ca <_read_r+0x1e>
 80019c4:	682b      	ldr	r3, [r5, #0]
 80019c6:	b103      	cbz	r3, 80019ca <_read_r+0x1e>
 80019c8:	6023      	str	r3, [r4, #0]
 80019ca:	bd38      	pop	{r3, r4, r5, pc}
 80019cc:	20000220 	.word	0x20000220

080019d0 <_write_r>:
 80019d0:	b538      	push	{r3, r4, r5, lr}
 80019d2:	4d07      	ldr	r5, [pc, #28]	; (80019f0 <_write_r+0x20>)
 80019d4:	4604      	mov	r4, r0
 80019d6:	4608      	mov	r0, r1
 80019d8:	4611      	mov	r1, r2
 80019da:	2200      	movs	r2, #0
 80019dc:	602a      	str	r2, [r5, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	f000 fddb 	bl	800259a <_write>
 80019e4:	1c43      	adds	r3, r0, #1
 80019e6:	d102      	bne.n	80019ee <_write_r+0x1e>
 80019e8:	682b      	ldr	r3, [r5, #0]
 80019ea:	b103      	cbz	r3, 80019ee <_write_r+0x1e>
 80019ec:	6023      	str	r3, [r4, #0]
 80019ee:	bd38      	pop	{r3, r4, r5, pc}
 80019f0:	20000220 	.word	0x20000220

080019f4 <__libc_init_array>:
 80019f4:	b570      	push	{r4, r5, r6, lr}
 80019f6:	4d0d      	ldr	r5, [pc, #52]	; (8001a2c <__libc_init_array+0x38>)
 80019f8:	4c0d      	ldr	r4, [pc, #52]	; (8001a30 <__libc_init_array+0x3c>)
 80019fa:	1b64      	subs	r4, r4, r5
 80019fc:	10a4      	asrs	r4, r4, #2
 80019fe:	2600      	movs	r6, #0
 8001a00:	42a6      	cmp	r6, r4
 8001a02:	d109      	bne.n	8001a18 <__libc_init_array+0x24>
 8001a04:	4d0b      	ldr	r5, [pc, #44]	; (8001a34 <__libc_init_array+0x40>)
 8001a06:	4c0c      	ldr	r4, [pc, #48]	; (8001a38 <__libc_init_array+0x44>)
 8001a08:	f000 ffe8 	bl	80029dc <_init>
 8001a0c:	1b64      	subs	r4, r4, r5
 8001a0e:	10a4      	asrs	r4, r4, #2
 8001a10:	2600      	movs	r6, #0
 8001a12:	42a6      	cmp	r6, r4
 8001a14:	d105      	bne.n	8001a22 <__libc_init_array+0x2e>
 8001a16:	bd70      	pop	{r4, r5, r6, pc}
 8001a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a1c:	4798      	blx	r3
 8001a1e:	3601      	adds	r6, #1
 8001a20:	e7ee      	b.n	8001a00 <__libc_init_array+0xc>
 8001a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a26:	4798      	blx	r3
 8001a28:	3601      	adds	r6, #1
 8001a2a:	e7f2      	b.n	8001a12 <__libc_init_array+0x1e>
 8001a2c:	08002b0c 	.word	0x08002b0c
 8001a30:	08002b0c 	.word	0x08002b0c
 8001a34:	08002b0c 	.word	0x08002b0c
 8001a38:	08002b10 	.word	0x08002b10

08001a3c <__retarget_lock_init_recursive>:
 8001a3c:	4770      	bx	lr

08001a3e <__retarget_lock_acquire_recursive>:
 8001a3e:	4770      	bx	lr

08001a40 <__retarget_lock_release_recursive>:
 8001a40:	4770      	bx	lr
	...

08001a44 <_free_r>:
 8001a44:	b538      	push	{r3, r4, r5, lr}
 8001a46:	4605      	mov	r5, r0
 8001a48:	2900      	cmp	r1, #0
 8001a4a:	d041      	beq.n	8001ad0 <_free_r+0x8c>
 8001a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a50:	1f0c      	subs	r4, r1, #4
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	bfb8      	it	lt
 8001a56:	18e4      	addlt	r4, r4, r3
 8001a58:	f000 f8de 	bl	8001c18 <__malloc_lock>
 8001a5c:	4a1d      	ldr	r2, [pc, #116]	; (8001ad4 <_free_r+0x90>)
 8001a5e:	6813      	ldr	r3, [r2, #0]
 8001a60:	b933      	cbnz	r3, 8001a70 <_free_r+0x2c>
 8001a62:	6063      	str	r3, [r4, #4]
 8001a64:	6014      	str	r4, [r2, #0]
 8001a66:	4628      	mov	r0, r5
 8001a68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a6c:	f000 b8da 	b.w	8001c24 <__malloc_unlock>
 8001a70:	42a3      	cmp	r3, r4
 8001a72:	d908      	bls.n	8001a86 <_free_r+0x42>
 8001a74:	6820      	ldr	r0, [r4, #0]
 8001a76:	1821      	adds	r1, r4, r0
 8001a78:	428b      	cmp	r3, r1
 8001a7a:	bf01      	itttt	eq
 8001a7c:	6819      	ldreq	r1, [r3, #0]
 8001a7e:	685b      	ldreq	r3, [r3, #4]
 8001a80:	1809      	addeq	r1, r1, r0
 8001a82:	6021      	streq	r1, [r4, #0]
 8001a84:	e7ed      	b.n	8001a62 <_free_r+0x1e>
 8001a86:	461a      	mov	r2, r3
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	b10b      	cbz	r3, 8001a90 <_free_r+0x4c>
 8001a8c:	42a3      	cmp	r3, r4
 8001a8e:	d9fa      	bls.n	8001a86 <_free_r+0x42>
 8001a90:	6811      	ldr	r1, [r2, #0]
 8001a92:	1850      	adds	r0, r2, r1
 8001a94:	42a0      	cmp	r0, r4
 8001a96:	d10b      	bne.n	8001ab0 <_free_r+0x6c>
 8001a98:	6820      	ldr	r0, [r4, #0]
 8001a9a:	4401      	add	r1, r0
 8001a9c:	1850      	adds	r0, r2, r1
 8001a9e:	4283      	cmp	r3, r0
 8001aa0:	6011      	str	r1, [r2, #0]
 8001aa2:	d1e0      	bne.n	8001a66 <_free_r+0x22>
 8001aa4:	6818      	ldr	r0, [r3, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	6053      	str	r3, [r2, #4]
 8001aaa:	4408      	add	r0, r1
 8001aac:	6010      	str	r0, [r2, #0]
 8001aae:	e7da      	b.n	8001a66 <_free_r+0x22>
 8001ab0:	d902      	bls.n	8001ab8 <_free_r+0x74>
 8001ab2:	230c      	movs	r3, #12
 8001ab4:	602b      	str	r3, [r5, #0]
 8001ab6:	e7d6      	b.n	8001a66 <_free_r+0x22>
 8001ab8:	6820      	ldr	r0, [r4, #0]
 8001aba:	1821      	adds	r1, r4, r0
 8001abc:	428b      	cmp	r3, r1
 8001abe:	bf04      	itt	eq
 8001ac0:	6819      	ldreq	r1, [r3, #0]
 8001ac2:	685b      	ldreq	r3, [r3, #4]
 8001ac4:	6063      	str	r3, [r4, #4]
 8001ac6:	bf04      	itt	eq
 8001ac8:	1809      	addeq	r1, r1, r0
 8001aca:	6021      	streq	r1, [r4, #0]
 8001acc:	6054      	str	r4, [r2, #4]
 8001ace:	e7ca      	b.n	8001a66 <_free_r+0x22>
 8001ad0:	bd38      	pop	{r3, r4, r5, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000228 	.word	0x20000228

08001ad8 <sbrk_aligned>:
 8001ad8:	b570      	push	{r4, r5, r6, lr}
 8001ada:	4e0e      	ldr	r6, [pc, #56]	; (8001b14 <sbrk_aligned+0x3c>)
 8001adc:	460c      	mov	r4, r1
 8001ade:	6831      	ldr	r1, [r6, #0]
 8001ae0:	4605      	mov	r5, r0
 8001ae2:	b911      	cbnz	r1, 8001aea <sbrk_aligned+0x12>
 8001ae4:	f000 fca4 	bl	8002430 <_sbrk_r>
 8001ae8:	6030      	str	r0, [r6, #0]
 8001aea:	4621      	mov	r1, r4
 8001aec:	4628      	mov	r0, r5
 8001aee:	f000 fc9f 	bl	8002430 <_sbrk_r>
 8001af2:	1c43      	adds	r3, r0, #1
 8001af4:	d00a      	beq.n	8001b0c <sbrk_aligned+0x34>
 8001af6:	1cc4      	adds	r4, r0, #3
 8001af8:	f024 0403 	bic.w	r4, r4, #3
 8001afc:	42a0      	cmp	r0, r4
 8001afe:	d007      	beq.n	8001b10 <sbrk_aligned+0x38>
 8001b00:	1a21      	subs	r1, r4, r0
 8001b02:	4628      	mov	r0, r5
 8001b04:	f000 fc94 	bl	8002430 <_sbrk_r>
 8001b08:	3001      	adds	r0, #1
 8001b0a:	d101      	bne.n	8001b10 <sbrk_aligned+0x38>
 8001b0c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001b10:	4620      	mov	r0, r4
 8001b12:	bd70      	pop	{r4, r5, r6, pc}
 8001b14:	2000022c 	.word	0x2000022c

08001b18 <_malloc_r>:
 8001b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b1c:	1ccd      	adds	r5, r1, #3
 8001b1e:	f025 0503 	bic.w	r5, r5, #3
 8001b22:	3508      	adds	r5, #8
 8001b24:	2d0c      	cmp	r5, #12
 8001b26:	bf38      	it	cc
 8001b28:	250c      	movcc	r5, #12
 8001b2a:	2d00      	cmp	r5, #0
 8001b2c:	4607      	mov	r7, r0
 8001b2e:	db01      	blt.n	8001b34 <_malloc_r+0x1c>
 8001b30:	42a9      	cmp	r1, r5
 8001b32:	d905      	bls.n	8001b40 <_malloc_r+0x28>
 8001b34:	230c      	movs	r3, #12
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	2600      	movs	r6, #0
 8001b3a:	4630      	mov	r0, r6
 8001b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b40:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001c14 <_malloc_r+0xfc>
 8001b44:	f000 f868 	bl	8001c18 <__malloc_lock>
 8001b48:	f8d8 3000 	ldr.w	r3, [r8]
 8001b4c:	461c      	mov	r4, r3
 8001b4e:	bb5c      	cbnz	r4, 8001ba8 <_malloc_r+0x90>
 8001b50:	4629      	mov	r1, r5
 8001b52:	4638      	mov	r0, r7
 8001b54:	f7ff ffc0 	bl	8001ad8 <sbrk_aligned>
 8001b58:	1c43      	adds	r3, r0, #1
 8001b5a:	4604      	mov	r4, r0
 8001b5c:	d155      	bne.n	8001c0a <_malloc_r+0xf2>
 8001b5e:	f8d8 4000 	ldr.w	r4, [r8]
 8001b62:	4626      	mov	r6, r4
 8001b64:	2e00      	cmp	r6, #0
 8001b66:	d145      	bne.n	8001bf4 <_malloc_r+0xdc>
 8001b68:	2c00      	cmp	r4, #0
 8001b6a:	d048      	beq.n	8001bfe <_malloc_r+0xe6>
 8001b6c:	6823      	ldr	r3, [r4, #0]
 8001b6e:	4631      	mov	r1, r6
 8001b70:	4638      	mov	r0, r7
 8001b72:	eb04 0903 	add.w	r9, r4, r3
 8001b76:	f000 fc5b 	bl	8002430 <_sbrk_r>
 8001b7a:	4581      	cmp	r9, r0
 8001b7c:	d13f      	bne.n	8001bfe <_malloc_r+0xe6>
 8001b7e:	6821      	ldr	r1, [r4, #0]
 8001b80:	1a6d      	subs	r5, r5, r1
 8001b82:	4629      	mov	r1, r5
 8001b84:	4638      	mov	r0, r7
 8001b86:	f7ff ffa7 	bl	8001ad8 <sbrk_aligned>
 8001b8a:	3001      	adds	r0, #1
 8001b8c:	d037      	beq.n	8001bfe <_malloc_r+0xe6>
 8001b8e:	6823      	ldr	r3, [r4, #0]
 8001b90:	442b      	add	r3, r5
 8001b92:	6023      	str	r3, [r4, #0]
 8001b94:	f8d8 3000 	ldr.w	r3, [r8]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d038      	beq.n	8001c0e <_malloc_r+0xf6>
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	42a2      	cmp	r2, r4
 8001ba0:	d12b      	bne.n	8001bfa <_malloc_r+0xe2>
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	e00f      	b.n	8001bc8 <_malloc_r+0xb0>
 8001ba8:	6822      	ldr	r2, [r4, #0]
 8001baa:	1b52      	subs	r2, r2, r5
 8001bac:	d41f      	bmi.n	8001bee <_malloc_r+0xd6>
 8001bae:	2a0b      	cmp	r2, #11
 8001bb0:	d917      	bls.n	8001be2 <_malloc_r+0xca>
 8001bb2:	1961      	adds	r1, r4, r5
 8001bb4:	42a3      	cmp	r3, r4
 8001bb6:	6025      	str	r5, [r4, #0]
 8001bb8:	bf18      	it	ne
 8001bba:	6059      	strne	r1, [r3, #4]
 8001bbc:	6863      	ldr	r3, [r4, #4]
 8001bbe:	bf08      	it	eq
 8001bc0:	f8c8 1000 	streq.w	r1, [r8]
 8001bc4:	5162      	str	r2, [r4, r5]
 8001bc6:	604b      	str	r3, [r1, #4]
 8001bc8:	4638      	mov	r0, r7
 8001bca:	f104 060b 	add.w	r6, r4, #11
 8001bce:	f000 f829 	bl	8001c24 <__malloc_unlock>
 8001bd2:	f026 0607 	bic.w	r6, r6, #7
 8001bd6:	1d23      	adds	r3, r4, #4
 8001bd8:	1af2      	subs	r2, r6, r3
 8001bda:	d0ae      	beq.n	8001b3a <_malloc_r+0x22>
 8001bdc:	1b9b      	subs	r3, r3, r6
 8001bde:	50a3      	str	r3, [r4, r2]
 8001be0:	e7ab      	b.n	8001b3a <_malloc_r+0x22>
 8001be2:	42a3      	cmp	r3, r4
 8001be4:	6862      	ldr	r2, [r4, #4]
 8001be6:	d1dd      	bne.n	8001ba4 <_malloc_r+0x8c>
 8001be8:	f8c8 2000 	str.w	r2, [r8]
 8001bec:	e7ec      	b.n	8001bc8 <_malloc_r+0xb0>
 8001bee:	4623      	mov	r3, r4
 8001bf0:	6864      	ldr	r4, [r4, #4]
 8001bf2:	e7ac      	b.n	8001b4e <_malloc_r+0x36>
 8001bf4:	4634      	mov	r4, r6
 8001bf6:	6876      	ldr	r6, [r6, #4]
 8001bf8:	e7b4      	b.n	8001b64 <_malloc_r+0x4c>
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	e7cc      	b.n	8001b98 <_malloc_r+0x80>
 8001bfe:	230c      	movs	r3, #12
 8001c00:	603b      	str	r3, [r7, #0]
 8001c02:	4638      	mov	r0, r7
 8001c04:	f000 f80e 	bl	8001c24 <__malloc_unlock>
 8001c08:	e797      	b.n	8001b3a <_malloc_r+0x22>
 8001c0a:	6025      	str	r5, [r4, #0]
 8001c0c:	e7dc      	b.n	8001bc8 <_malloc_r+0xb0>
 8001c0e:	605b      	str	r3, [r3, #4]
 8001c10:	deff      	udf	#255	; 0xff
 8001c12:	bf00      	nop
 8001c14:	20000228 	.word	0x20000228

08001c18 <__malloc_lock>:
 8001c18:	4801      	ldr	r0, [pc, #4]	; (8001c20 <__malloc_lock+0x8>)
 8001c1a:	f7ff bf10 	b.w	8001a3e <__retarget_lock_acquire_recursive>
 8001c1e:	bf00      	nop
 8001c20:	20000224 	.word	0x20000224

08001c24 <__malloc_unlock>:
 8001c24:	4801      	ldr	r0, [pc, #4]	; (8001c2c <__malloc_unlock+0x8>)
 8001c26:	f7ff bf0b 	b.w	8001a40 <__retarget_lock_release_recursive>
 8001c2a:	bf00      	nop
 8001c2c:	20000224 	.word	0x20000224

08001c30 <__sfputc_r>:
 8001c30:	6893      	ldr	r3, [r2, #8]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	b410      	push	{r4}
 8001c38:	6093      	str	r3, [r2, #8]
 8001c3a:	da07      	bge.n	8001c4c <__sfputc_r+0x1c>
 8001c3c:	6994      	ldr	r4, [r2, #24]
 8001c3e:	42a3      	cmp	r3, r4
 8001c40:	db01      	blt.n	8001c46 <__sfputc_r+0x16>
 8001c42:	290a      	cmp	r1, #10
 8001c44:	d102      	bne.n	8001c4c <__sfputc_r+0x1c>
 8001c46:	bc10      	pop	{r4}
 8001c48:	f7ff bdf1 	b.w	800182e <__swbuf_r>
 8001c4c:	6813      	ldr	r3, [r2, #0]
 8001c4e:	1c58      	adds	r0, r3, #1
 8001c50:	6010      	str	r0, [r2, #0]
 8001c52:	7019      	strb	r1, [r3, #0]
 8001c54:	4608      	mov	r0, r1
 8001c56:	bc10      	pop	{r4}
 8001c58:	4770      	bx	lr

08001c5a <__sfputs_r>:
 8001c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c5c:	4606      	mov	r6, r0
 8001c5e:	460f      	mov	r7, r1
 8001c60:	4614      	mov	r4, r2
 8001c62:	18d5      	adds	r5, r2, r3
 8001c64:	42ac      	cmp	r4, r5
 8001c66:	d101      	bne.n	8001c6c <__sfputs_r+0x12>
 8001c68:	2000      	movs	r0, #0
 8001c6a:	e007      	b.n	8001c7c <__sfputs_r+0x22>
 8001c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c70:	463a      	mov	r2, r7
 8001c72:	4630      	mov	r0, r6
 8001c74:	f7ff ffdc 	bl	8001c30 <__sfputc_r>
 8001c78:	1c43      	adds	r3, r0, #1
 8001c7a:	d1f3      	bne.n	8001c64 <__sfputs_r+0xa>
 8001c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001c80 <_vfiprintf_r>:
 8001c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c84:	460d      	mov	r5, r1
 8001c86:	b09d      	sub	sp, #116	; 0x74
 8001c88:	4614      	mov	r4, r2
 8001c8a:	4698      	mov	r8, r3
 8001c8c:	4606      	mov	r6, r0
 8001c8e:	b118      	cbz	r0, 8001c98 <_vfiprintf_r+0x18>
 8001c90:	6a03      	ldr	r3, [r0, #32]
 8001c92:	b90b      	cbnz	r3, 8001c98 <_vfiprintf_r+0x18>
 8001c94:	f7ff fce4 	bl	8001660 <__sinit>
 8001c98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001c9a:	07d9      	lsls	r1, r3, #31
 8001c9c:	d405      	bmi.n	8001caa <_vfiprintf_r+0x2a>
 8001c9e:	89ab      	ldrh	r3, [r5, #12]
 8001ca0:	059a      	lsls	r2, r3, #22
 8001ca2:	d402      	bmi.n	8001caa <_vfiprintf_r+0x2a>
 8001ca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001ca6:	f7ff feca 	bl	8001a3e <__retarget_lock_acquire_recursive>
 8001caa:	89ab      	ldrh	r3, [r5, #12]
 8001cac:	071b      	lsls	r3, r3, #28
 8001cae:	d501      	bpl.n	8001cb4 <_vfiprintf_r+0x34>
 8001cb0:	692b      	ldr	r3, [r5, #16]
 8001cb2:	b99b      	cbnz	r3, 8001cdc <_vfiprintf_r+0x5c>
 8001cb4:	4629      	mov	r1, r5
 8001cb6:	4630      	mov	r0, r6
 8001cb8:	f7ff fdf6 	bl	80018a8 <__swsetup_r>
 8001cbc:	b170      	cbz	r0, 8001cdc <_vfiprintf_r+0x5c>
 8001cbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001cc0:	07dc      	lsls	r4, r3, #31
 8001cc2:	d504      	bpl.n	8001cce <_vfiprintf_r+0x4e>
 8001cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cc8:	b01d      	add	sp, #116	; 0x74
 8001cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cce:	89ab      	ldrh	r3, [r5, #12]
 8001cd0:	0598      	lsls	r0, r3, #22
 8001cd2:	d4f7      	bmi.n	8001cc4 <_vfiprintf_r+0x44>
 8001cd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001cd6:	f7ff feb3 	bl	8001a40 <__retarget_lock_release_recursive>
 8001cda:	e7f3      	b.n	8001cc4 <_vfiprintf_r+0x44>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	9309      	str	r3, [sp, #36]	; 0x24
 8001ce0:	2320      	movs	r3, #32
 8001ce2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001ce6:	f8cd 800c 	str.w	r8, [sp, #12]
 8001cea:	2330      	movs	r3, #48	; 0x30
 8001cec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001ea0 <_vfiprintf_r+0x220>
 8001cf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001cf4:	f04f 0901 	mov.w	r9, #1
 8001cf8:	4623      	mov	r3, r4
 8001cfa:	469a      	mov	sl, r3
 8001cfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d00:	b10a      	cbz	r2, 8001d06 <_vfiprintf_r+0x86>
 8001d02:	2a25      	cmp	r2, #37	; 0x25
 8001d04:	d1f9      	bne.n	8001cfa <_vfiprintf_r+0x7a>
 8001d06:	ebba 0b04 	subs.w	fp, sl, r4
 8001d0a:	d00b      	beq.n	8001d24 <_vfiprintf_r+0xa4>
 8001d0c:	465b      	mov	r3, fp
 8001d0e:	4622      	mov	r2, r4
 8001d10:	4629      	mov	r1, r5
 8001d12:	4630      	mov	r0, r6
 8001d14:	f7ff ffa1 	bl	8001c5a <__sfputs_r>
 8001d18:	3001      	adds	r0, #1
 8001d1a:	f000 80a9 	beq.w	8001e70 <_vfiprintf_r+0x1f0>
 8001d1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001d20:	445a      	add	r2, fp
 8001d22:	9209      	str	r2, [sp, #36]	; 0x24
 8001d24:	f89a 3000 	ldrb.w	r3, [sl]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 80a1 	beq.w	8001e70 <_vfiprintf_r+0x1f0>
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d38:	f10a 0a01 	add.w	sl, sl, #1
 8001d3c:	9304      	str	r3, [sp, #16]
 8001d3e:	9307      	str	r3, [sp, #28]
 8001d40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001d44:	931a      	str	r3, [sp, #104]	; 0x68
 8001d46:	4654      	mov	r4, sl
 8001d48:	2205      	movs	r2, #5
 8001d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d4e:	4854      	ldr	r0, [pc, #336]	; (8001ea0 <_vfiprintf_r+0x220>)
 8001d50:	f7fe fa5e 	bl	8000210 <memchr>
 8001d54:	9a04      	ldr	r2, [sp, #16]
 8001d56:	b9d8      	cbnz	r0, 8001d90 <_vfiprintf_r+0x110>
 8001d58:	06d1      	lsls	r1, r2, #27
 8001d5a:	bf44      	itt	mi
 8001d5c:	2320      	movmi	r3, #32
 8001d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d62:	0713      	lsls	r3, r2, #28
 8001d64:	bf44      	itt	mi
 8001d66:	232b      	movmi	r3, #43	; 0x2b
 8001d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8001d70:	2b2a      	cmp	r3, #42	; 0x2a
 8001d72:	d015      	beq.n	8001da0 <_vfiprintf_r+0x120>
 8001d74:	9a07      	ldr	r2, [sp, #28]
 8001d76:	4654      	mov	r4, sl
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f04f 0c0a 	mov.w	ip, #10
 8001d7e:	4621      	mov	r1, r4
 8001d80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d84:	3b30      	subs	r3, #48	; 0x30
 8001d86:	2b09      	cmp	r3, #9
 8001d88:	d94d      	bls.n	8001e26 <_vfiprintf_r+0x1a6>
 8001d8a:	b1b0      	cbz	r0, 8001dba <_vfiprintf_r+0x13a>
 8001d8c:	9207      	str	r2, [sp, #28]
 8001d8e:	e014      	b.n	8001dba <_vfiprintf_r+0x13a>
 8001d90:	eba0 0308 	sub.w	r3, r0, r8
 8001d94:	fa09 f303 	lsl.w	r3, r9, r3
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	9304      	str	r3, [sp, #16]
 8001d9c:	46a2      	mov	sl, r4
 8001d9e:	e7d2      	b.n	8001d46 <_vfiprintf_r+0xc6>
 8001da0:	9b03      	ldr	r3, [sp, #12]
 8001da2:	1d19      	adds	r1, r3, #4
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	9103      	str	r1, [sp, #12]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	bfbb      	ittet	lt
 8001dac:	425b      	neglt	r3, r3
 8001dae:	f042 0202 	orrlt.w	r2, r2, #2
 8001db2:	9307      	strge	r3, [sp, #28]
 8001db4:	9307      	strlt	r3, [sp, #28]
 8001db6:	bfb8      	it	lt
 8001db8:	9204      	strlt	r2, [sp, #16]
 8001dba:	7823      	ldrb	r3, [r4, #0]
 8001dbc:	2b2e      	cmp	r3, #46	; 0x2e
 8001dbe:	d10c      	bne.n	8001dda <_vfiprintf_r+0x15a>
 8001dc0:	7863      	ldrb	r3, [r4, #1]
 8001dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8001dc4:	d134      	bne.n	8001e30 <_vfiprintf_r+0x1b0>
 8001dc6:	9b03      	ldr	r3, [sp, #12]
 8001dc8:	1d1a      	adds	r2, r3, #4
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	9203      	str	r2, [sp, #12]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	bfb8      	it	lt
 8001dd2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001dd6:	3402      	adds	r4, #2
 8001dd8:	9305      	str	r3, [sp, #20]
 8001dda:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001ea4 <_vfiprintf_r+0x224>
 8001dde:	7821      	ldrb	r1, [r4, #0]
 8001de0:	2203      	movs	r2, #3
 8001de2:	4650      	mov	r0, sl
 8001de4:	f7fe fa14 	bl	8000210 <memchr>
 8001de8:	b138      	cbz	r0, 8001dfa <_vfiprintf_r+0x17a>
 8001dea:	9b04      	ldr	r3, [sp, #16]
 8001dec:	eba0 000a 	sub.w	r0, r0, sl
 8001df0:	2240      	movs	r2, #64	; 0x40
 8001df2:	4082      	lsls	r2, r0
 8001df4:	4313      	orrs	r3, r2
 8001df6:	3401      	adds	r4, #1
 8001df8:	9304      	str	r3, [sp, #16]
 8001dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001dfe:	482a      	ldr	r0, [pc, #168]	; (8001ea8 <_vfiprintf_r+0x228>)
 8001e00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001e04:	2206      	movs	r2, #6
 8001e06:	f7fe fa03 	bl	8000210 <memchr>
 8001e0a:	2800      	cmp	r0, #0
 8001e0c:	d03f      	beq.n	8001e8e <_vfiprintf_r+0x20e>
 8001e0e:	4b27      	ldr	r3, [pc, #156]	; (8001eac <_vfiprintf_r+0x22c>)
 8001e10:	bb1b      	cbnz	r3, 8001e5a <_vfiprintf_r+0x1da>
 8001e12:	9b03      	ldr	r3, [sp, #12]
 8001e14:	3307      	adds	r3, #7
 8001e16:	f023 0307 	bic.w	r3, r3, #7
 8001e1a:	3308      	adds	r3, #8
 8001e1c:	9303      	str	r3, [sp, #12]
 8001e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e20:	443b      	add	r3, r7
 8001e22:	9309      	str	r3, [sp, #36]	; 0x24
 8001e24:	e768      	b.n	8001cf8 <_vfiprintf_r+0x78>
 8001e26:	fb0c 3202 	mla	r2, ip, r2, r3
 8001e2a:	460c      	mov	r4, r1
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	e7a6      	b.n	8001d7e <_vfiprintf_r+0xfe>
 8001e30:	2300      	movs	r3, #0
 8001e32:	3401      	adds	r4, #1
 8001e34:	9305      	str	r3, [sp, #20]
 8001e36:	4619      	mov	r1, r3
 8001e38:	f04f 0c0a 	mov.w	ip, #10
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e42:	3a30      	subs	r2, #48	; 0x30
 8001e44:	2a09      	cmp	r2, #9
 8001e46:	d903      	bls.n	8001e50 <_vfiprintf_r+0x1d0>
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0c6      	beq.n	8001dda <_vfiprintf_r+0x15a>
 8001e4c:	9105      	str	r1, [sp, #20]
 8001e4e:	e7c4      	b.n	8001dda <_vfiprintf_r+0x15a>
 8001e50:	fb0c 2101 	mla	r1, ip, r1, r2
 8001e54:	4604      	mov	r4, r0
 8001e56:	2301      	movs	r3, #1
 8001e58:	e7f0      	b.n	8001e3c <_vfiprintf_r+0x1bc>
 8001e5a:	ab03      	add	r3, sp, #12
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	462a      	mov	r2, r5
 8001e60:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <_vfiprintf_r+0x230>)
 8001e62:	a904      	add	r1, sp, #16
 8001e64:	4630      	mov	r0, r6
 8001e66:	f3af 8000 	nop.w
 8001e6a:	4607      	mov	r7, r0
 8001e6c:	1c78      	adds	r0, r7, #1
 8001e6e:	d1d6      	bne.n	8001e1e <_vfiprintf_r+0x19e>
 8001e70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001e72:	07d9      	lsls	r1, r3, #31
 8001e74:	d405      	bmi.n	8001e82 <_vfiprintf_r+0x202>
 8001e76:	89ab      	ldrh	r3, [r5, #12]
 8001e78:	059a      	lsls	r2, r3, #22
 8001e7a:	d402      	bmi.n	8001e82 <_vfiprintf_r+0x202>
 8001e7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001e7e:	f7ff fddf 	bl	8001a40 <__retarget_lock_release_recursive>
 8001e82:	89ab      	ldrh	r3, [r5, #12]
 8001e84:	065b      	lsls	r3, r3, #25
 8001e86:	f53f af1d 	bmi.w	8001cc4 <_vfiprintf_r+0x44>
 8001e8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e8c:	e71c      	b.n	8001cc8 <_vfiprintf_r+0x48>
 8001e8e:	ab03      	add	r3, sp, #12
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	462a      	mov	r2, r5
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <_vfiprintf_r+0x230>)
 8001e96:	a904      	add	r1, sp, #16
 8001e98:	4630      	mov	r0, r6
 8001e9a:	f000 f879 	bl	8001f90 <_printf_i>
 8001e9e:	e7e4      	b.n	8001e6a <_vfiprintf_r+0x1ea>
 8001ea0:	08002abc 	.word	0x08002abc
 8001ea4:	08002ac2 	.word	0x08002ac2
 8001ea8:	08002ac6 	.word	0x08002ac6
 8001eac:	00000000 	.word	0x00000000
 8001eb0:	08001c5b 	.word	0x08001c5b

08001eb4 <_printf_common>:
 8001eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001eb8:	4616      	mov	r6, r2
 8001eba:	4699      	mov	r9, r3
 8001ebc:	688a      	ldr	r2, [r1, #8]
 8001ebe:	690b      	ldr	r3, [r1, #16]
 8001ec0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	bfb8      	it	lt
 8001ec8:	4613      	movlt	r3, r2
 8001eca:	6033      	str	r3, [r6, #0]
 8001ecc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001ed0:	4607      	mov	r7, r0
 8001ed2:	460c      	mov	r4, r1
 8001ed4:	b10a      	cbz	r2, 8001eda <_printf_common+0x26>
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	6033      	str	r3, [r6, #0]
 8001eda:	6823      	ldr	r3, [r4, #0]
 8001edc:	0699      	lsls	r1, r3, #26
 8001ede:	bf42      	ittt	mi
 8001ee0:	6833      	ldrmi	r3, [r6, #0]
 8001ee2:	3302      	addmi	r3, #2
 8001ee4:	6033      	strmi	r3, [r6, #0]
 8001ee6:	6825      	ldr	r5, [r4, #0]
 8001ee8:	f015 0506 	ands.w	r5, r5, #6
 8001eec:	d106      	bne.n	8001efc <_printf_common+0x48>
 8001eee:	f104 0a19 	add.w	sl, r4, #25
 8001ef2:	68e3      	ldr	r3, [r4, #12]
 8001ef4:	6832      	ldr	r2, [r6, #0]
 8001ef6:	1a9b      	subs	r3, r3, r2
 8001ef8:	42ab      	cmp	r3, r5
 8001efa:	dc26      	bgt.n	8001f4a <_printf_common+0x96>
 8001efc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001f00:	1e13      	subs	r3, r2, #0
 8001f02:	6822      	ldr	r2, [r4, #0]
 8001f04:	bf18      	it	ne
 8001f06:	2301      	movne	r3, #1
 8001f08:	0692      	lsls	r2, r2, #26
 8001f0a:	d42b      	bmi.n	8001f64 <_printf_common+0xb0>
 8001f0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f10:	4649      	mov	r1, r9
 8001f12:	4638      	mov	r0, r7
 8001f14:	47c0      	blx	r8
 8001f16:	3001      	adds	r0, #1
 8001f18:	d01e      	beq.n	8001f58 <_printf_common+0xa4>
 8001f1a:	6823      	ldr	r3, [r4, #0]
 8001f1c:	6922      	ldr	r2, [r4, #16]
 8001f1e:	f003 0306 	and.w	r3, r3, #6
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	bf02      	ittt	eq
 8001f26:	68e5      	ldreq	r5, [r4, #12]
 8001f28:	6833      	ldreq	r3, [r6, #0]
 8001f2a:	1aed      	subeq	r5, r5, r3
 8001f2c:	68a3      	ldr	r3, [r4, #8]
 8001f2e:	bf0c      	ite	eq
 8001f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f34:	2500      	movne	r5, #0
 8001f36:	4293      	cmp	r3, r2
 8001f38:	bfc4      	itt	gt
 8001f3a:	1a9b      	subgt	r3, r3, r2
 8001f3c:	18ed      	addgt	r5, r5, r3
 8001f3e:	2600      	movs	r6, #0
 8001f40:	341a      	adds	r4, #26
 8001f42:	42b5      	cmp	r5, r6
 8001f44:	d11a      	bne.n	8001f7c <_printf_common+0xc8>
 8001f46:	2000      	movs	r0, #0
 8001f48:	e008      	b.n	8001f5c <_printf_common+0xa8>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	4652      	mov	r2, sl
 8001f4e:	4649      	mov	r1, r9
 8001f50:	4638      	mov	r0, r7
 8001f52:	47c0      	blx	r8
 8001f54:	3001      	adds	r0, #1
 8001f56:	d103      	bne.n	8001f60 <_printf_common+0xac>
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f60:	3501      	adds	r5, #1
 8001f62:	e7c6      	b.n	8001ef2 <_printf_common+0x3e>
 8001f64:	18e1      	adds	r1, r4, r3
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	2030      	movs	r0, #48	; 0x30
 8001f6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001f6e:	4422      	add	r2, r4
 8001f70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001f74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f78:	3302      	adds	r3, #2
 8001f7a:	e7c7      	b.n	8001f0c <_printf_common+0x58>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	4622      	mov	r2, r4
 8001f80:	4649      	mov	r1, r9
 8001f82:	4638      	mov	r0, r7
 8001f84:	47c0      	blx	r8
 8001f86:	3001      	adds	r0, #1
 8001f88:	d0e6      	beq.n	8001f58 <_printf_common+0xa4>
 8001f8a:	3601      	adds	r6, #1
 8001f8c:	e7d9      	b.n	8001f42 <_printf_common+0x8e>
	...

08001f90 <_printf_i>:
 8001f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f94:	7e0f      	ldrb	r7, [r1, #24]
 8001f96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001f98:	2f78      	cmp	r7, #120	; 0x78
 8001f9a:	4691      	mov	r9, r2
 8001f9c:	4680      	mov	r8, r0
 8001f9e:	460c      	mov	r4, r1
 8001fa0:	469a      	mov	sl, r3
 8001fa2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001fa6:	d807      	bhi.n	8001fb8 <_printf_i+0x28>
 8001fa8:	2f62      	cmp	r7, #98	; 0x62
 8001faa:	d80a      	bhi.n	8001fc2 <_printf_i+0x32>
 8001fac:	2f00      	cmp	r7, #0
 8001fae:	f000 80d4 	beq.w	800215a <_printf_i+0x1ca>
 8001fb2:	2f58      	cmp	r7, #88	; 0x58
 8001fb4:	f000 80c0 	beq.w	8002138 <_printf_i+0x1a8>
 8001fb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001fbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001fc0:	e03a      	b.n	8002038 <_printf_i+0xa8>
 8001fc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001fc6:	2b15      	cmp	r3, #21
 8001fc8:	d8f6      	bhi.n	8001fb8 <_printf_i+0x28>
 8001fca:	a101      	add	r1, pc, #4	; (adr r1, 8001fd0 <_printf_i+0x40>)
 8001fcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001fd0:	08002029 	.word	0x08002029
 8001fd4:	0800203d 	.word	0x0800203d
 8001fd8:	08001fb9 	.word	0x08001fb9
 8001fdc:	08001fb9 	.word	0x08001fb9
 8001fe0:	08001fb9 	.word	0x08001fb9
 8001fe4:	08001fb9 	.word	0x08001fb9
 8001fe8:	0800203d 	.word	0x0800203d
 8001fec:	08001fb9 	.word	0x08001fb9
 8001ff0:	08001fb9 	.word	0x08001fb9
 8001ff4:	08001fb9 	.word	0x08001fb9
 8001ff8:	08001fb9 	.word	0x08001fb9
 8001ffc:	08002141 	.word	0x08002141
 8002000:	08002069 	.word	0x08002069
 8002004:	080020fb 	.word	0x080020fb
 8002008:	08001fb9 	.word	0x08001fb9
 800200c:	08001fb9 	.word	0x08001fb9
 8002010:	08002163 	.word	0x08002163
 8002014:	08001fb9 	.word	0x08001fb9
 8002018:	08002069 	.word	0x08002069
 800201c:	08001fb9 	.word	0x08001fb9
 8002020:	08001fb9 	.word	0x08001fb9
 8002024:	08002103 	.word	0x08002103
 8002028:	682b      	ldr	r3, [r5, #0]
 800202a:	1d1a      	adds	r2, r3, #4
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	602a      	str	r2, [r5, #0]
 8002030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002034:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002038:	2301      	movs	r3, #1
 800203a:	e09f      	b.n	800217c <_printf_i+0x1ec>
 800203c:	6820      	ldr	r0, [r4, #0]
 800203e:	682b      	ldr	r3, [r5, #0]
 8002040:	0607      	lsls	r7, r0, #24
 8002042:	f103 0104 	add.w	r1, r3, #4
 8002046:	6029      	str	r1, [r5, #0]
 8002048:	d501      	bpl.n	800204e <_printf_i+0xbe>
 800204a:	681e      	ldr	r6, [r3, #0]
 800204c:	e003      	b.n	8002056 <_printf_i+0xc6>
 800204e:	0646      	lsls	r6, r0, #25
 8002050:	d5fb      	bpl.n	800204a <_printf_i+0xba>
 8002052:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002056:	2e00      	cmp	r6, #0
 8002058:	da03      	bge.n	8002062 <_printf_i+0xd2>
 800205a:	232d      	movs	r3, #45	; 0x2d
 800205c:	4276      	negs	r6, r6
 800205e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002062:	485a      	ldr	r0, [pc, #360]	; (80021cc <_printf_i+0x23c>)
 8002064:	230a      	movs	r3, #10
 8002066:	e012      	b.n	800208e <_printf_i+0xfe>
 8002068:	682b      	ldr	r3, [r5, #0]
 800206a:	6820      	ldr	r0, [r4, #0]
 800206c:	1d19      	adds	r1, r3, #4
 800206e:	6029      	str	r1, [r5, #0]
 8002070:	0605      	lsls	r5, r0, #24
 8002072:	d501      	bpl.n	8002078 <_printf_i+0xe8>
 8002074:	681e      	ldr	r6, [r3, #0]
 8002076:	e002      	b.n	800207e <_printf_i+0xee>
 8002078:	0641      	lsls	r1, r0, #25
 800207a:	d5fb      	bpl.n	8002074 <_printf_i+0xe4>
 800207c:	881e      	ldrh	r6, [r3, #0]
 800207e:	4853      	ldr	r0, [pc, #332]	; (80021cc <_printf_i+0x23c>)
 8002080:	2f6f      	cmp	r7, #111	; 0x6f
 8002082:	bf0c      	ite	eq
 8002084:	2308      	moveq	r3, #8
 8002086:	230a      	movne	r3, #10
 8002088:	2100      	movs	r1, #0
 800208a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800208e:	6865      	ldr	r5, [r4, #4]
 8002090:	60a5      	str	r5, [r4, #8]
 8002092:	2d00      	cmp	r5, #0
 8002094:	bfa2      	ittt	ge
 8002096:	6821      	ldrge	r1, [r4, #0]
 8002098:	f021 0104 	bicge.w	r1, r1, #4
 800209c:	6021      	strge	r1, [r4, #0]
 800209e:	b90e      	cbnz	r6, 80020a4 <_printf_i+0x114>
 80020a0:	2d00      	cmp	r5, #0
 80020a2:	d04b      	beq.n	800213c <_printf_i+0x1ac>
 80020a4:	4615      	mov	r5, r2
 80020a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80020aa:	fb03 6711 	mls	r7, r3, r1, r6
 80020ae:	5dc7      	ldrb	r7, [r0, r7]
 80020b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80020b4:	4637      	mov	r7, r6
 80020b6:	42bb      	cmp	r3, r7
 80020b8:	460e      	mov	r6, r1
 80020ba:	d9f4      	bls.n	80020a6 <_printf_i+0x116>
 80020bc:	2b08      	cmp	r3, #8
 80020be:	d10b      	bne.n	80020d8 <_printf_i+0x148>
 80020c0:	6823      	ldr	r3, [r4, #0]
 80020c2:	07de      	lsls	r6, r3, #31
 80020c4:	d508      	bpl.n	80020d8 <_printf_i+0x148>
 80020c6:	6923      	ldr	r3, [r4, #16]
 80020c8:	6861      	ldr	r1, [r4, #4]
 80020ca:	4299      	cmp	r1, r3
 80020cc:	bfde      	ittt	le
 80020ce:	2330      	movle	r3, #48	; 0x30
 80020d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80020d4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80020d8:	1b52      	subs	r2, r2, r5
 80020da:	6122      	str	r2, [r4, #16]
 80020dc:	f8cd a000 	str.w	sl, [sp]
 80020e0:	464b      	mov	r3, r9
 80020e2:	aa03      	add	r2, sp, #12
 80020e4:	4621      	mov	r1, r4
 80020e6:	4640      	mov	r0, r8
 80020e8:	f7ff fee4 	bl	8001eb4 <_printf_common>
 80020ec:	3001      	adds	r0, #1
 80020ee:	d14a      	bne.n	8002186 <_printf_i+0x1f6>
 80020f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020f4:	b004      	add	sp, #16
 80020f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020fa:	6823      	ldr	r3, [r4, #0]
 80020fc:	f043 0320 	orr.w	r3, r3, #32
 8002100:	6023      	str	r3, [r4, #0]
 8002102:	4833      	ldr	r0, [pc, #204]	; (80021d0 <_printf_i+0x240>)
 8002104:	2778      	movs	r7, #120	; 0x78
 8002106:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800210a:	6823      	ldr	r3, [r4, #0]
 800210c:	6829      	ldr	r1, [r5, #0]
 800210e:	061f      	lsls	r7, r3, #24
 8002110:	f851 6b04 	ldr.w	r6, [r1], #4
 8002114:	d402      	bmi.n	800211c <_printf_i+0x18c>
 8002116:	065f      	lsls	r7, r3, #25
 8002118:	bf48      	it	mi
 800211a:	b2b6      	uxthmi	r6, r6
 800211c:	07df      	lsls	r7, r3, #31
 800211e:	bf48      	it	mi
 8002120:	f043 0320 	orrmi.w	r3, r3, #32
 8002124:	6029      	str	r1, [r5, #0]
 8002126:	bf48      	it	mi
 8002128:	6023      	strmi	r3, [r4, #0]
 800212a:	b91e      	cbnz	r6, 8002134 <_printf_i+0x1a4>
 800212c:	6823      	ldr	r3, [r4, #0]
 800212e:	f023 0320 	bic.w	r3, r3, #32
 8002132:	6023      	str	r3, [r4, #0]
 8002134:	2310      	movs	r3, #16
 8002136:	e7a7      	b.n	8002088 <_printf_i+0xf8>
 8002138:	4824      	ldr	r0, [pc, #144]	; (80021cc <_printf_i+0x23c>)
 800213a:	e7e4      	b.n	8002106 <_printf_i+0x176>
 800213c:	4615      	mov	r5, r2
 800213e:	e7bd      	b.n	80020bc <_printf_i+0x12c>
 8002140:	682b      	ldr	r3, [r5, #0]
 8002142:	6826      	ldr	r6, [r4, #0]
 8002144:	6961      	ldr	r1, [r4, #20]
 8002146:	1d18      	adds	r0, r3, #4
 8002148:	6028      	str	r0, [r5, #0]
 800214a:	0635      	lsls	r5, r6, #24
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	d501      	bpl.n	8002154 <_printf_i+0x1c4>
 8002150:	6019      	str	r1, [r3, #0]
 8002152:	e002      	b.n	800215a <_printf_i+0x1ca>
 8002154:	0670      	lsls	r0, r6, #25
 8002156:	d5fb      	bpl.n	8002150 <_printf_i+0x1c0>
 8002158:	8019      	strh	r1, [r3, #0]
 800215a:	2300      	movs	r3, #0
 800215c:	6123      	str	r3, [r4, #16]
 800215e:	4615      	mov	r5, r2
 8002160:	e7bc      	b.n	80020dc <_printf_i+0x14c>
 8002162:	682b      	ldr	r3, [r5, #0]
 8002164:	1d1a      	adds	r2, r3, #4
 8002166:	602a      	str	r2, [r5, #0]
 8002168:	681d      	ldr	r5, [r3, #0]
 800216a:	6862      	ldr	r2, [r4, #4]
 800216c:	2100      	movs	r1, #0
 800216e:	4628      	mov	r0, r5
 8002170:	f7fe f84e 	bl	8000210 <memchr>
 8002174:	b108      	cbz	r0, 800217a <_printf_i+0x1ea>
 8002176:	1b40      	subs	r0, r0, r5
 8002178:	6060      	str	r0, [r4, #4]
 800217a:	6863      	ldr	r3, [r4, #4]
 800217c:	6123      	str	r3, [r4, #16]
 800217e:	2300      	movs	r3, #0
 8002180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002184:	e7aa      	b.n	80020dc <_printf_i+0x14c>
 8002186:	6923      	ldr	r3, [r4, #16]
 8002188:	462a      	mov	r2, r5
 800218a:	4649      	mov	r1, r9
 800218c:	4640      	mov	r0, r8
 800218e:	47d0      	blx	sl
 8002190:	3001      	adds	r0, #1
 8002192:	d0ad      	beq.n	80020f0 <_printf_i+0x160>
 8002194:	6823      	ldr	r3, [r4, #0]
 8002196:	079b      	lsls	r3, r3, #30
 8002198:	d413      	bmi.n	80021c2 <_printf_i+0x232>
 800219a:	68e0      	ldr	r0, [r4, #12]
 800219c:	9b03      	ldr	r3, [sp, #12]
 800219e:	4298      	cmp	r0, r3
 80021a0:	bfb8      	it	lt
 80021a2:	4618      	movlt	r0, r3
 80021a4:	e7a6      	b.n	80020f4 <_printf_i+0x164>
 80021a6:	2301      	movs	r3, #1
 80021a8:	4632      	mov	r2, r6
 80021aa:	4649      	mov	r1, r9
 80021ac:	4640      	mov	r0, r8
 80021ae:	47d0      	blx	sl
 80021b0:	3001      	adds	r0, #1
 80021b2:	d09d      	beq.n	80020f0 <_printf_i+0x160>
 80021b4:	3501      	adds	r5, #1
 80021b6:	68e3      	ldr	r3, [r4, #12]
 80021b8:	9903      	ldr	r1, [sp, #12]
 80021ba:	1a5b      	subs	r3, r3, r1
 80021bc:	42ab      	cmp	r3, r5
 80021be:	dcf2      	bgt.n	80021a6 <_printf_i+0x216>
 80021c0:	e7eb      	b.n	800219a <_printf_i+0x20a>
 80021c2:	2500      	movs	r5, #0
 80021c4:	f104 0619 	add.w	r6, r4, #25
 80021c8:	e7f5      	b.n	80021b6 <_printf_i+0x226>
 80021ca:	bf00      	nop
 80021cc:	08002acd 	.word	0x08002acd
 80021d0:	08002ade 	.word	0x08002ade

080021d4 <__sflush_r>:
 80021d4:	898a      	ldrh	r2, [r1, #12]
 80021d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d8:	4605      	mov	r5, r0
 80021da:	0710      	lsls	r0, r2, #28
 80021dc:	460c      	mov	r4, r1
 80021de:	d457      	bmi.n	8002290 <__sflush_r+0xbc>
 80021e0:	684b      	ldr	r3, [r1, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	dc04      	bgt.n	80021f0 <__sflush_r+0x1c>
 80021e6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	dc01      	bgt.n	80021f0 <__sflush_r+0x1c>
 80021ec:	2000      	movs	r0, #0
 80021ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80021f2:	2e00      	cmp	r6, #0
 80021f4:	d0fa      	beq.n	80021ec <__sflush_r+0x18>
 80021f6:	2300      	movs	r3, #0
 80021f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80021fc:	682f      	ldr	r7, [r5, #0]
 80021fe:	6a21      	ldr	r1, [r4, #32]
 8002200:	602b      	str	r3, [r5, #0]
 8002202:	d032      	beq.n	800226a <__sflush_r+0x96>
 8002204:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002206:	89a3      	ldrh	r3, [r4, #12]
 8002208:	075a      	lsls	r2, r3, #29
 800220a:	d505      	bpl.n	8002218 <__sflush_r+0x44>
 800220c:	6863      	ldr	r3, [r4, #4]
 800220e:	1ac0      	subs	r0, r0, r3
 8002210:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002212:	b10b      	cbz	r3, 8002218 <__sflush_r+0x44>
 8002214:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002216:	1ac0      	subs	r0, r0, r3
 8002218:	2300      	movs	r3, #0
 800221a:	4602      	mov	r2, r0
 800221c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800221e:	6a21      	ldr	r1, [r4, #32]
 8002220:	4628      	mov	r0, r5
 8002222:	47b0      	blx	r6
 8002224:	1c43      	adds	r3, r0, #1
 8002226:	89a3      	ldrh	r3, [r4, #12]
 8002228:	d106      	bne.n	8002238 <__sflush_r+0x64>
 800222a:	6829      	ldr	r1, [r5, #0]
 800222c:	291d      	cmp	r1, #29
 800222e:	d82b      	bhi.n	8002288 <__sflush_r+0xb4>
 8002230:	4a28      	ldr	r2, [pc, #160]	; (80022d4 <__sflush_r+0x100>)
 8002232:	410a      	asrs	r2, r1
 8002234:	07d6      	lsls	r6, r2, #31
 8002236:	d427      	bmi.n	8002288 <__sflush_r+0xb4>
 8002238:	2200      	movs	r2, #0
 800223a:	6062      	str	r2, [r4, #4]
 800223c:	04d9      	lsls	r1, r3, #19
 800223e:	6922      	ldr	r2, [r4, #16]
 8002240:	6022      	str	r2, [r4, #0]
 8002242:	d504      	bpl.n	800224e <__sflush_r+0x7a>
 8002244:	1c42      	adds	r2, r0, #1
 8002246:	d101      	bne.n	800224c <__sflush_r+0x78>
 8002248:	682b      	ldr	r3, [r5, #0]
 800224a:	b903      	cbnz	r3, 800224e <__sflush_r+0x7a>
 800224c:	6560      	str	r0, [r4, #84]	; 0x54
 800224e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002250:	602f      	str	r7, [r5, #0]
 8002252:	2900      	cmp	r1, #0
 8002254:	d0ca      	beq.n	80021ec <__sflush_r+0x18>
 8002256:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800225a:	4299      	cmp	r1, r3
 800225c:	d002      	beq.n	8002264 <__sflush_r+0x90>
 800225e:	4628      	mov	r0, r5
 8002260:	f7ff fbf0 	bl	8001a44 <_free_r>
 8002264:	2000      	movs	r0, #0
 8002266:	6360      	str	r0, [r4, #52]	; 0x34
 8002268:	e7c1      	b.n	80021ee <__sflush_r+0x1a>
 800226a:	2301      	movs	r3, #1
 800226c:	4628      	mov	r0, r5
 800226e:	47b0      	blx	r6
 8002270:	1c41      	adds	r1, r0, #1
 8002272:	d1c8      	bne.n	8002206 <__sflush_r+0x32>
 8002274:	682b      	ldr	r3, [r5, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0c5      	beq.n	8002206 <__sflush_r+0x32>
 800227a:	2b1d      	cmp	r3, #29
 800227c:	d001      	beq.n	8002282 <__sflush_r+0xae>
 800227e:	2b16      	cmp	r3, #22
 8002280:	d101      	bne.n	8002286 <__sflush_r+0xb2>
 8002282:	602f      	str	r7, [r5, #0]
 8002284:	e7b2      	b.n	80021ec <__sflush_r+0x18>
 8002286:	89a3      	ldrh	r3, [r4, #12]
 8002288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800228c:	81a3      	strh	r3, [r4, #12]
 800228e:	e7ae      	b.n	80021ee <__sflush_r+0x1a>
 8002290:	690f      	ldr	r7, [r1, #16]
 8002292:	2f00      	cmp	r7, #0
 8002294:	d0aa      	beq.n	80021ec <__sflush_r+0x18>
 8002296:	0793      	lsls	r3, r2, #30
 8002298:	680e      	ldr	r6, [r1, #0]
 800229a:	bf08      	it	eq
 800229c:	694b      	ldreq	r3, [r1, #20]
 800229e:	600f      	str	r7, [r1, #0]
 80022a0:	bf18      	it	ne
 80022a2:	2300      	movne	r3, #0
 80022a4:	1bf6      	subs	r6, r6, r7
 80022a6:	608b      	str	r3, [r1, #8]
 80022a8:	2e00      	cmp	r6, #0
 80022aa:	dd9f      	ble.n	80021ec <__sflush_r+0x18>
 80022ac:	6a21      	ldr	r1, [r4, #32]
 80022ae:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80022b2:	4633      	mov	r3, r6
 80022b4:	463a      	mov	r2, r7
 80022b6:	4628      	mov	r0, r5
 80022b8:	47e0      	blx	ip
 80022ba:	2800      	cmp	r0, #0
 80022bc:	dc06      	bgt.n	80022cc <__sflush_r+0xf8>
 80022be:	89a3      	ldrh	r3, [r4, #12]
 80022c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022c4:	81a3      	strh	r3, [r4, #12]
 80022c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022ca:	e790      	b.n	80021ee <__sflush_r+0x1a>
 80022cc:	4407      	add	r7, r0
 80022ce:	1a36      	subs	r6, r6, r0
 80022d0:	e7ea      	b.n	80022a8 <__sflush_r+0xd4>
 80022d2:	bf00      	nop
 80022d4:	dfbffffe 	.word	0xdfbffffe

080022d8 <_fflush_r>:
 80022d8:	b538      	push	{r3, r4, r5, lr}
 80022da:	690b      	ldr	r3, [r1, #16]
 80022dc:	4605      	mov	r5, r0
 80022de:	460c      	mov	r4, r1
 80022e0:	b913      	cbnz	r3, 80022e8 <_fflush_r+0x10>
 80022e2:	2500      	movs	r5, #0
 80022e4:	4628      	mov	r0, r5
 80022e6:	bd38      	pop	{r3, r4, r5, pc}
 80022e8:	b118      	cbz	r0, 80022f2 <_fflush_r+0x1a>
 80022ea:	6a03      	ldr	r3, [r0, #32]
 80022ec:	b90b      	cbnz	r3, 80022f2 <_fflush_r+0x1a>
 80022ee:	f7ff f9b7 	bl	8001660 <__sinit>
 80022f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f3      	beq.n	80022e2 <_fflush_r+0xa>
 80022fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80022fc:	07d0      	lsls	r0, r2, #31
 80022fe:	d404      	bmi.n	800230a <_fflush_r+0x32>
 8002300:	0599      	lsls	r1, r3, #22
 8002302:	d402      	bmi.n	800230a <_fflush_r+0x32>
 8002304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002306:	f7ff fb9a 	bl	8001a3e <__retarget_lock_acquire_recursive>
 800230a:	4628      	mov	r0, r5
 800230c:	4621      	mov	r1, r4
 800230e:	f7ff ff61 	bl	80021d4 <__sflush_r>
 8002312:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002314:	07da      	lsls	r2, r3, #31
 8002316:	4605      	mov	r5, r0
 8002318:	d4e4      	bmi.n	80022e4 <_fflush_r+0xc>
 800231a:	89a3      	ldrh	r3, [r4, #12]
 800231c:	059b      	lsls	r3, r3, #22
 800231e:	d4e1      	bmi.n	80022e4 <_fflush_r+0xc>
 8002320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002322:	f7ff fb8d 	bl	8001a40 <__retarget_lock_release_recursive>
 8002326:	e7dd      	b.n	80022e4 <_fflush_r+0xc>

08002328 <__swhatbuf_r>:
 8002328:	b570      	push	{r4, r5, r6, lr}
 800232a:	460c      	mov	r4, r1
 800232c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002330:	2900      	cmp	r1, #0
 8002332:	b096      	sub	sp, #88	; 0x58
 8002334:	4615      	mov	r5, r2
 8002336:	461e      	mov	r6, r3
 8002338:	da0d      	bge.n	8002356 <__swhatbuf_r+0x2e>
 800233a:	89a3      	ldrh	r3, [r4, #12]
 800233c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002340:	f04f 0100 	mov.w	r1, #0
 8002344:	bf0c      	ite	eq
 8002346:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800234a:	2340      	movne	r3, #64	; 0x40
 800234c:	2000      	movs	r0, #0
 800234e:	6031      	str	r1, [r6, #0]
 8002350:	602b      	str	r3, [r5, #0]
 8002352:	b016      	add	sp, #88	; 0x58
 8002354:	bd70      	pop	{r4, r5, r6, pc}
 8002356:	466a      	mov	r2, sp
 8002358:	f000 f848 	bl	80023ec <_fstat_r>
 800235c:	2800      	cmp	r0, #0
 800235e:	dbec      	blt.n	800233a <__swhatbuf_r+0x12>
 8002360:	9901      	ldr	r1, [sp, #4]
 8002362:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002366:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800236a:	4259      	negs	r1, r3
 800236c:	4159      	adcs	r1, r3
 800236e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002372:	e7eb      	b.n	800234c <__swhatbuf_r+0x24>

08002374 <__smakebuf_r>:
 8002374:	898b      	ldrh	r3, [r1, #12]
 8002376:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002378:	079d      	lsls	r5, r3, #30
 800237a:	4606      	mov	r6, r0
 800237c:	460c      	mov	r4, r1
 800237e:	d507      	bpl.n	8002390 <__smakebuf_r+0x1c>
 8002380:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002384:	6023      	str	r3, [r4, #0]
 8002386:	6123      	str	r3, [r4, #16]
 8002388:	2301      	movs	r3, #1
 800238a:	6163      	str	r3, [r4, #20]
 800238c:	b002      	add	sp, #8
 800238e:	bd70      	pop	{r4, r5, r6, pc}
 8002390:	ab01      	add	r3, sp, #4
 8002392:	466a      	mov	r2, sp
 8002394:	f7ff ffc8 	bl	8002328 <__swhatbuf_r>
 8002398:	9900      	ldr	r1, [sp, #0]
 800239a:	4605      	mov	r5, r0
 800239c:	4630      	mov	r0, r6
 800239e:	f7ff fbbb 	bl	8001b18 <_malloc_r>
 80023a2:	b948      	cbnz	r0, 80023b8 <__smakebuf_r+0x44>
 80023a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023a8:	059a      	lsls	r2, r3, #22
 80023aa:	d4ef      	bmi.n	800238c <__smakebuf_r+0x18>
 80023ac:	f023 0303 	bic.w	r3, r3, #3
 80023b0:	f043 0302 	orr.w	r3, r3, #2
 80023b4:	81a3      	strh	r3, [r4, #12]
 80023b6:	e7e3      	b.n	8002380 <__smakebuf_r+0xc>
 80023b8:	89a3      	ldrh	r3, [r4, #12]
 80023ba:	6020      	str	r0, [r4, #0]
 80023bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c0:	81a3      	strh	r3, [r4, #12]
 80023c2:	9b00      	ldr	r3, [sp, #0]
 80023c4:	6163      	str	r3, [r4, #20]
 80023c6:	9b01      	ldr	r3, [sp, #4]
 80023c8:	6120      	str	r0, [r4, #16]
 80023ca:	b15b      	cbz	r3, 80023e4 <__smakebuf_r+0x70>
 80023cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80023d0:	4630      	mov	r0, r6
 80023d2:	f000 f81d 	bl	8002410 <_isatty_r>
 80023d6:	b128      	cbz	r0, 80023e4 <__smakebuf_r+0x70>
 80023d8:	89a3      	ldrh	r3, [r4, #12]
 80023da:	f023 0303 	bic.w	r3, r3, #3
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	81a3      	strh	r3, [r4, #12]
 80023e4:	89a3      	ldrh	r3, [r4, #12]
 80023e6:	431d      	orrs	r5, r3
 80023e8:	81a5      	strh	r5, [r4, #12]
 80023ea:	e7cf      	b.n	800238c <__smakebuf_r+0x18>

080023ec <_fstat_r>:
 80023ec:	b538      	push	{r3, r4, r5, lr}
 80023ee:	4d07      	ldr	r5, [pc, #28]	; (800240c <_fstat_r+0x20>)
 80023f0:	2300      	movs	r3, #0
 80023f2:	4604      	mov	r4, r0
 80023f4:	4608      	mov	r0, r1
 80023f6:	4611      	mov	r1, r2
 80023f8:	602b      	str	r3, [r5, #0]
 80023fa:	f000 f966 	bl	80026ca <_fstat>
 80023fe:	1c43      	adds	r3, r0, #1
 8002400:	d102      	bne.n	8002408 <_fstat_r+0x1c>
 8002402:	682b      	ldr	r3, [r5, #0]
 8002404:	b103      	cbz	r3, 8002408 <_fstat_r+0x1c>
 8002406:	6023      	str	r3, [r4, #0]
 8002408:	bd38      	pop	{r3, r4, r5, pc}
 800240a:	bf00      	nop
 800240c:	20000220 	.word	0x20000220

08002410 <_isatty_r>:
 8002410:	b538      	push	{r3, r4, r5, lr}
 8002412:	4d06      	ldr	r5, [pc, #24]	; (800242c <_isatty_r+0x1c>)
 8002414:	2300      	movs	r3, #0
 8002416:	4604      	mov	r4, r0
 8002418:	4608      	mov	r0, r1
 800241a:	602b      	str	r3, [r5, #0]
 800241c:	f000 fabc 	bl	8002998 <_isatty>
 8002420:	1c43      	adds	r3, r0, #1
 8002422:	d102      	bne.n	800242a <_isatty_r+0x1a>
 8002424:	682b      	ldr	r3, [r5, #0]
 8002426:	b103      	cbz	r3, 800242a <_isatty_r+0x1a>
 8002428:	6023      	str	r3, [r4, #0]
 800242a:	bd38      	pop	{r3, r4, r5, pc}
 800242c:	20000220 	.word	0x20000220

08002430 <_sbrk_r>:
 8002430:	b538      	push	{r3, r4, r5, lr}
 8002432:	4d06      	ldr	r5, [pc, #24]	; (800244c <_sbrk_r+0x1c>)
 8002434:	2300      	movs	r3, #0
 8002436:	4604      	mov	r4, r0
 8002438:	4608      	mov	r0, r1
 800243a:	602b      	str	r3, [r5, #0]
 800243c:	f000 f900 	bl	8002640 <_sbrk>
 8002440:	1c43      	adds	r3, r0, #1
 8002442:	d102      	bne.n	800244a <_sbrk_r+0x1a>
 8002444:	682b      	ldr	r3, [r5, #0]
 8002446:	b103      	cbz	r3, 800244a <_sbrk_r+0x1a>
 8002448:	6023      	str	r3, [r4, #0]
 800244a:	bd38      	pop	{r3, r4, r5, pc}
 800244c:	20000220 	.word	0x20000220

08002450 <findslot>:
 8002450:	4b0a      	ldr	r3, [pc, #40]	; (800247c <findslot+0x2c>)
 8002452:	b510      	push	{r4, lr}
 8002454:	4604      	mov	r4, r0
 8002456:	6818      	ldr	r0, [r3, #0]
 8002458:	b118      	cbz	r0, 8002462 <findslot+0x12>
 800245a:	6a03      	ldr	r3, [r0, #32]
 800245c:	b90b      	cbnz	r3, 8002462 <findslot+0x12>
 800245e:	f7ff f8ff 	bl	8001660 <__sinit>
 8002462:	2c13      	cmp	r4, #19
 8002464:	d807      	bhi.n	8002476 <findslot+0x26>
 8002466:	4806      	ldr	r0, [pc, #24]	; (8002480 <findslot+0x30>)
 8002468:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800246c:	3201      	adds	r2, #1
 800246e:	d002      	beq.n	8002476 <findslot+0x26>
 8002470:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002474:	bd10      	pop	{r4, pc}
 8002476:	2000      	movs	r0, #0
 8002478:	e7fc      	b.n	8002474 <findslot+0x24>
 800247a:	bf00      	nop
 800247c:	20000070 	.word	0x20000070
 8002480:	20000240 	.word	0x20000240

08002484 <error>:
 8002484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002486:	4604      	mov	r4, r0
 8002488:	f000 faa2 	bl	80029d0 <__errno>
 800248c:	2613      	movs	r6, #19
 800248e:	4605      	mov	r5, r0
 8002490:	2700      	movs	r7, #0
 8002492:	4630      	mov	r0, r6
 8002494:	4639      	mov	r1, r7
 8002496:	beab      	bkpt	0x00ab
 8002498:	4606      	mov	r6, r0
 800249a:	602e      	str	r6, [r5, #0]
 800249c:	4620      	mov	r0, r4
 800249e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080024a0 <checkerror>:
 80024a0:	1c43      	adds	r3, r0, #1
 80024a2:	d101      	bne.n	80024a8 <checkerror+0x8>
 80024a4:	f7ff bfee 	b.w	8002484 <error>
 80024a8:	4770      	bx	lr

080024aa <_swiread>:
 80024aa:	b530      	push	{r4, r5, lr}
 80024ac:	b085      	sub	sp, #20
 80024ae:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80024b2:	9203      	str	r2, [sp, #12]
 80024b4:	2406      	movs	r4, #6
 80024b6:	ad01      	add	r5, sp, #4
 80024b8:	4620      	mov	r0, r4
 80024ba:	4629      	mov	r1, r5
 80024bc:	beab      	bkpt	0x00ab
 80024be:	4604      	mov	r4, r0
 80024c0:	4620      	mov	r0, r4
 80024c2:	f7ff ffed 	bl	80024a0 <checkerror>
 80024c6:	b005      	add	sp, #20
 80024c8:	bd30      	pop	{r4, r5, pc}

080024ca <_read>:
 80024ca:	b570      	push	{r4, r5, r6, lr}
 80024cc:	460e      	mov	r6, r1
 80024ce:	4615      	mov	r5, r2
 80024d0:	f7ff ffbe 	bl	8002450 <findslot>
 80024d4:	4604      	mov	r4, r0
 80024d6:	b930      	cbnz	r0, 80024e6 <_read+0x1c>
 80024d8:	f000 fa7a 	bl	80029d0 <__errno>
 80024dc:	2309      	movs	r3, #9
 80024de:	6003      	str	r3, [r0, #0]
 80024e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024e4:	bd70      	pop	{r4, r5, r6, pc}
 80024e6:	6800      	ldr	r0, [r0, #0]
 80024e8:	462a      	mov	r2, r5
 80024ea:	4631      	mov	r1, r6
 80024ec:	f7ff ffdd 	bl	80024aa <_swiread>
 80024f0:	1c43      	adds	r3, r0, #1
 80024f2:	bf1f      	itttt	ne
 80024f4:	6863      	ldrne	r3, [r4, #4]
 80024f6:	1a28      	subne	r0, r5, r0
 80024f8:	181b      	addne	r3, r3, r0
 80024fa:	6063      	strne	r3, [r4, #4]
 80024fc:	e7f2      	b.n	80024e4 <_read+0x1a>

080024fe <_swilseek>:
 80024fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002500:	460c      	mov	r4, r1
 8002502:	4616      	mov	r6, r2
 8002504:	f7ff ffa4 	bl	8002450 <findslot>
 8002508:	4605      	mov	r5, r0
 800250a:	b940      	cbnz	r0, 800251e <_swilseek+0x20>
 800250c:	f000 fa60 	bl	80029d0 <__errno>
 8002510:	2309      	movs	r3, #9
 8002512:	6003      	str	r3, [r0, #0]
 8002514:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002518:	4620      	mov	r0, r4
 800251a:	b003      	add	sp, #12
 800251c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800251e:	2e02      	cmp	r6, #2
 8002520:	d903      	bls.n	800252a <_swilseek+0x2c>
 8002522:	f000 fa55 	bl	80029d0 <__errno>
 8002526:	2316      	movs	r3, #22
 8002528:	e7f3      	b.n	8002512 <_swilseek+0x14>
 800252a:	2e01      	cmp	r6, #1
 800252c:	d112      	bne.n	8002554 <_swilseek+0x56>
 800252e:	6843      	ldr	r3, [r0, #4]
 8002530:	18e4      	adds	r4, r4, r3
 8002532:	d4f6      	bmi.n	8002522 <_swilseek+0x24>
 8002534:	682b      	ldr	r3, [r5, #0]
 8002536:	260a      	movs	r6, #10
 8002538:	e9cd 3400 	strd	r3, r4, [sp]
 800253c:	466f      	mov	r7, sp
 800253e:	4630      	mov	r0, r6
 8002540:	4639      	mov	r1, r7
 8002542:	beab      	bkpt	0x00ab
 8002544:	4606      	mov	r6, r0
 8002546:	4630      	mov	r0, r6
 8002548:	f7ff ffaa 	bl	80024a0 <checkerror>
 800254c:	2800      	cmp	r0, #0
 800254e:	dbe1      	blt.n	8002514 <_swilseek+0x16>
 8002550:	606c      	str	r4, [r5, #4]
 8002552:	e7e1      	b.n	8002518 <_swilseek+0x1a>
 8002554:	2e02      	cmp	r6, #2
 8002556:	6803      	ldr	r3, [r0, #0]
 8002558:	d1ec      	bne.n	8002534 <_swilseek+0x36>
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	260c      	movs	r6, #12
 800255e:	466f      	mov	r7, sp
 8002560:	4630      	mov	r0, r6
 8002562:	4639      	mov	r1, r7
 8002564:	beab      	bkpt	0x00ab
 8002566:	4606      	mov	r6, r0
 8002568:	4630      	mov	r0, r6
 800256a:	f7ff ff99 	bl	80024a0 <checkerror>
 800256e:	1c43      	adds	r3, r0, #1
 8002570:	d0d0      	beq.n	8002514 <_swilseek+0x16>
 8002572:	4404      	add	r4, r0
 8002574:	e7de      	b.n	8002534 <_swilseek+0x36>

08002576 <_lseek>:
 8002576:	f7ff bfc2 	b.w	80024fe <_swilseek>

0800257a <_swiwrite>:
 800257a:	b530      	push	{r4, r5, lr}
 800257c:	b085      	sub	sp, #20
 800257e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002582:	9203      	str	r2, [sp, #12]
 8002584:	2405      	movs	r4, #5
 8002586:	ad01      	add	r5, sp, #4
 8002588:	4620      	mov	r0, r4
 800258a:	4629      	mov	r1, r5
 800258c:	beab      	bkpt	0x00ab
 800258e:	4604      	mov	r4, r0
 8002590:	4620      	mov	r0, r4
 8002592:	f7ff ff85 	bl	80024a0 <checkerror>
 8002596:	b005      	add	sp, #20
 8002598:	bd30      	pop	{r4, r5, pc}

0800259a <_write>:
 800259a:	b570      	push	{r4, r5, r6, lr}
 800259c:	460e      	mov	r6, r1
 800259e:	4615      	mov	r5, r2
 80025a0:	f7ff ff56 	bl	8002450 <findslot>
 80025a4:	4604      	mov	r4, r0
 80025a6:	b930      	cbnz	r0, 80025b6 <_write+0x1c>
 80025a8:	f000 fa12 	bl	80029d0 <__errno>
 80025ac:	2309      	movs	r3, #9
 80025ae:	6003      	str	r3, [r0, #0]
 80025b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025b4:	bd70      	pop	{r4, r5, r6, pc}
 80025b6:	6800      	ldr	r0, [r0, #0]
 80025b8:	462a      	mov	r2, r5
 80025ba:	4631      	mov	r1, r6
 80025bc:	f7ff ffdd 	bl	800257a <_swiwrite>
 80025c0:	1e03      	subs	r3, r0, #0
 80025c2:	dbf5      	blt.n	80025b0 <_write+0x16>
 80025c4:	6862      	ldr	r2, [r4, #4]
 80025c6:	1ae8      	subs	r0, r5, r3
 80025c8:	4402      	add	r2, r0
 80025ca:	42ab      	cmp	r3, r5
 80025cc:	6062      	str	r2, [r4, #4]
 80025ce:	d1f1      	bne.n	80025b4 <_write+0x1a>
 80025d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80025d4:	2000      	movs	r0, #0
 80025d6:	f7ff bf55 	b.w	8002484 <error>

080025da <_swiclose>:
 80025da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80025dc:	2402      	movs	r4, #2
 80025de:	9001      	str	r0, [sp, #4]
 80025e0:	ad01      	add	r5, sp, #4
 80025e2:	4620      	mov	r0, r4
 80025e4:	4629      	mov	r1, r5
 80025e6:	beab      	bkpt	0x00ab
 80025e8:	4604      	mov	r4, r0
 80025ea:	4620      	mov	r0, r4
 80025ec:	f7ff ff58 	bl	80024a0 <checkerror>
 80025f0:	b003      	add	sp, #12
 80025f2:	bd30      	pop	{r4, r5, pc}

080025f4 <_close>:
 80025f4:	b538      	push	{r3, r4, r5, lr}
 80025f6:	4605      	mov	r5, r0
 80025f8:	f7ff ff2a 	bl	8002450 <findslot>
 80025fc:	4604      	mov	r4, r0
 80025fe:	b930      	cbnz	r0, 800260e <_close+0x1a>
 8002600:	f000 f9e6 	bl	80029d0 <__errno>
 8002604:	2309      	movs	r3, #9
 8002606:	6003      	str	r3, [r0, #0]
 8002608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800260c:	bd38      	pop	{r3, r4, r5, pc}
 800260e:	3d01      	subs	r5, #1
 8002610:	2d01      	cmp	r5, #1
 8002612:	d809      	bhi.n	8002628 <_close+0x34>
 8002614:	4b09      	ldr	r3, [pc, #36]	; (800263c <_close+0x48>)
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	429a      	cmp	r2, r3
 800261c:	d104      	bne.n	8002628 <_close+0x34>
 800261e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002622:	6003      	str	r3, [r0, #0]
 8002624:	2000      	movs	r0, #0
 8002626:	e7f1      	b.n	800260c <_close+0x18>
 8002628:	6820      	ldr	r0, [r4, #0]
 800262a:	f7ff ffd6 	bl	80025da <_swiclose>
 800262e:	2800      	cmp	r0, #0
 8002630:	d1ec      	bne.n	800260c <_close+0x18>
 8002632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002636:	6023      	str	r3, [r4, #0]
 8002638:	e7e8      	b.n	800260c <_close+0x18>
 800263a:	bf00      	nop
 800263c:	20000240 	.word	0x20000240

08002640 <_sbrk>:
 8002640:	4a0d      	ldr	r2, [pc, #52]	; (8002678 <_sbrk+0x38>)
 8002642:	6811      	ldr	r1, [r2, #0]
 8002644:	b510      	push	{r4, lr}
 8002646:	4603      	mov	r3, r0
 8002648:	b909      	cbnz	r1, 800264e <_sbrk+0xe>
 800264a:	490c      	ldr	r1, [pc, #48]	; (800267c <_sbrk+0x3c>)
 800264c:	6011      	str	r1, [r2, #0]
 800264e:	6810      	ldr	r0, [r2, #0]
 8002650:	4669      	mov	r1, sp
 8002652:	4403      	add	r3, r0
 8002654:	428b      	cmp	r3, r1
 8002656:	d806      	bhi.n	8002666 <_sbrk+0x26>
 8002658:	4909      	ldr	r1, [pc, #36]	; (8002680 <_sbrk+0x40>)
 800265a:	4c0a      	ldr	r4, [pc, #40]	; (8002684 <_sbrk+0x44>)
 800265c:	6809      	ldr	r1, [r1, #0]
 800265e:	42a1      	cmp	r1, r4
 8002660:	d008      	beq.n	8002674 <_sbrk+0x34>
 8002662:	428b      	cmp	r3, r1
 8002664:	d906      	bls.n	8002674 <_sbrk+0x34>
 8002666:	f000 f9b3 	bl	80029d0 <__errno>
 800266a:	230c      	movs	r3, #12
 800266c:	6003      	str	r3, [r0, #0]
 800266e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002672:	bd10      	pop	{r4, pc}
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	e7fc      	b.n	8002672 <_sbrk+0x32>
 8002678:	20000230 	.word	0x20000230
 800267c:	200002e0 	.word	0x200002e0
 8002680:	20000074 	.word	0x20000074
 8002684:	cafedead 	.word	0xcafedead

08002688 <_swistat>:
 8002688:	b570      	push	{r4, r5, r6, lr}
 800268a:	460c      	mov	r4, r1
 800268c:	f7ff fee0 	bl	8002450 <findslot>
 8002690:	4605      	mov	r5, r0
 8002692:	b930      	cbnz	r0, 80026a2 <_swistat+0x1a>
 8002694:	f000 f99c 	bl	80029d0 <__errno>
 8002698:	2309      	movs	r3, #9
 800269a:	6003      	str	r3, [r0, #0]
 800269c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026a0:	bd70      	pop	{r4, r5, r6, pc}
 80026a2:	6863      	ldr	r3, [r4, #4]
 80026a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026a8:	6063      	str	r3, [r4, #4]
 80026aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026ae:	64a3      	str	r3, [r4, #72]	; 0x48
 80026b0:	260c      	movs	r6, #12
 80026b2:	4630      	mov	r0, r6
 80026b4:	4629      	mov	r1, r5
 80026b6:	beab      	bkpt	0x00ab
 80026b8:	4605      	mov	r5, r0
 80026ba:	4628      	mov	r0, r5
 80026bc:	f7ff fef0 	bl	80024a0 <checkerror>
 80026c0:	1c43      	adds	r3, r0, #1
 80026c2:	bf1c      	itt	ne
 80026c4:	6120      	strne	r0, [r4, #16]
 80026c6:	2000      	movne	r0, #0
 80026c8:	e7ea      	b.n	80026a0 <_swistat+0x18>

080026ca <_fstat>:
 80026ca:	460b      	mov	r3, r1
 80026cc:	b510      	push	{r4, lr}
 80026ce:	2100      	movs	r1, #0
 80026d0:	4604      	mov	r4, r0
 80026d2:	2258      	movs	r2, #88	; 0x58
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff f93f 	bl	8001958 <memset>
 80026da:	4601      	mov	r1, r0
 80026dc:	4620      	mov	r0, r4
 80026de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026e2:	f7ff bfd1 	b.w	8002688 <_swistat>

080026e6 <_stat>:
 80026e6:	b538      	push	{r3, r4, r5, lr}
 80026e8:	460d      	mov	r5, r1
 80026ea:	4604      	mov	r4, r0
 80026ec:	2258      	movs	r2, #88	; 0x58
 80026ee:	2100      	movs	r1, #0
 80026f0:	4628      	mov	r0, r5
 80026f2:	f7ff f931 	bl	8001958 <memset>
 80026f6:	4620      	mov	r0, r4
 80026f8:	2100      	movs	r1, #0
 80026fa:	f000 f811 	bl	8002720 <_swiopen>
 80026fe:	1c43      	adds	r3, r0, #1
 8002700:	4604      	mov	r4, r0
 8002702:	d00b      	beq.n	800271c <_stat+0x36>
 8002704:	686b      	ldr	r3, [r5, #4]
 8002706:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800270a:	606b      	str	r3, [r5, #4]
 800270c:	4629      	mov	r1, r5
 800270e:	f7ff ffbb 	bl	8002688 <_swistat>
 8002712:	4605      	mov	r5, r0
 8002714:	4620      	mov	r0, r4
 8002716:	f7ff ff6d 	bl	80025f4 <_close>
 800271a:	462c      	mov	r4, r5
 800271c:	4620      	mov	r0, r4
 800271e:	bd38      	pop	{r3, r4, r5, pc}

08002720 <_swiopen>:
 8002720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002724:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80027d0 <_swiopen+0xb0>
 8002728:	b097      	sub	sp, #92	; 0x5c
 800272a:	4607      	mov	r7, r0
 800272c:	460e      	mov	r6, r1
 800272e:	2500      	movs	r5, #0
 8002730:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8002734:	1c61      	adds	r1, r4, #1
 8002736:	d037      	beq.n	80027a8 <_swiopen+0x88>
 8002738:	3501      	adds	r5, #1
 800273a:	2d14      	cmp	r5, #20
 800273c:	d1f8      	bne.n	8002730 <_swiopen+0x10>
 800273e:	f000 f947 	bl	80029d0 <__errno>
 8002742:	2318      	movs	r3, #24
 8002744:	6003      	str	r3, [r0, #0]
 8002746:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800274a:	e03d      	b.n	80027c8 <_swiopen+0xa8>
 800274c:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8002750:	f240 6301 	movw	r3, #1537	; 0x601
 8002754:	07b2      	lsls	r2, r6, #30
 8002756:	bf48      	it	mi
 8002758:	f044 0402 	orrmi.w	r4, r4, #2
 800275c:	421e      	tst	r6, r3
 800275e:	bf18      	it	ne
 8002760:	f044 0404 	orrne.w	r4, r4, #4
 8002764:	0733      	lsls	r3, r6, #28
 8002766:	bf48      	it	mi
 8002768:	f024 0404 	bicmi.w	r4, r4, #4
 800276c:	4638      	mov	r0, r7
 800276e:	bf48      	it	mi
 8002770:	f044 0408 	orrmi.w	r4, r4, #8
 8002774:	9700      	str	r7, [sp, #0]
 8002776:	f7fd fd9b 	bl	80002b0 <strlen>
 800277a:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800277e:	2401      	movs	r4, #1
 8002780:	4620      	mov	r0, r4
 8002782:	4649      	mov	r1, r9
 8002784:	beab      	bkpt	0x00ab
 8002786:	4604      	mov	r4, r0
 8002788:	2c00      	cmp	r4, #0
 800278a:	db08      	blt.n	800279e <_swiopen+0x7e>
 800278c:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8002790:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8002794:	2300      	movs	r3, #0
 8002796:	f8c8 3004 	str.w	r3, [r8, #4]
 800279a:	462c      	mov	r4, r5
 800279c:	e014      	b.n	80027c8 <_swiopen+0xa8>
 800279e:	4620      	mov	r0, r4
 80027a0:	f7ff fe70 	bl	8002484 <error>
 80027a4:	4604      	mov	r4, r0
 80027a6:	e00f      	b.n	80027c8 <_swiopen+0xa8>
 80027a8:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 80027ac:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80027b0:	46e9      	mov	r9, sp
 80027b2:	d1cb      	bne.n	800274c <_swiopen+0x2c>
 80027b4:	4649      	mov	r1, r9
 80027b6:	4638      	mov	r0, r7
 80027b8:	f7ff ff95 	bl	80026e6 <_stat>
 80027bc:	3001      	adds	r0, #1
 80027be:	d0c5      	beq.n	800274c <_swiopen+0x2c>
 80027c0:	f000 f906 	bl	80029d0 <__errno>
 80027c4:	2311      	movs	r3, #17
 80027c6:	6003      	str	r3, [r0, #0]
 80027c8:	4620      	mov	r0, r4
 80027ca:	b017      	add	sp, #92	; 0x5c
 80027cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80027d0:	20000240 	.word	0x20000240

080027d4 <_get_semihosting_exts>:
 80027d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80027d8:	4606      	mov	r6, r0
 80027da:	460f      	mov	r7, r1
 80027dc:	482a      	ldr	r0, [pc, #168]	; (8002888 <_get_semihosting_exts+0xb4>)
 80027de:	2100      	movs	r1, #0
 80027e0:	4615      	mov	r5, r2
 80027e2:	f7ff ff9d 	bl	8002720 <_swiopen>
 80027e6:	462a      	mov	r2, r5
 80027e8:	4604      	mov	r4, r0
 80027ea:	2100      	movs	r1, #0
 80027ec:	4630      	mov	r0, r6
 80027ee:	f7ff f8b3 	bl	8001958 <memset>
 80027f2:	1c63      	adds	r3, r4, #1
 80027f4:	d016      	beq.n	8002824 <_get_semihosting_exts+0x50>
 80027f6:	4620      	mov	r0, r4
 80027f8:	f7ff fe2a 	bl	8002450 <findslot>
 80027fc:	f04f 080c 	mov.w	r8, #12
 8002800:	4681      	mov	r9, r0
 8002802:	4640      	mov	r0, r8
 8002804:	4649      	mov	r1, r9
 8002806:	beab      	bkpt	0x00ab
 8002808:	4680      	mov	r8, r0
 800280a:	4640      	mov	r0, r8
 800280c:	f7ff fe48 	bl	80024a0 <checkerror>
 8002810:	2803      	cmp	r0, #3
 8002812:	dd02      	ble.n	800281a <_get_semihosting_exts+0x46>
 8002814:	1ec3      	subs	r3, r0, #3
 8002816:	42ab      	cmp	r3, r5
 8002818:	dc08      	bgt.n	800282c <_get_semihosting_exts+0x58>
 800281a:	4620      	mov	r0, r4
 800281c:	f7ff feea 	bl	80025f4 <_close>
 8002820:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002824:	4620      	mov	r0, r4
 8002826:	b003      	add	sp, #12
 8002828:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800282c:	2204      	movs	r2, #4
 800282e:	eb0d 0102 	add.w	r1, sp, r2
 8002832:	4620      	mov	r0, r4
 8002834:	f7ff fe49 	bl	80024ca <_read>
 8002838:	2803      	cmp	r0, #3
 800283a:	ddee      	ble.n	800281a <_get_semihosting_exts+0x46>
 800283c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002840:	2b53      	cmp	r3, #83	; 0x53
 8002842:	d1ea      	bne.n	800281a <_get_semihosting_exts+0x46>
 8002844:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002848:	2b48      	cmp	r3, #72	; 0x48
 800284a:	d1e6      	bne.n	800281a <_get_semihosting_exts+0x46>
 800284c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002850:	2b46      	cmp	r3, #70	; 0x46
 8002852:	d1e2      	bne.n	800281a <_get_semihosting_exts+0x46>
 8002854:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002858:	2b42      	cmp	r3, #66	; 0x42
 800285a:	d1de      	bne.n	800281a <_get_semihosting_exts+0x46>
 800285c:	2201      	movs	r2, #1
 800285e:	4639      	mov	r1, r7
 8002860:	4620      	mov	r0, r4
 8002862:	f7ff fe4c 	bl	80024fe <_swilseek>
 8002866:	2800      	cmp	r0, #0
 8002868:	dbd7      	blt.n	800281a <_get_semihosting_exts+0x46>
 800286a:	462a      	mov	r2, r5
 800286c:	4631      	mov	r1, r6
 800286e:	4620      	mov	r0, r4
 8002870:	f7ff fe2b 	bl	80024ca <_read>
 8002874:	4605      	mov	r5, r0
 8002876:	4620      	mov	r0, r4
 8002878:	f7ff febc 	bl	80025f4 <_close>
 800287c:	4628      	mov	r0, r5
 800287e:	f7ff fe0f 	bl	80024a0 <checkerror>
 8002882:	4604      	mov	r4, r0
 8002884:	e7ce      	b.n	8002824 <_get_semihosting_exts+0x50>
 8002886:	bf00      	nop
 8002888:	08002aef 	.word	0x08002aef

0800288c <initialise_semihosting_exts>:
 800288c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800288e:	4d0a      	ldr	r5, [pc, #40]	; (80028b8 <initialise_semihosting_exts+0x2c>)
 8002890:	4c0a      	ldr	r4, [pc, #40]	; (80028bc <initialise_semihosting_exts+0x30>)
 8002892:	2100      	movs	r1, #0
 8002894:	2201      	movs	r2, #1
 8002896:	a801      	add	r0, sp, #4
 8002898:	6029      	str	r1, [r5, #0]
 800289a:	6022      	str	r2, [r4, #0]
 800289c:	f7ff ff9a 	bl	80027d4 <_get_semihosting_exts>
 80028a0:	2800      	cmp	r0, #0
 80028a2:	dd07      	ble.n	80028b4 <initialise_semihosting_exts+0x28>
 80028a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80028a8:	f003 0201 	and.w	r2, r3, #1
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	602a      	str	r2, [r5, #0]
 80028b2:	6023      	str	r3, [r4, #0]
 80028b4:	b003      	add	sp, #12
 80028b6:	bd30      	pop	{r4, r5, pc}
 80028b8:	20000078 	.word	0x20000078
 80028bc:	2000007c 	.word	0x2000007c

080028c0 <_has_ext_stdout_stderr>:
 80028c0:	b510      	push	{r4, lr}
 80028c2:	4c04      	ldr	r4, [pc, #16]	; (80028d4 <_has_ext_stdout_stderr+0x14>)
 80028c4:	6823      	ldr	r3, [r4, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	da01      	bge.n	80028ce <_has_ext_stdout_stderr+0xe>
 80028ca:	f7ff ffdf 	bl	800288c <initialise_semihosting_exts>
 80028ce:	6820      	ldr	r0, [r4, #0]
 80028d0:	bd10      	pop	{r4, pc}
 80028d2:	bf00      	nop
 80028d4:	2000007c 	.word	0x2000007c

080028d8 <initialise_monitor_handles>:
 80028d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028dc:	b085      	sub	sp, #20
 80028de:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8002984 <initialise_monitor_handles+0xac>
 80028e2:	f8cd 9004 	str.w	r9, [sp, #4]
 80028e6:	2303      	movs	r3, #3
 80028e8:	2400      	movs	r4, #0
 80028ea:	9303      	str	r3, [sp, #12]
 80028ec:	af01      	add	r7, sp, #4
 80028ee:	9402      	str	r4, [sp, #8]
 80028f0:	2501      	movs	r5, #1
 80028f2:	4628      	mov	r0, r5
 80028f4:	4639      	mov	r1, r7
 80028f6:	beab      	bkpt	0x00ab
 80028f8:	4605      	mov	r5, r0
 80028fa:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8002988 <initialise_monitor_handles+0xb0>
 80028fe:	4623      	mov	r3, r4
 8002900:	4c22      	ldr	r4, [pc, #136]	; (800298c <initialise_monitor_handles+0xb4>)
 8002902:	f8c8 5000 	str.w	r5, [r8]
 8002906:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800290a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800290e:	3301      	adds	r3, #1
 8002910:	2b14      	cmp	r3, #20
 8002912:	d1fa      	bne.n	800290a <initialise_monitor_handles+0x32>
 8002914:	f7ff ffd4 	bl	80028c0 <_has_ext_stdout_stderr>
 8002918:	4d1d      	ldr	r5, [pc, #116]	; (8002990 <initialise_monitor_handles+0xb8>)
 800291a:	b1d0      	cbz	r0, 8002952 <initialise_monitor_handles+0x7a>
 800291c:	f04f 0a03 	mov.w	sl, #3
 8002920:	2304      	movs	r3, #4
 8002922:	f8cd 9004 	str.w	r9, [sp, #4]
 8002926:	2601      	movs	r6, #1
 8002928:	f8cd a00c 	str.w	sl, [sp, #12]
 800292c:	9302      	str	r3, [sp, #8]
 800292e:	4630      	mov	r0, r6
 8002930:	4639      	mov	r1, r7
 8002932:	beab      	bkpt	0x00ab
 8002934:	4683      	mov	fp, r0
 8002936:	4b17      	ldr	r3, [pc, #92]	; (8002994 <initialise_monitor_handles+0xbc>)
 8002938:	f8cd 9004 	str.w	r9, [sp, #4]
 800293c:	f8c3 b000 	str.w	fp, [r3]
 8002940:	2308      	movs	r3, #8
 8002942:	f8cd a00c 	str.w	sl, [sp, #12]
 8002946:	9302      	str	r3, [sp, #8]
 8002948:	4630      	mov	r0, r6
 800294a:	4639      	mov	r1, r7
 800294c:	beab      	bkpt	0x00ab
 800294e:	4606      	mov	r6, r0
 8002950:	602e      	str	r6, [r5, #0]
 8002952:	682b      	ldr	r3, [r5, #0]
 8002954:	3301      	adds	r3, #1
 8002956:	bf02      	ittt	eq
 8002958:	4b0e      	ldreq	r3, [pc, #56]	; (8002994 <initialise_monitor_handles+0xbc>)
 800295a:	681b      	ldreq	r3, [r3, #0]
 800295c:	602b      	streq	r3, [r5, #0]
 800295e:	2600      	movs	r6, #0
 8002960:	f8d8 3000 	ldr.w	r3, [r8]
 8002964:	6023      	str	r3, [r4, #0]
 8002966:	6066      	str	r6, [r4, #4]
 8002968:	f7ff ffaa 	bl	80028c0 <_has_ext_stdout_stderr>
 800296c:	b130      	cbz	r0, 800297c <initialise_monitor_handles+0xa4>
 800296e:	4b09      	ldr	r3, [pc, #36]	; (8002994 <initialise_monitor_handles+0xbc>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002976:	682b      	ldr	r3, [r5, #0]
 8002978:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800297c:	b005      	add	sp, #20
 800297e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002982:	bf00      	nop
 8002984:	08002b05 	.word	0x08002b05
 8002988:	20000238 	.word	0x20000238
 800298c:	20000240 	.word	0x20000240
 8002990:	20000234 	.word	0x20000234
 8002994:	2000023c 	.word	0x2000023c

08002998 <_isatty>:
 8002998:	b570      	push	{r4, r5, r6, lr}
 800299a:	f7ff fd59 	bl	8002450 <findslot>
 800299e:	2509      	movs	r5, #9
 80029a0:	4604      	mov	r4, r0
 80029a2:	b920      	cbnz	r0, 80029ae <_isatty+0x16>
 80029a4:	f000 f814 	bl	80029d0 <__errno>
 80029a8:	6005      	str	r5, [r0, #0]
 80029aa:	4620      	mov	r0, r4
 80029ac:	bd70      	pop	{r4, r5, r6, pc}
 80029ae:	4628      	mov	r0, r5
 80029b0:	4621      	mov	r1, r4
 80029b2:	beab      	bkpt	0x00ab
 80029b4:	4604      	mov	r4, r0
 80029b6:	2c01      	cmp	r4, #1
 80029b8:	d0f7      	beq.n	80029aa <_isatty+0x12>
 80029ba:	f000 f809 	bl	80029d0 <__errno>
 80029be:	2400      	movs	r4, #0
 80029c0:	4605      	mov	r5, r0
 80029c2:	2613      	movs	r6, #19
 80029c4:	4630      	mov	r0, r6
 80029c6:	4621      	mov	r1, r4
 80029c8:	beab      	bkpt	0x00ab
 80029ca:	4606      	mov	r6, r0
 80029cc:	602e      	str	r6, [r5, #0]
 80029ce:	e7ec      	b.n	80029aa <_isatty+0x12>

080029d0 <__errno>:
 80029d0:	4b01      	ldr	r3, [pc, #4]	; (80029d8 <__errno+0x8>)
 80029d2:	6818      	ldr	r0, [r3, #0]
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	20000070 	.word	0x20000070

080029dc <_init>:
 80029dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029de:	bf00      	nop
 80029e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029e2:	bc08      	pop	{r3}
 80029e4:	469e      	mov	lr, r3
 80029e6:	4770      	bx	lr

080029e8 <_fini>:
 80029e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ea:	bf00      	nop
 80029ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ee:	bc08      	pop	{r3}
 80029f0:	469e      	mov	lr, r3
 80029f2:	4770      	bx	lr

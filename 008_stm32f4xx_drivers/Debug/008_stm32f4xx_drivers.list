
008_stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016f4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080018b8  080018b8  000118b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800192c  0800192c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  0800192c  0800192c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800192c  0800192c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800192c  0800192c  0001192c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001930  08001930  00011930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08001934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000018  0800194c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  0800194c  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 13 .debug_info   000023e6  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a09  00000000  00000000  0002246b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002f0  00000000  00000000  00022e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000227  00000000  00000000  00023168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000315f  00000000  00000000  0002338f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003189  00000000  00000000  000264ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b472  00000000  00000000  00029677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000b0c  00000000  00000000  00034aec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000355f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000018 	.word	0x20000018
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080018a0 	.word	0x080018a0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	080018a0 	.word	0x080018a0

08000204 <ds1307_init>:
static uint8_t bcd_to_binary(uint8_t value);


/* ds1307 Initialization */
// Returns Value of CH. If 1 then Initialization Failed else Success
uint8_t ds1307_init(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0

	// 1. Initialize the I2C GPIO Pins
	ds1307_i2c_pin_config();
 800020a:	f000 f90f 	bl	800042c <ds1307_i2c_pin_config>

	// 2. Initialize the I2C Peripheral
	ds1307_i2c_config();
 800020e:	f000 f949 	bl	80004a4 <ds1307_i2c_config>

	// 3. Enable the I2C Peripheral
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 8000212:	2101      	movs	r1, #1
 8000214:	4809      	ldr	r0, [pc, #36]	; (800023c <ds1307_init+0x38>)
 8000216:	f000 feed 	bl	8000ff4 <I2C_PeripheralControl>

	// 4. Make Clock Halt = 0;
	ds1307_write(0x00, DS1307_ADDR_SEC);
 800021a:	2100      	movs	r1, #0
 800021c:	2000      	movs	r0, #0
 800021e:	f000 f957 	bl	80004d0 <ds1307_write>

	// 5. Read Clock Halt Bit to see if Write was successful
	uint8_t clock_state = ds1307_read(DS1307_ADDR_SEC);
 8000222:	2000      	movs	r0, #0
 8000224:	f000 f970 	bl	8000508 <ds1307_read>
 8000228:	4603      	mov	r3, r0
 800022a:	71fb      	strb	r3, [r7, #7]

	// Clock State is the 7th bit
	return ((clock_state >> 7) & 0x1);
 800022c:	79fb      	ldrb	r3, [r7, #7]
 800022e:	09db      	lsrs	r3, r3, #7
 8000230:	b2db      	uxtb	r3, r3

}
 8000232:	4618      	mov	r0, r3
 8000234:	3708      	adds	r7, #8
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	40005400 	.word	0x40005400

08000240 <ds1307_set_current_time>:


/* Set / Get Time */
void ds1307_set_current_time(RTC_time_t *rtc_time){
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hours;

	// Set Seconds
	seconds = binary_to_bcd(rtc_time->seconds);
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	785b      	ldrb	r3, [r3, #1]
 800024c:	4618      	mov	r0, r3
 800024e:	f000 f979 	bl	8000544 <binary_to_bcd>
 8000252:	4603      	mov	r3, r0
 8000254:	73bb      	strb	r3, [r7, #14]
	seconds &= ~(1 << 7); // Make sure the clock is not halted
 8000256:	7bbb      	ldrb	r3, [r7, #14]
 8000258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800025c:	73bb      	strb	r3, [r7, #14]
	ds1307_write(seconds, DS1307_ADDR_SEC);
 800025e:	7bbb      	ldrb	r3, [r7, #14]
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f000 f934 	bl	80004d0 <ds1307_write>

	// Set Minutes
	ds1307_write(binary_to_bcd(rtc_time->minutes), DS1307_ADDR_MIN);
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	789b      	ldrb	r3, [r3, #2]
 800026c:	4618      	mov	r0, r3
 800026e:	f000 f969 	bl	8000544 <binary_to_bcd>
 8000272:	4603      	mov	r3, r0
 8000274:	2101      	movs	r1, #1
 8000276:	4618      	mov	r0, r3
 8000278:	f000 f92a 	bl	80004d0 <ds1307_write>

	// Set Hours
	hours = binary_to_bcd(rtc_time->hours);
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	4618      	mov	r0, r3
 8000282:	f000 f95f 	bl	8000544 <binary_to_bcd>
 8000286:	4603      	mov	r3, r0
 8000288:	73fb      	strb	r3, [r7, #15]
	if(rtc_time->time_format == TIME_FORMAT_24HRS){
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	78db      	ldrb	r3, [r3, #3]
 800028e:	2b02      	cmp	r3, #2
 8000290:	d104      	bne.n	800029c <ds1307_set_current_time+0x5c>
		hours &= ~(1 << 6);
 8000292:	7bfb      	ldrb	r3, [r7, #15]
 8000294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000298:	73fb      	strb	r3, [r7, #15]
 800029a:	e011      	b.n	80002c0 <ds1307_set_current_time+0x80>
	}else{
		// 12 Hour Format
		hours |= (1 << 6);
 800029c:	7bfb      	ldrb	r3, [r7, #15]
 800029e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002a2:	73fb      	strb	r3, [r7, #15]
		hours = (rtc_time->time_format == TIME_FORMAT_12HRS_PM) ? hours | (1 << 5) : hours & ~(1 << 5);
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	78db      	ldrb	r3, [r3, #3]
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d104      	bne.n	80002b6 <ds1307_set_current_time+0x76>
 80002ac:	7bfb      	ldrb	r3, [r7, #15]
 80002ae:	f043 0320 	orr.w	r3, r3, #32
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	e003      	b.n	80002be <ds1307_set_current_time+0x7e>
 80002b6:	7bfb      	ldrb	r3, [r7, #15]
 80002b8:	f023 0320 	bic.w	r3, r3, #32
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	73fb      	strb	r3, [r7, #15]
	}
	ds1307_write(hours, DS1307_ADDR_HRS);
 80002c0:	7bfb      	ldrb	r3, [r7, #15]
 80002c2:	2102      	movs	r1, #2
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 f903 	bl	80004d0 <ds1307_write>

}
 80002ca:	bf00      	nop
 80002cc:	3710      	adds	r7, #16
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}

080002d2 <ds1307_get_current_time>:

void ds1307_get_current_time(RTC_time_t *rtc_time){
 80002d2:	b580      	push	{r7, lr}
 80002d4:	b084      	sub	sp, #16
 80002d6:	af00      	add	r7, sp, #0
 80002d8:	6078      	str	r0, [r7, #4]
	// Get Seconds
	uint8_t seconds = ds1307_read(DS1307_ADDR_SEC);
 80002da:	2000      	movs	r0, #0
 80002dc:	f000 f914 	bl	8000508 <ds1307_read>
 80002e0:	4603      	mov	r3, r0
 80002e2:	73bb      	strb	r3, [r7, #14]
	seconds &= ~(1 << 7); // Clear the Clock Halt
 80002e4:	7bbb      	ldrb	r3, [r7, #14]
 80002e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80002ea:	73bb      	strb	r3, [r7, #14]
	rtc_time->seconds = bcd_to_binary(seconds);
 80002ec:	7bbb      	ldrb	r3, [r7, #14]
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 f954 	bl	800059c <bcd_to_binary>
 80002f4:	4603      	mov	r3, r0
 80002f6:	461a      	mov	r2, r3
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	705a      	strb	r2, [r3, #1]

	// Get Minutes
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 80002fc:	2001      	movs	r0, #1
 80002fe:	f000 f903 	bl	8000508 <ds1307_read>
 8000302:	4603      	mov	r3, r0
 8000304:	4618      	mov	r0, r3
 8000306:	f000 f949 	bl	800059c <bcd_to_binary>
 800030a:	4603      	mov	r3, r0
 800030c:	461a      	mov	r2, r3
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	709a      	strb	r2, [r3, #2]

	// Get Hours
	uint8_t hours = ds1307_read(DS1307_ADDR_HRS);
 8000312:	2002      	movs	r0, #2
 8000314:	f000 f8f8 	bl	8000508 <ds1307_read>
 8000318:	4603      	mov	r3, r0
 800031a:	73fb      	strb	r3, [r7, #15]
	if(hours & (1 << 6)){
 800031c:	7bfb      	ldrb	r3, [r7, #15]
 800031e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000322:	2b00      	cmp	r3, #0
 8000324:	d00f      	beq.n	8000346 <ds1307_get_current_time+0x74>
		// 12 Hour Format
		rtc_time->time_format = !((hours & (1 << 5)) == 0); // PM or AM
 8000326:	7bfb      	ldrb	r3, [r7, #15]
 8000328:	f003 0320 	and.w	r3, r3, #32
 800032c:	2b00      	cmp	r3, #0
 800032e:	bf14      	ite	ne
 8000330:	2301      	movne	r3, #1
 8000332:	2300      	moveq	r3, #0
 8000334:	b2db      	uxtb	r3, r3
 8000336:	461a      	mov	r2, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	70da      	strb	r2, [r3, #3]
		hours &= ~(0x3 << 5); // Clear 6 and 5 bit
 800033c:	7bfb      	ldrb	r3, [r7, #15]
 800033e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000342:	73fb      	strb	r3, [r7, #15]
 8000344:	e002      	b.n	800034c <ds1307_get_current_time+0x7a>
	}else{
		// 24 Hour Format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2202      	movs	r2, #2
 800034a:	70da      	strb	r2, [r3, #3]
	}
	rtc_time->hours = bcd_to_binary(hours);
 800034c:	7bfb      	ldrb	r3, [r7, #15]
 800034e:	4618      	mov	r0, r3
 8000350:	f000 f924 	bl	800059c <bcd_to_binary>
 8000354:	4603      	mov	r3, r0
 8000356:	461a      	mov	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	701a      	strb	r2, [r3, #0]
}
 800035c:	bf00      	nop
 800035e:	3710      	adds	r7, #16
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}

08000364 <ds1307_set_current_date>:


/* Set / Get Date */
void ds1307_set_current_date(RTC_date_t *rtc_date){
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	// Set Day
	ds1307_write(binary_to_bcd(rtc_date->day), DS1307_ADDR_DAY);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	78db      	ldrb	r3, [r3, #3]
 8000370:	4618      	mov	r0, r3
 8000372:	f000 f8e7 	bl	8000544 <binary_to_bcd>
 8000376:	4603      	mov	r3, r0
 8000378:	2103      	movs	r1, #3
 800037a:	4618      	mov	r0, r3
 800037c:	f000 f8a8 	bl	80004d0 <ds1307_write>

	// Set Date
	ds1307_write(binary_to_bcd(rtc_date->date), DS1307_ADDR_DATE);
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	4618      	mov	r0, r3
 8000386:	f000 f8dd 	bl	8000544 <binary_to_bcd>
 800038a:	4603      	mov	r3, r0
 800038c:	2104      	movs	r1, #4
 800038e:	4618      	mov	r0, r3
 8000390:	f000 f89e 	bl	80004d0 <ds1307_write>

	// Set Month
	ds1307_write(binary_to_bcd(rtc_date->month), DS1307_ADDR_MONTH);
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	785b      	ldrb	r3, [r3, #1]
 8000398:	4618      	mov	r0, r3
 800039a:	f000 f8d3 	bl	8000544 <binary_to_bcd>
 800039e:	4603      	mov	r3, r0
 80003a0:	2105      	movs	r1, #5
 80003a2:	4618      	mov	r0, r3
 80003a4:	f000 f894 	bl	80004d0 <ds1307_write>

	// Set Year
	ds1307_write(binary_to_bcd(rtc_date->year), DS1307_ADDR_YEAR);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	789b      	ldrb	r3, [r3, #2]
 80003ac:	4618      	mov	r0, r3
 80003ae:	f000 f8c9 	bl	8000544 <binary_to_bcd>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2106      	movs	r1, #6
 80003b6:	4618      	mov	r0, r3
 80003b8:	f000 f88a 	bl	80004d0 <ds1307_write>

}
 80003bc:	bf00      	nop
 80003be:	3708      	adds	r7, #8
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <ds1307_get_current_date>:

void ds1307_get_current_date(RTC_date_t *rtc_date){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
	// Get Day
	rtc_date->day = bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 80003cc:	2003      	movs	r0, #3
 80003ce:	f000 f89b 	bl	8000508 <ds1307_read>
 80003d2:	4603      	mov	r3, r0
 80003d4:	4618      	mov	r0, r3
 80003d6:	f000 f8e1 	bl	800059c <bcd_to_binary>
 80003da:	4603      	mov	r3, r0
 80003dc:	461a      	mov	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	70da      	strb	r2, [r3, #3]
	// Get Date
	rtc_date->date = bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 80003e2:	2004      	movs	r0, #4
 80003e4:	f000 f890 	bl	8000508 <ds1307_read>
 80003e8:	4603      	mov	r3, r0
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 f8d6 	bl	800059c <bcd_to_binary>
 80003f0:	4603      	mov	r3, r0
 80003f2:	461a      	mov	r2, r3
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	701a      	strb	r2, [r3, #0]
	// Get Month
	rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 80003f8:	2005      	movs	r0, #5
 80003fa:	f000 f885 	bl	8000508 <ds1307_read>
 80003fe:	4603      	mov	r3, r0
 8000400:	4618      	mov	r0, r3
 8000402:	f000 f8cb 	bl	800059c <bcd_to_binary>
 8000406:	4603      	mov	r3, r0
 8000408:	461a      	mov	r2, r3
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	705a      	strb	r2, [r3, #1]
	// Get Year
	rtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 800040e:	2006      	movs	r0, #6
 8000410:	f000 f87a 	bl	8000508 <ds1307_read>
 8000414:	4603      	mov	r3, r0
 8000416:	4618      	mov	r0, r3
 8000418:	f000 f8c0 	bl	800059c <bcd_to_binary>
 800041c:	4603      	mov	r3, r0
 800041e:	461a      	mov	r2, r3
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	709a      	strb	r2, [r3, #2]
}
 8000424:	bf00      	nop
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <ds1307_i2c_pin_config>:


/*
 * Private Helper Functions Definitions
 */
static void ds1307_i2c_pin_config(void){
 800042c:	b580      	push	{r7, lr}
 800042e:	b086      	sub	sp, #24
 8000430:	af00      	add	r7, sp, #0
	 * ALT Function Mode: 4
	 */

	/* I2C SCL */
	GPIO_Handle_t i2c_scl;
	memset(&i2c_scl, 0, sizeof(i2c_scl)); // Clear all the Variables
 8000432:	f107 030c 	add.w	r3, r7, #12
 8000436:	220c      	movs	r2, #12
 8000438:	2100      	movs	r1, #0
 800043a:	4618      	mov	r0, r3
 800043c:	f001 fa03 	bl	8001846 <memset>
	i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT;
 8000440:	4b17      	ldr	r3, [pc, #92]	; (80004a0 <ds1307_i2c_pin_config+0x74>)
 8000442:	60fb      	str	r3, [r7, #12]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 8000444:	2308      	movs	r3, #8
 8000446:	743b      	strb	r3, [r7, #16]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000448:	2301      	movs	r3, #1
 800044a:	74fb      	strb	r3, [r7, #19]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFUN;
 800044c:	2302      	movs	r3, #2
 800044e:	747b      	strb	r3, [r7, #17]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000450:	2304      	movs	r3, #4
 8000452:	757b      	strb	r3, [r7, #21]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000454:	2301      	movs	r3, #1
 8000456:	753b      	strb	r3, [r7, #20]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000458:	2302      	movs	r3, #2
 800045a:	74bb      	strb	r3, [r7, #18]
	GPIO_Init(&i2c_scl);
 800045c:	f107 030c 	add.w	r3, r7, #12
 8000460:	4618      	mov	r0, r3
 8000462:	f000 fb1f 	bl	8000aa4 <GPIO_Init>

	/* I2C SDA */
	GPIO_Handle_t i2c_sda;
	memset(&i2c_sda, 0, sizeof(i2c_sda)); // Clear all the Variables
 8000466:	463b      	mov	r3, r7
 8000468:	220c      	movs	r2, #12
 800046a:	2100      	movs	r1, #0
 800046c:	4618      	mov	r0, r3
 800046e:	f001 f9ea 	bl	8001846 <memset>
	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT;
 8000472:	4b0b      	ldr	r3, [pc, #44]	; (80004a0 <ds1307_i2c_pin_config+0x74>)
 8000474:	603b      	str	r3, [r7, #0]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 8000476:	2309      	movs	r3, #9
 8000478:	713b      	strb	r3, [r7, #4]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 800047a:	2301      	movs	r3, #1
 800047c:	71fb      	strb	r3, [r7, #7]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFUN;
 800047e:	2302      	movs	r3, #2
 8000480:	717b      	strb	r3, [r7, #5]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000482:	2304      	movs	r3, #4
 8000484:	727b      	strb	r3, [r7, #9]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000486:	2301      	movs	r3, #1
 8000488:	723b      	strb	r3, [r7, #8]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800048a:	2302      	movs	r3, #2
 800048c:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(&i2c_sda);
 800048e:	463b      	mov	r3, r7
 8000490:	4618      	mov	r0, r3
 8000492:	f000 fb07 	bl	8000aa4 <GPIO_Init>

}
 8000496:	bf00      	nop
 8000498:	3718      	adds	r7, #24
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40020400 	.word	0x40020400

080004a4 <ds1307_i2c_config>:


static void ds1307_i2c_config(void){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	g_ds1307I2cHandle.pI2Cx = DS1307_I2C;
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <ds1307_i2c_config+0x20>)
 80004aa:	4a07      	ldr	r2, [pc, #28]	; (80004c8 <ds1307_i2c_config+0x24>)
 80004ac:	601a      	str	r2, [r3, #0]
//	g_ds1307I2cHandle.I2C_Config.I2C_DeviceAddress = DS1307_I2C_ADDRESS;
	g_ds1307I2cHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 80004ae:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <ds1307_i2c_config+0x20>)
 80004b0:	4a06      	ldr	r2, [pc, #24]	; (80004cc <ds1307_i2c_config+0x28>)
 80004b2:	605a      	str	r2, [r3, #4]
	g_ds1307I2cHandle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 80004b4:	4b03      	ldr	r3, [pc, #12]	; (80004c4 <ds1307_i2c_config+0x20>)
 80004b6:	2201      	movs	r2, #1
 80004b8:	725a      	strb	r2, [r3, #9]
//	g_ds1307I2cHandle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;

	I2C_Init(&g_ds1307I2cHandle);
 80004ba:	4802      	ldr	r0, [pc, #8]	; (80004c4 <ds1307_i2c_config+0x20>)
 80004bc:	f000 fdb6 	bl	800102c <I2C_Init>
}
 80004c0:	bf00      	nop
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20000034 	.word	0x20000034
 80004c8:	40005400 	.word	0x40005400
 80004cc:	000186a0 	.word	0x000186a0

080004d0 <ds1307_write>:


static void ds1307_write(uint8_t value, uint8_t reg_addr){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af02      	add	r7, sp, #8
 80004d6:	4603      	mov	r3, r0
 80004d8:	460a      	mov	r2, r1
 80004da:	71fb      	strb	r3, [r7, #7]
 80004dc:	4613      	mov	r3, r2
 80004de:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = reg_addr;
 80004e0:	79bb      	ldrb	r3, [r7, #6]
 80004e2:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	737b      	strb	r3, [r7, #13]

	// Send Register Address then the Value
	I2C_MasterSendData(&g_ds1307I2cHandle, tx, 2, DS1307_I2C_ADDRESS, 0);
 80004e8:	f107 010c 	add.w	r1, r7, #12
 80004ec:	2300      	movs	r3, #0
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	2368      	movs	r3, #104	; 0x68
 80004f2:	2202      	movs	r2, #2
 80004f4:	4803      	ldr	r0, [pc, #12]	; (8000504 <ds1307_write+0x34>)
 80004f6:	f000 fe5b 	bl	80011b0 <I2C_MasterSendData>

}
 80004fa:	bf00      	nop
 80004fc:	3710      	adds	r7, #16
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000034 	.word	0x20000034

08000508 <ds1307_read>:


static uint8_t ds1307_read(uint8_t reg_addr){
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af02      	add	r7, sp, #8
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]

	uint8_t data;
	I2C_MasterSendData(&g_ds1307I2cHandle, &reg_addr, 1, DS1307_I2C_ADDRESS, 0);
 8000512:	1df9      	adds	r1, r7, #7
 8000514:	2300      	movs	r3, #0
 8000516:	9300      	str	r3, [sp, #0]
 8000518:	2368      	movs	r3, #104	; 0x68
 800051a:	2201      	movs	r2, #1
 800051c:	4808      	ldr	r0, [pc, #32]	; (8000540 <ds1307_read+0x38>)
 800051e:	f000 fe47 	bl	80011b0 <I2C_MasterSendData>
	I2C_MasterReceiveData(&g_ds1307I2cHandle, &data, 1, DS1307_I2C_ADDRESS, 0);
 8000522:	f107 010f 	add.w	r1, r7, #15
 8000526:	2300      	movs	r3, #0
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	2368      	movs	r3, #104	; 0x68
 800052c:	2201      	movs	r2, #1
 800052e:	4804      	ldr	r0, [pc, #16]	; (8000540 <ds1307_read+0x38>)
 8000530:	f000 fea5 	bl	800127e <I2C_MasterReceiveData>

	return data;
 8000534:	7bfb      	ldrb	r3, [r7, #15]
}
 8000536:	4618      	mov	r0, r3
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000034 	.word	0x20000034

08000544 <binary_to_bcd>:



static uint8_t binary_to_bcd(uint8_t value){
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	uint8_t m, n, bcd;
	if(value >= 10){
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	2b09      	cmp	r3, #9
 8000552:	d919      	bls.n	8000588 <binary_to_bcd+0x44>
		m = value / 10;
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	4a10      	ldr	r2, [pc, #64]	; (8000598 <binary_to_bcd+0x54>)
 8000558:	fba2 2303 	umull	r2, r3, r2, r3
 800055c:	08db      	lsrs	r3, r3, #3
 800055e:	73bb      	strb	r3, [r7, #14]
		n = value % 10;
 8000560:	79fa      	ldrb	r2, [r7, #7]
 8000562:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <binary_to_bcd+0x54>)
 8000564:	fba3 1302 	umull	r1, r3, r3, r2
 8000568:	08d9      	lsrs	r1, r3, #3
 800056a:	460b      	mov	r3, r1
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	440b      	add	r3, r1
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	1ad3      	subs	r3, r2, r3
 8000574:	737b      	strb	r3, [r7, #13]
		bcd = (uint8_t)((m << 4) | n);
 8000576:	7bbb      	ldrb	r3, [r7, #14]
 8000578:	011b      	lsls	r3, r3, #4
 800057a:	b25a      	sxtb	r2, r3
 800057c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000580:	4313      	orrs	r3, r2
 8000582:	b25b      	sxtb	r3, r3
 8000584:	73fb      	strb	r3, [r7, #15]
 8000586:	e001      	b.n	800058c <binary_to_bcd+0x48>
	}else{
		bcd = value;
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	73fb      	strb	r3, [r7, #15]
	}

	return bcd;
 800058c:	7bfb      	ldrb	r3, [r7, #15]

}
 800058e:	4618      	mov	r0, r3
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr
 8000598:	cccccccd 	.word	0xcccccccd

0800059c <bcd_to_binary>:


static uint8_t bcd_to_binary(uint8_t value){
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
	uint8_t m, n, binary;
	m = (uint8_t)(value >> 4) * 10;
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	091b      	lsrs	r3, r3, #4
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	461a      	mov	r2, r3
 80005ae:	0092      	lsls	r2, r2, #2
 80005b0:	4413      	add	r3, r2
 80005b2:	005b      	lsls	r3, r3, #1
 80005b4:	73fb      	strb	r3, [r7, #15]
	n = (value & (uint8_t)0x0F);
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	f003 030f 	and.w	r3, r3, #15
 80005bc:	73bb      	strb	r3, [r7, #14]
	binary = (uint8_t)(m + n);
 80005be:	7bfa      	ldrb	r2, [r7, #15]
 80005c0:	7bbb      	ldrb	r3, [r7, #14]
 80005c2:	4413      	add	r3, r2
 80005c4:	737b      	strb	r3, [r7, #13]
	return binary;
 80005c6:	7b7b      	ldrb	r3, [r7, #13]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3714      	adds	r7, #20
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr
	...

080005d4 <lcd_send_command>:
static void lcd_enable(void);
static void mdelay(uint32_t cnt);
static void udelay(uint32_t cnt);


void lcd_send_command(uint8_t cmd){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
	/* RS=0 for LCD Command
	 * R/^W=0 for write
	 */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	2100      	movs	r1, #0
 80005e2:	480c      	ldr	r0, [pc, #48]	; (8000614 <lcd_send_command+0x40>)
 80005e4:	f000 fc0a 	bl	8000dfc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2107      	movs	r1, #7
 80005ec:	4809      	ldr	r0, [pc, #36]	; (8000614 <lcd_send_command+0x40>)
 80005ee:	f000 fc05 	bl	8000dfc <GPIO_WriteToOutputPin>

	// Send the higher nibble
	write_4_bits(((cmd >> 4) & 0x0F));
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	091b      	lsrs	r3, r3, #4
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 f909 	bl	8000810 <write_4_bits>

	// Send the Lower Nibble
	write_4_bits((cmd & 0x0F));
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	b2db      	uxtb	r3, r3
 8000606:	4618      	mov	r0, r3
 8000608:	f000 f902 	bl	8000810 <write_4_bits>

}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40020800 	.word	0x40020800

08000618 <lcd_print_char>:


void lcd_print_char(uint8_t data){
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
	/* RS=1 for Data
	 * R/^W=0 for write
	 */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_SET);
 8000622:	2201      	movs	r2, #1
 8000624:	2100      	movs	r1, #0
 8000626:	480c      	ldr	r0, [pc, #48]	; (8000658 <lcd_print_char+0x40>)
 8000628:	f000 fbe8 	bl	8000dfc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2107      	movs	r1, #7
 8000630:	4809      	ldr	r0, [pc, #36]	; (8000658 <lcd_print_char+0x40>)
 8000632:	f000 fbe3 	bl	8000dfc <GPIO_WriteToOutputPin>

	// Send the higher nibble
	write_4_bits((data >> 4));
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	091b      	lsrs	r3, r3, #4
 800063a:	b2db      	uxtb	r3, r3
 800063c:	4618      	mov	r0, r3
 800063e:	f000 f8e7 	bl	8000810 <write_4_bits>

	// Send the Lower Nibble
	write_4_bits((data & 0x0F));
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	f003 030f 	and.w	r3, r3, #15
 8000648:	b2db      	uxtb	r3, r3
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f8e0 	bl	8000810 <write_4_bits>



}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40020800 	.word	0x40020800

0800065c <lcd_print_string>:


void lcd_print_string(char *message){
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	do{
		lcd_print_char((uint8_t)*message);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ffd5 	bl	8000618 <lcd_print_char>
		message++;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	3301      	adds	r3, #1
 8000672:	607b      	str	r3, [r7, #4]
	}while(*message != '\0');
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d1f3      	bne.n	8000664 <lcd_print_string+0x8>
}
 800067c:	bf00      	nop
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <lcd_set_cursor>:

/*
 * Row can be 1 or 2
 * Column can be 1 to 16
 */
void lcd_set_cursor(uint8_t row, uint8_t column){
 8000686:	b580      	push	{r7, lr}
 8000688:	b082      	sub	sp, #8
 800068a:	af00      	add	r7, sp, #0
 800068c:	4603      	mov	r3, r0
 800068e:	460a      	mov	r2, r1
 8000690:	71fb      	strb	r3, [r7, #7]
 8000692:	4613      	mov	r3, r2
 8000694:	71bb      	strb	r3, [r7, #6]
	column--;
 8000696:	79bb      	ldrb	r3, [r7, #6]
 8000698:	3b01      	subs	r3, #1
 800069a:	71bb      	strb	r3, [r7, #6]
	switch(row){
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d002      	beq.n	80006a8 <lcd_set_cursor+0x22>
 80006a2:	2b02      	cmp	r3, #2
 80006a4:	d009      	beq.n	80006ba <lcd_set_cursor+0x34>
	case 2:
		// Set Cursor to 2nd Row Address and add index
		lcd_send_command((column |= 0xC0));
		break;
	default:
		break;
 80006a6:	e011      	b.n	80006cc <lcd_set_cursor+0x46>
		lcd_send_command((column |= 0x80));
 80006a8:	79bb      	ldrb	r3, [r7, #6]
 80006aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006ae:	71bb      	strb	r3, [r7, #6]
 80006b0:	79bb      	ldrb	r3, [r7, #6]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff8e 	bl	80005d4 <lcd_send_command>
		break;
 80006b8:	e008      	b.n	80006cc <lcd_set_cursor+0x46>
		lcd_send_command((column |= 0xC0));
 80006ba:	79bb      	ldrb	r3, [r7, #6]
 80006bc:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80006c0:	71bb      	strb	r3, [r7, #6]
 80006c2:	79bb      	ldrb	r3, [r7, #6]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff ff85 	bl	80005d4 <lcd_send_command>
		break;
 80006ca:	bf00      	nop
	}
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <lcd_init>:


void lcd_init(void){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0

	// 1. Configure LCD GPIO Pins
	GPIO_Handle_t lcd_signal;

	// Common Configurations of pins
	lcd_signal.pGPIOx = LCD_GPIO_PORT;
 80006da:	4b42      	ldr	r3, [pc, #264]	; (80007e4 <lcd_init+0x110>)
 80006dc:	607b      	str	r3, [r7, #4]
	lcd_signal.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT;
 80006de:	2301      	movs	r3, #1
 80006e0:	727b      	strb	r3, [r7, #9]
	lcd_signal.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80006e2:	2300      	movs	r3, #0
 80006e4:	733b      	strb	r3, [r7, #12]
	lcd_signal.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80006e6:	2300      	movs	r3, #0
 80006e8:	72fb      	strb	r3, [r7, #11]
	lcd_signal.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80006ea:	2302      	movs	r3, #2
 80006ec:	72bb      	strb	r3, [r7, #10]

	// Initialize Each Pin
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RS;
 80006ee:	2300      	movs	r3, #0
 80006f0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 f9d5 	bl	8000aa4 <GPIO_Init>
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RW;
 80006fa:	2307      	movs	r3, #7
 80006fc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	4618      	mov	r0, r3
 8000702:	f000 f9cf 	bl	8000aa4 <GPIO_Init>
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_EN;
 8000706:	2308      	movs	r3, #8
 8000708:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	4618      	mov	r0, r3
 800070e:	f000 f9c9 	bl	8000aa4 <GPIO_Init>
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D4;
 8000712:	2309      	movs	r3, #9
 8000714:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f9c3 	bl	8000aa4 <GPIO_Init>
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D5;
 800071e:	2304      	movs	r3, #4
 8000720:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	4618      	mov	r0, r3
 8000726:	f000 f9bd 	bl	8000aa4 <GPIO_Init>
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D6;
 800072a:	2305      	movs	r3, #5
 800072c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	4618      	mov	r0, r3
 8000732:	f000 f9b7 	bl	8000aa4 <GPIO_Init>
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D7;
 8000736:	2306      	movs	r3, #6
 8000738:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	4618      	mov	r0, r3
 800073e:	f000 f9b1 	bl	8000aa4 <GPIO_Init>

	// Clear all the pins
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2100      	movs	r1, #0
 8000746:	4827      	ldr	r0, [pc, #156]	; (80007e4 <lcd_init+0x110>)
 8000748:	f000 fb58 	bl	8000dfc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	2107      	movs	r1, #7
 8000750:	4824      	ldr	r0, [pc, #144]	; (80007e4 <lcd_init+0x110>)
 8000752:	f000 fb53 	bl	8000dfc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2108      	movs	r1, #8
 800075a:	4822      	ldr	r0, [pc, #136]	; (80007e4 <lcd_init+0x110>)
 800075c:	f000 fb4e 	bl	8000dfc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	2109      	movs	r1, #9
 8000764:	481f      	ldr	r0, [pc, #124]	; (80007e4 <lcd_init+0x110>)
 8000766:	f000 fb49 	bl	8000dfc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	2104      	movs	r1, #4
 800076e:	481d      	ldr	r0, [pc, #116]	; (80007e4 <lcd_init+0x110>)
 8000770:	f000 fb44 	bl	8000dfc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	2105      	movs	r1, #5
 8000778:	481a      	ldr	r0, [pc, #104]	; (80007e4 <lcd_init+0x110>)
 800077a:	f000 fb3f 	bl	8000dfc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2106      	movs	r1, #6
 8000782:	4818      	ldr	r0, [pc, #96]	; (80007e4 <lcd_init+0x110>)
 8000784:	f000 fb3a 	bl	8000dfc <GPIO_WriteToOutputPin>


	// 2. Initialize the LCD

	// Wait 40milliseconds
	mdelay(40);
 8000788:	2028      	movs	r0, #40	; 0x28
 800078a:	f000 f88f 	bl	80008ac <mdelay>

	// Write 000011 to RS, R/^W, DB7, DB6, DB5, DB4
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	2100      	movs	r1, #0
 8000792:	4814      	ldr	r0, [pc, #80]	; (80007e4 <lcd_init+0x110>)
 8000794:	f000 fb32 	bl	8000dfc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	2107      	movs	r1, #7
 800079c:	4811      	ldr	r0, [pc, #68]	; (80007e4 <lcd_init+0x110>)
 800079e:	f000 fb2d 	bl	8000dfc <GPIO_WriteToOutputPin>
	write_4_bits(0x3); // 0011
 80007a2:	2003      	movs	r0, #3
 80007a4:	f000 f834 	bl	8000810 <write_4_bits>

	// Wait for more than 4.1ms
	mdelay(5);
 80007a8:	2005      	movs	r0, #5
 80007aa:	f000 f87f 	bl	80008ac <mdelay>
	udelay(150);
 80007ae:	2096      	movs	r0, #150	; 0x96
 80007b0:	f000 f894 	bl	80008dc <udelay>

	// Write 000011 to RS, R/^W, DB7, DB6, DB5, DB4
	write_4_bits(0x3); // 0011
 80007b4:	2003      	movs	r0, #3
 80007b6:	f000 f82b 	bl	8000810 <write_4_bits>

	// Wait for more than 1us
//	mdelay(1);

	// Write 000011 to RS, R/^W, DB7, DB6, DB5, DB4
	write_4_bits(0x3); // 0011
 80007ba:	2003      	movs	r0, #3
 80007bc:	f000 f828 	bl	8000810 <write_4_bits>

	// Write the following into DB7, DB6, DB5, DB4
	write_4_bits(0x2); // 0010
 80007c0:	2002      	movs	r0, #2
 80007c2:	f000 f825 	bl	8000810 <write_4_bits>
	lcd_send_command(LCD_CMD_4DL_2N_5X8F); // Function Set
 80007c6:	2028      	movs	r0, #40	; 0x28
 80007c8:	f7ff ff04 	bl	80005d4 <lcd_send_command>
	lcd_send_command(LCD_CMD_DON_CURON); // Display On Cursor On
 80007cc:	200e      	movs	r0, #14
 80007ce:	f7ff ff01 	bl	80005d4 <lcd_send_command>
	lcd_display_clear(); // Display Clear
 80007d2:	f000 f809 	bl	80007e8 <lcd_display_clear>
	lcd_send_command(LCD_CMD_INCADD); // Entry Mode Set
 80007d6:	2006      	movs	r0, #6
 80007d8:	f7ff fefc 	bl	80005d4 <lcd_send_command>


}
 80007dc:	bf00      	nop
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40020800 	.word	0x40020800

080007e8 <lcd_display_clear>:


void lcd_display_clear(void){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	lcd_send_command(LCD_CMD_DIS_CLEAR);
 80007ec:	2001      	movs	r0, #1
 80007ee:	f7ff fef1 	bl	80005d4 <lcd_send_command>
	mdelay(5);
 80007f2:	2005      	movs	r0, #5
 80007f4:	f000 f85a 	bl	80008ac <mdelay>
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}

080007fc <lcd_display_return_home>:

void lcd_display_return_home(void){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	lcd_send_command(LCD_CMD_DIS_RETURN_HOME);
 8000800:	2002      	movs	r0, #2
 8000802:	f7ff fee7 	bl	80005d4 <lcd_send_command>
	mdelay(5);
 8000806:	2005      	movs	r0, #5
 8000808:	f000 f850 	bl	80008ac <mdelay>
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}

08000810 <write_4_bits>:


// Writes 4 bits of Data to DB7, DB6, DB5, DB4
static void write_4_bits(uint8_t value){
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, (value & 0x1));
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	f003 0301 	and.w	r3, r3, #1
 8000820:	b2db      	uxtb	r3, r3
 8000822:	461a      	mov	r2, r3
 8000824:	2109      	movs	r1, #9
 8000826:	4815      	ldr	r0, [pc, #84]	; (800087c <write_4_bits+0x6c>)
 8000828:	f000 fae8 	bl	8000dfc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, ((value >> 1) & 0x1));
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	085b      	lsrs	r3, r3, #1
 8000830:	b2db      	uxtb	r3, r3
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	b2db      	uxtb	r3, r3
 8000838:	461a      	mov	r2, r3
 800083a:	2104      	movs	r1, #4
 800083c:	480f      	ldr	r0, [pc, #60]	; (800087c <write_4_bits+0x6c>)
 800083e:	f000 fadd 	bl	8000dfc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, ((value >> 2) & 0x1));
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	089b      	lsrs	r3, r3, #2
 8000846:	b2db      	uxtb	r3, r3
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	b2db      	uxtb	r3, r3
 800084e:	461a      	mov	r2, r3
 8000850:	2105      	movs	r1, #5
 8000852:	480a      	ldr	r0, [pc, #40]	; (800087c <write_4_bits+0x6c>)
 8000854:	f000 fad2 	bl	8000dfc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, ((value >> 3) & 0x1));
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	08db      	lsrs	r3, r3, #3
 800085c:	b2db      	uxtb	r3, r3
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	b2db      	uxtb	r3, r3
 8000864:	461a      	mov	r2, r3
 8000866:	2106      	movs	r1, #6
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <write_4_bits+0x6c>)
 800086a:	f000 fac7 	bl	8000dfc <GPIO_WriteToOutputPin>

	lcd_enable();
 800086e:	f000 f807 	bl	8000880 <lcd_enable>
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40020800 	.word	0x40020800

08000880 <lcd_enable>:


// Transitions the Enable line to make the LCD Read
static void lcd_enable(void){
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0

	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2108      	movs	r1, #8
 8000888:	4807      	ldr	r0, [pc, #28]	; (80008a8 <lcd_enable+0x28>)
 800088a:	f000 fab7 	bl	8000dfc <GPIO_WriteToOutputPin>
	udelay(10); // Wait 10us
 800088e:	200a      	movs	r0, #10
 8000890:	f000 f824 	bl	80008dc <udelay>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	2108      	movs	r1, #8
 8000898:	4803      	ldr	r0, [pc, #12]	; (80008a8 <lcd_enable+0x28>)
 800089a:	f000 faaf 	bl	8000dfc <GPIO_WriteToOutputPin>
	udelay(100); // Wait >37us
 800089e:	2064      	movs	r0, #100	; 0x64
 80008a0:	f000 f81c 	bl	80008dc <udelay>
}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40020800 	.word	0x40020800

080008ac <mdelay>:


static void mdelay(uint32_t cnt){
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0; i < (cnt * 1000); i++);
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	e002      	b.n	80008c0 <mdelay+0x14>
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	3301      	adds	r3, #1
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008c6:	fb02 f303 	mul.w	r3, r2, r3
 80008ca:	68fa      	ldr	r2, [r7, #12]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d3f4      	bcc.n	80008ba <mdelay+0xe>
}
 80008d0:	bf00      	nop
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr

080008dc <udelay>:

static void udelay(uint32_t cnt){
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0; i < (cnt * 1); i++);
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	e002      	b.n	80008f0 <udelay+0x14>
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	3301      	adds	r3, #1
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fa      	ldr	r2, [r7, #12]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d3f8      	bcc.n	80008ea <udelay+0xe>
}
 80008f8:	bf00      	nop
 80008fa:	bf00      	nop
 80008fc:	3714      	adds	r7, #20
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr

08000904 <GPIO_PeriClockControl>:
 * @return            -  void
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi){
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	460b      	mov	r3, r1
 800090e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){ // Enable
 8000910:	78fb      	ldrb	r3, [r7, #3]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d157      	bne.n	80009c6 <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA){
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a59      	ldr	r2, [pc, #356]	; (8000a80 <GPIO_PeriClockControl+0x17c>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d106      	bne.n	800092c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800091e:	4b59      	ldr	r3, [pc, #356]	; (8000a84 <GPIO_PeriClockControl+0x180>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a58      	ldr	r2, [pc, #352]	; (8000a84 <GPIO_PeriClockControl+0x180>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
		}else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}

}
 800092a:	e0a3      	b.n	8000a74 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB){
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a56      	ldr	r2, [pc, #344]	; (8000a88 <GPIO_PeriClockControl+0x184>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d106      	bne.n	8000942 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000934:	4b53      	ldr	r3, [pc, #332]	; (8000a84 <GPIO_PeriClockControl+0x180>)
 8000936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000938:	4a52      	ldr	r2, [pc, #328]	; (8000a84 <GPIO_PeriClockControl+0x180>)
 800093a:	f043 0302 	orr.w	r3, r3, #2
 800093e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000940:	e098      	b.n	8000a74 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC){
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a51      	ldr	r2, [pc, #324]	; (8000a8c <GPIO_PeriClockControl+0x188>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d106      	bne.n	8000958 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800094a:	4b4e      	ldr	r3, [pc, #312]	; (8000a84 <GPIO_PeriClockControl+0x180>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a4d      	ldr	r2, [pc, #308]	; (8000a84 <GPIO_PeriClockControl+0x180>)
 8000950:	f043 0304 	orr.w	r3, r3, #4
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000956:	e08d      	b.n	8000a74 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOD){
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a4d      	ldr	r2, [pc, #308]	; (8000a90 <GPIO_PeriClockControl+0x18c>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d106      	bne.n	800096e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000960:	4b48      	ldr	r3, [pc, #288]	; (8000a84 <GPIO_PeriClockControl+0x180>)
 8000962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000964:	4a47      	ldr	r2, [pc, #284]	; (8000a84 <GPIO_PeriClockControl+0x180>)
 8000966:	f043 0308 	orr.w	r3, r3, #8
 800096a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800096c:	e082      	b.n	8000a74 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE){
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a48      	ldr	r2, [pc, #288]	; (8000a94 <GPIO_PeriClockControl+0x190>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d106      	bne.n	8000984 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000976:	4b43      	ldr	r3, [pc, #268]	; (8000a84 <GPIO_PeriClockControl+0x180>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a42      	ldr	r2, [pc, #264]	; (8000a84 <GPIO_PeriClockControl+0x180>)
 800097c:	f043 0310 	orr.w	r3, r3, #16
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000982:	e077      	b.n	8000a74 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF){
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4a44      	ldr	r2, [pc, #272]	; (8000a98 <GPIO_PeriClockControl+0x194>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d106      	bne.n	800099a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800098c:	4b3d      	ldr	r3, [pc, #244]	; (8000a84 <GPIO_PeriClockControl+0x180>)
 800098e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000990:	4a3c      	ldr	r2, [pc, #240]	; (8000a84 <GPIO_PeriClockControl+0x180>)
 8000992:	f043 0320 	orr.w	r3, r3, #32
 8000996:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000998:	e06c      	b.n	8000a74 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOG){
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a3f      	ldr	r2, [pc, #252]	; (8000a9c <GPIO_PeriClockControl+0x198>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d106      	bne.n	80009b0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80009a2:	4b38      	ldr	r3, [pc, #224]	; (8000a84 <GPIO_PeriClockControl+0x180>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a37      	ldr	r2, [pc, #220]	; (8000a84 <GPIO_PeriClockControl+0x180>)
 80009a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009ae:	e061      	b.n	8000a74 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOH){
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a3b      	ldr	r2, [pc, #236]	; (8000aa0 <GPIO_PeriClockControl+0x19c>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d15d      	bne.n	8000a74 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 80009b8:	4b32      	ldr	r3, [pc, #200]	; (8000a84 <GPIO_PeriClockControl+0x180>)
 80009ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009bc:	4a31      	ldr	r2, [pc, #196]	; (8000a84 <GPIO_PeriClockControl+0x180>)
 80009be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009c4:	e056      	b.n	8000a74 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA){
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a2d      	ldr	r2, [pc, #180]	; (8000a80 <GPIO_PeriClockControl+0x17c>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d106      	bne.n	80009dc <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 80009ce:	4b2d      	ldr	r3, [pc, #180]	; (8000a84 <GPIO_PeriClockControl+0x180>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a2c      	ldr	r2, [pc, #176]	; (8000a84 <GPIO_PeriClockControl+0x180>)
 80009d4:	f023 0301 	bic.w	r3, r3, #1
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009da:	e04b      	b.n	8000a74 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB){
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a2a      	ldr	r2, [pc, #168]	; (8000a88 <GPIO_PeriClockControl+0x184>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d106      	bne.n	80009f2 <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 80009e4:	4b27      	ldr	r3, [pc, #156]	; (8000a84 <GPIO_PeriClockControl+0x180>)
 80009e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e8:	4a26      	ldr	r2, [pc, #152]	; (8000a84 <GPIO_PeriClockControl+0x180>)
 80009ea:	f023 0302 	bic.w	r3, r3, #2
 80009ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009f0:	e040      	b.n	8000a74 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC){
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a25      	ldr	r2, [pc, #148]	; (8000a8c <GPIO_PeriClockControl+0x188>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d106      	bne.n	8000a08 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 80009fa:	4b22      	ldr	r3, [pc, #136]	; (8000a84 <GPIO_PeriClockControl+0x180>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a21      	ldr	r2, [pc, #132]	; (8000a84 <GPIO_PeriClockControl+0x180>)
 8000a00:	f023 0304 	bic.w	r3, r3, #4
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a06:	e035      	b.n	8000a74 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOD){
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a21      	ldr	r2, [pc, #132]	; (8000a90 <GPIO_PeriClockControl+0x18c>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d106      	bne.n	8000a1e <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 8000a10:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <GPIO_PeriClockControl+0x180>)
 8000a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a14:	4a1b      	ldr	r2, [pc, #108]	; (8000a84 <GPIO_PeriClockControl+0x180>)
 8000a16:	f023 0308 	bic.w	r3, r3, #8
 8000a1a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a1c:	e02a      	b.n	8000a74 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE){
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a1c      	ldr	r2, [pc, #112]	; (8000a94 <GPIO_PeriClockControl+0x190>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d106      	bne.n	8000a34 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 8000a26:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <GPIO_PeriClockControl+0x180>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a16      	ldr	r2, [pc, #88]	; (8000a84 <GPIO_PeriClockControl+0x180>)
 8000a2c:	f023 0310 	bic.w	r3, r3, #16
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a32:	e01f      	b.n	8000a74 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF){
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a18      	ldr	r2, [pc, #96]	; (8000a98 <GPIO_PeriClockControl+0x194>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d106      	bne.n	8000a4a <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <GPIO_PeriClockControl+0x180>)
 8000a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a40:	4a10      	ldr	r2, [pc, #64]	; (8000a84 <GPIO_PeriClockControl+0x180>)
 8000a42:	f023 0320 	bic.w	r3, r3, #32
 8000a46:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a48:	e014      	b.n	8000a74 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOG){
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a13      	ldr	r2, [pc, #76]	; (8000a9c <GPIO_PeriClockControl+0x198>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d106      	bne.n	8000a60 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <GPIO_PeriClockControl+0x180>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <GPIO_PeriClockControl+0x180>)
 8000a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a5e:	e009      	b.n	8000a74 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOH){
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a0f      	ldr	r2, [pc, #60]	; (8000aa0 <GPIO_PeriClockControl+0x19c>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d105      	bne.n	8000a74 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <GPIO_PeriClockControl+0x180>)
 8000a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6c:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <GPIO_PeriClockControl+0x180>)
 8000a6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a72:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	40020000 	.word	0x40020000
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020400 	.word	0x40020400
 8000a8c:	40020800 	.word	0x40020800
 8000a90:	40020c00 	.word	0x40020c00
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40021400 	.word	0x40021400
 8000a9c:	40021800 	.word	0x40021800
 8000aa0:	40021c00 	.word	0x40021c00

08000aa4 <GPIO_Init>:


/*
 * Initialize and De-Initialize
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]

	// Enable Peripheral Clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff ff26 	bl	8000904 <GPIO_PeriClockControl>

	uint32_t temp = 0; // Temporary Register
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]

	// 1. Configure Mode of GPIO Pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	795b      	ldrb	r3, [r3, #5]
 8000ac0:	2b03      	cmp	r3, #3
 8000ac2:	d821      	bhi.n	8000b08 <GPIO_Init+0x64>
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	795b      	ldrb	r3, [r3, #5]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	791b      	ldrb	r3, [r3, #4]
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad4:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	791b      	ldrb	r3, [r3, #4]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	408b      	lsls	r3, r1
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	4619      	mov	r1, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	400a      	ands	r2, r1
 8000af0:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // Set
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	6819      	ldr	r1, [r3, #0]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	68fa      	ldr	r2, [r7, #12]
 8000afe:	430a      	orrs	r2, r1
 8000b00:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	e0b8      	b.n	8000c7a <GPIO_Init+0x1d6>
	}else{
		// TODO: Interrupt Mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	795b      	ldrb	r3, [r3, #5]
 8000b0c:	2b04      	cmp	r3, #4
 8000b0e:	d117      	bne.n	8000b40 <GPIO_Init+0x9c>
			// Configure the Falling Trigger Selection Register
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b10:	4b43      	ldr	r3, [pc, #268]	; (8000c20 <GPIO_Init+0x17c>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	7912      	ldrb	r2, [r2, #4]
 8000b18:	4611      	mov	r1, r2
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	408a      	lsls	r2, r1
 8000b1e:	4611      	mov	r1, r2
 8000b20:	4a3f      	ldr	r2, [pc, #252]	; (8000c20 <GPIO_Init+0x17c>)
 8000b22:	430b      	orrs	r3, r1
 8000b24:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear RTSR
 8000b26:	4b3e      	ldr	r3, [pc, #248]	; (8000c20 <GPIO_Init+0x17c>)
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	7912      	ldrb	r2, [r2, #4]
 8000b2e:	4611      	mov	r1, r2
 8000b30:	2201      	movs	r2, #1
 8000b32:	408a      	lsls	r2, r1
 8000b34:	43d2      	mvns	r2, r2
 8000b36:	4611      	mov	r1, r2
 8000b38:	4a39      	ldr	r2, [pc, #228]	; (8000c20 <GPIO_Init+0x17c>)
 8000b3a:	400b      	ands	r3, r1
 8000b3c:	6093      	str	r3, [r2, #8]
 8000b3e:	e035      	b.n	8000bac <GPIO_Init+0x108>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	795b      	ldrb	r3, [r3, #5]
 8000b44:	2b05      	cmp	r3, #5
 8000b46:	d117      	bne.n	8000b78 <GPIO_Init+0xd4>
			// Configure the Rising Trigger Selection Register
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b48:	4b35      	ldr	r3, [pc, #212]	; (8000c20 <GPIO_Init+0x17c>)
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	7912      	ldrb	r2, [r2, #4]
 8000b50:	4611      	mov	r1, r2
 8000b52:	2201      	movs	r2, #1
 8000b54:	408a      	lsls	r2, r1
 8000b56:	4611      	mov	r1, r2
 8000b58:	4a31      	ldr	r2, [pc, #196]	; (8000c20 <GPIO_Init+0x17c>)
 8000b5a:	430b      	orrs	r3, r1
 8000b5c:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear FTSR
 8000b5e:	4b30      	ldr	r3, [pc, #192]	; (8000c20 <GPIO_Init+0x17c>)
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	7912      	ldrb	r2, [r2, #4]
 8000b66:	4611      	mov	r1, r2
 8000b68:	2201      	movs	r2, #1
 8000b6a:	408a      	lsls	r2, r1
 8000b6c:	43d2      	mvns	r2, r2
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4a2b      	ldr	r2, [pc, #172]	; (8000c20 <GPIO_Init+0x17c>)
 8000b72:	400b      	ands	r3, r1
 8000b74:	60d3      	str	r3, [r2, #12]
 8000b76:	e019      	b.n	8000bac <GPIO_Init+0x108>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	795b      	ldrb	r3, [r3, #5]
 8000b7c:	2b06      	cmp	r3, #6
 8000b7e:	d115      	bne.n	8000bac <GPIO_Init+0x108>
			// Configure Both Falling and Rising
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b80:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <GPIO_Init+0x17c>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	7912      	ldrb	r2, [r2, #4]
 8000b88:	4611      	mov	r1, r2
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	408a      	lsls	r2, r1
 8000b8e:	4611      	mov	r1, r2
 8000b90:	4a23      	ldr	r2, [pc, #140]	; (8000c20 <GPIO_Init+0x17c>)
 8000b92:	430b      	orrs	r3, r1
 8000b94:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b96:	4b22      	ldr	r3, [pc, #136]	; (8000c20 <GPIO_Init+0x17c>)
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	7912      	ldrb	r2, [r2, #4]
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	408a      	lsls	r2, r1
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	4a1e      	ldr	r2, [pc, #120]	; (8000c20 <GPIO_Init+0x17c>)
 8000ba8:	430b      	orrs	r3, r1
 8000baa:	6093      	str	r3, [r2, #8]
		}

		// Configure the GPIO port Selection in SYSCFG_EXTICR
		uint8_t ExtiCR_Number = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	791b      	ldrb	r3, [r3, #4]
 8000bb0:	089b      	lsrs	r3, r3, #2
 8000bb2:	72fb      	strb	r3, [r7, #11]
		uint8_t ExtiCR_ShiftOffset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	791b      	ldrb	r3, [r3, #4]
 8000bb8:	f003 0303 	and.w	r3, r3, #3
 8000bbc:	72bb      	strb	r3, [r7, #10]
		uint8_t portcode = GPIO_BASEADDR_TO_PORTCODE(pGPIOHandle->pGPIOx);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a18      	ldr	r2, [pc, #96]	; (8000c24 <GPIO_Init+0x180>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d03b      	beq.n	8000c40 <GPIO_Init+0x19c>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a16      	ldr	r2, [pc, #88]	; (8000c28 <GPIO_Init+0x184>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d024      	beq.n	8000c1c <GPIO_Init+0x178>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a15      	ldr	r2, [pc, #84]	; (8000c2c <GPIO_Init+0x188>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d01d      	beq.n	8000c18 <GPIO_Init+0x174>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a13      	ldr	r2, [pc, #76]	; (8000c30 <GPIO_Init+0x18c>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d016      	beq.n	8000c14 <GPIO_Init+0x170>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <GPIO_Init+0x190>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d00f      	beq.n	8000c10 <GPIO_Init+0x16c>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a10      	ldr	r2, [pc, #64]	; (8000c38 <GPIO_Init+0x194>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d008      	beq.n	8000c0c <GPIO_Init+0x168>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <GPIO_Init+0x198>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d101      	bne.n	8000c08 <GPIO_Init+0x164>
 8000c04:	2306      	movs	r3, #6
 8000c06:	e01c      	b.n	8000c42 <GPIO_Init+0x19e>
 8000c08:	2300      	movs	r3, #0
 8000c0a:	e01a      	b.n	8000c42 <GPIO_Init+0x19e>
 8000c0c:	2305      	movs	r3, #5
 8000c0e:	e018      	b.n	8000c42 <GPIO_Init+0x19e>
 8000c10:	2304      	movs	r3, #4
 8000c12:	e016      	b.n	8000c42 <GPIO_Init+0x19e>
 8000c14:	2303      	movs	r3, #3
 8000c16:	e014      	b.n	8000c42 <GPIO_Init+0x19e>
 8000c18:	2302      	movs	r3, #2
 8000c1a:	e012      	b.n	8000c42 <GPIO_Init+0x19e>
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e010      	b.n	8000c42 <GPIO_Init+0x19e>
 8000c20:	40013c00 	.word	0x40013c00
 8000c24:	40020000 	.word	0x40020000
 8000c28:	40020400 	.word	0x40020400
 8000c2c:	40020800 	.word	0x40020800
 8000c30:	40020c00 	.word	0x40020c00
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40021400 	.word	0x40021400
 8000c3c:	40021800 	.word	0x40021800
 8000c40:	2300      	movs	r3, #0
 8000c42:	727b      	strb	r3, [r7, #9]
		SYSCFG_PCLK_EN();
 8000c44:	4b6a      	ldr	r3, [pc, #424]	; (8000df0 <GPIO_Init+0x34c>)
 8000c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c48:	4a69      	ldr	r2, [pc, #420]	; (8000df0 <GPIO_Init+0x34c>)
 8000c4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c4e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[ExtiCR_Number] = portcode << (ExtiCR_ShiftOffset * 4);
 8000c50:	7a7a      	ldrb	r2, [r7, #9]
 8000c52:	7abb      	ldrb	r3, [r7, #10]
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	fa02 f103 	lsl.w	r1, r2, r3
 8000c5a:	4a66      	ldr	r2, [pc, #408]	; (8000df4 <GPIO_Init+0x350>)
 8000c5c:	7afb      	ldrb	r3, [r7, #11]
 8000c5e:	3302      	adds	r3, #2
 8000c60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c64:	4b64      	ldr	r3, [pc, #400]	; (8000df8 <GPIO_Init+0x354>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	7912      	ldrb	r2, [r2, #4]
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	2201      	movs	r2, #1
 8000c70:	408a      	lsls	r2, r1
 8000c72:	4611      	mov	r1, r2
 8000c74:	4a60      	ldr	r2, [pc, #384]	; (8000df8 <GPIO_Init+0x354>)
 8000c76:	430b      	orrs	r3, r1
 8000c78:	6013      	str	r3, [r2, #0]
	}

	// 2. Configure Speed
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	799b      	ldrb	r3, [r3, #6]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	791b      	ldrb	r3, [r3, #4]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	689a      	ldr	r2, [r3, #8]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	791b      	ldrb	r3, [r3, #4]
 8000c96:	4619      	mov	r1, r3
 8000c98:	2303      	movs	r3, #3
 8000c9a:	408b      	lsls	r3, r1
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	400a      	ands	r2, r1
 8000ca6:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	6899      	ldr	r1, [r3, #8]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60fb      	str	r3, [r7, #12]

	// 3. Configure Pull-up Pull-down Settings
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	79db      	ldrb	r3, [r3, #7]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	791b      	ldrb	r3, [r3, #4]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	68da      	ldr	r2, [r3, #12]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	791b      	ldrb	r3, [r3, #4]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	2303      	movs	r3, #3
 8000cdc:	408b      	lsls	r3, r1
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	400a      	ands	r2, r1
 8000ce8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	68d9      	ldr	r1, [r3, #12]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	68fa      	ldr	r2, [r7, #12]
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]

	// 4. Configure the Output Type
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	7a1b      	ldrb	r3, [r3, #8]
 8000d02:	461a      	mov	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	791b      	ldrb	r3, [r3, #4]
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	685a      	ldr	r2, [r3, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	791b      	ldrb	r3, [r3, #4]
 8000d18:	4619      	mov	r1, r3
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	408b      	lsls	r3, r1
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	4619      	mov	r1, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	400a      	ands	r2, r1
 8000d28:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	6859      	ldr	r1, [r3, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	430a      	orrs	r2, r1
 8000d38:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]

	// 5. Configure Alternate Functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFUN){
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	795b      	ldrb	r3, [r3, #5]
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d150      	bne.n	8000de8 <GPIO_Init+0x344>
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= GPIO_PIN_NO_7){
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	791b      	ldrb	r3, [r3, #4]
 8000d4a:	2b07      	cmp	r3, #7
 8000d4c:	d826      	bhi.n	8000d9c <GPIO_Init+0x2f8>
				// AFRL Registers
				temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	7a5b      	ldrb	r3, [r3, #9]
 8000d52:	461a      	mov	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	791b      	ldrb	r3, [r3, #4]
 8000d58:	f003 0307 	and.w	r3, r3, #7
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->AFRL &= ~(0xF << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8))); // Clear
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	6a1a      	ldr	r2, [r3, #32]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	791b      	ldrb	r3, [r3, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	210f      	movs	r1, #15
 8000d76:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	400a      	ands	r2, r1
 8000d84:	621a      	str	r2, [r3, #32]
				pGPIOHandle->pGPIOx->AFRL |= temp;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	6a19      	ldr	r1, [r3, #32]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	68fa      	ldr	r2, [r7, #12]
 8000d92:	430a      	orrs	r2, r1
 8000d94:	621a      	str	r2, [r3, #32]
				temp = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->AFRH |= temp;
				temp = 0;
			}
	}

}
 8000d9a:	e025      	b.n	8000de8 <GPIO_Init+0x344>
				temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	7a5b      	ldrb	r3, [r3, #9]
 8000da0:	461a      	mov	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	791b      	ldrb	r3, [r3, #4]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->AFRH &= ~(0xF << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8))); // Clear
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	791b      	ldrb	r3, [r3, #4]
 8000dbc:	f003 0307 	and.w	r3, r3, #7
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	210f      	movs	r1, #15
 8000dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	4619      	mov	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	400a      	ands	r2, r1
 8000dd2:	625a      	str	r2, [r3, #36]	; 0x24
				pGPIOHandle->pGPIOx->AFRH |= temp;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	430a      	orrs	r2, r1
 8000de2:	625a      	str	r2, [r3, #36]	; 0x24
				temp = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
}
 8000de8:	bf00      	nop
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40013800 	.word	0x40013800
 8000df8:	40013c00 	.word	0x40013c00

08000dfc <GPIO_WriteToOutputPin>:
	value = (uint16_t)pGPIOx->IDR;
	return value;

}

void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value){
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	70fb      	strb	r3, [r7, #3]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET){
 8000e0c:	78bb      	ldrb	r3, [r7, #2]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d109      	bne.n	8000e26 <GPIO_WriteToOutputPin+0x2a>
		// Set 1
		pGPIOx->ODR |= (1 << PinNumber);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	78fa      	ldrb	r2, [r7, #3]
 8000e18:	2101      	movs	r1, #1
 8000e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	615a      	str	r2, [r3, #20]
	}else{
		// Set 0
		pGPIOx->ODR &= ~(1 << PinNumber);
	}

}
 8000e24:	e009      	b.n	8000e3a <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	695b      	ldr	r3, [r3, #20]
 8000e2a:	78fa      	ldrb	r2, [r7, #3]
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e32:	43d2      	mvns	r2, r2
 8000e34:	401a      	ands	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	615a      	str	r2, [r3, #20]
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr

08000e44 <I2C_GenerateStartCondition>:
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle);
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle);
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle);

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	601a      	str	r2, [r3, #0]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr

08000e62 <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000e6e:	78fb      	ldrb	r3, [r7, #3]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 8000e74:	78fb      	ldrb	r3, [r7, #3]
 8000e76:	f023 0301 	bic.w	r3, r3, #1
 8000e7a:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000e7c:	78fa      	ldrb	r2, [r7, #3]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	611a      	str	r2, [r3, #16]
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr

08000e8c <I2C_ExecuteAddressPhaseRead>:


static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	460b      	mov	r3, r1
 8000e96:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000e98:	78fb      	ldrb	r3, [r7, #3]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 8000e9e:	78fb      	ldrb	r3, [r7, #3]
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000ea6:	78fa      	ldrb	r2, [r7, #3]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	611a      	str	r2, [r3, #16]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr

08000eb6 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle){
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b084      	sub	sp, #16
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	// Check for Device Mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d01f      	beq.n	8000f0c <I2C_ClearADDRFlag+0x56>
		// Master
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	7f1b      	ldrb	r3, [r3, #28]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d112      	bne.n	8000efa <I2C_ClearADDRFlag+0x44>
			if(pI2CHandle->RxSize == 1){
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a1b      	ldr	r3, [r3, #32]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d11f      	bne.n	8000f1c <I2C_ClearADDRFlag+0x66>
				// Disable the ACK
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 fa5d 	bl	80013a2 <I2C_ManageAcking>

				// Clear the ADDR Flag (read SR1 and SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	60fb      	str	r3, [r7, #12]
		// Clear the ADDR Flag (read SR1 and SR2)
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}
}
 8000ef8:	e010      	b.n	8000f1c <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	695b      	ldr	r3, [r3, #20]
 8000f00:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	60fb      	str	r3, [r7, #12]
}
 8000f0a:	e007      	b.n	8000f1c <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	60fb      	str	r3, [r7, #12]
}
 8000f1c:	bf00      	nop
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <I2C_GenerateStopCondition>:

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	601a      	str	r2, [r3, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr
	...

08000f44 <I2C_PeriClockControl>:
	}
}


// Peripheral Clock Setup
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d120      	bne.n	8000f98 <I2C_PeriClockControl+0x54>
		// Enable
		if(pI2Cx == I2C1){
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a22      	ldr	r2, [pc, #136]	; (8000fe4 <I2C_PeriClockControl+0xa0>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d106      	bne.n	8000f6c <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 8000f5e:	4b22      	ldr	r3, [pc, #136]	; (8000fe8 <I2C_PeriClockControl+0xa4>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	4a21      	ldr	r2, [pc, #132]	; (8000fe8 <I2C_PeriClockControl+0xa4>)
 8000f64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f68:	6413      	str	r3, [r2, #64]	; 0x40
			I2C2_PCLK_DI();
		}else if(pI2Cx == I2C3){
			I2C3_PCLK_DI();
		}
	}
}
 8000f6a:	e035      	b.n	8000fd8 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C2){
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a1f      	ldr	r2, [pc, #124]	; (8000fec <I2C_PeriClockControl+0xa8>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d106      	bne.n	8000f82 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000f74:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <I2C_PeriClockControl+0xa4>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	4a1b      	ldr	r2, [pc, #108]	; (8000fe8 <I2C_PeriClockControl+0xa4>)
 8000f7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f7e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f80:	e02a      	b.n	8000fd8 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C3){
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a1a      	ldr	r2, [pc, #104]	; (8000ff0 <I2C_PeriClockControl+0xac>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d126      	bne.n	8000fd8 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000f8a:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <I2C_PeriClockControl+0xa4>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	4a16      	ldr	r2, [pc, #88]	; (8000fe8 <I2C_PeriClockControl+0xa4>)
 8000f90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f94:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f96:	e01f      	b.n	8000fd8 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1){
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <I2C_PeriClockControl+0xa0>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d106      	bne.n	8000fae <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <I2C_PeriClockControl+0xa4>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	4a10      	ldr	r2, [pc, #64]	; (8000fe8 <I2C_PeriClockControl+0xa4>)
 8000fa6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000faa:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000fac:	e014      	b.n	8000fd8 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C2){
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <I2C_PeriClockControl+0xa8>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d106      	bne.n	8000fc4 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <I2C_PeriClockControl+0xa4>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <I2C_PeriClockControl+0xa4>)
 8000fbc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000fc0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000fc2:	e009      	b.n	8000fd8 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C3){
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <I2C_PeriClockControl+0xac>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d105      	bne.n	8000fd8 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <I2C_PeriClockControl+0xa4>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <I2C_PeriClockControl+0xa4>)
 8000fd2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000fd6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40005400 	.word	0x40005400
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40005800 	.word	0x40005800
 8000ff0:	40005c00 	.word	0x40005c00

08000ff4 <I2C_PeripheralControl>:

// I2C Peripheral Control
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d106      	bne.n	8001014 <I2C_PeripheralControl+0x20>
		// Enable
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f043 0201 	orr.w	r2, r3, #1
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	601a      	str	r2, [r3, #0]
	}else{
		// Disable
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}

}
 8001012:	e005      	b.n	8001020 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f023 0201 	bic.w	r2, r3, #1
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	601a      	str	r2, [r3, #0]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
	...

0800102c <I2C_Init>:


void I2C_Init(I2C_Handle_t *pI2C_Handle){
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]

	// Enable the Clock for the I2Cx Peripheral
	I2C_PeriClockControl(pI2C_Handle->pI2Cx, ENABLE);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2101      	movs	r1, #1
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ff80 	bl	8000f44 <I2C_PeriClockControl>

	// ACK Control Bit
	tempreg |= pI2C_Handle->I2C_Config.I2C_ACKControl << 10;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	7a5b      	ldrb	r3, [r3, #9]
 8001048:	029b      	lsls	r3, r3, #10
 800104a:	461a      	mov	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4313      	orrs	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
	pI2C_Handle->pI2Cx->CR1 = tempreg;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	601a      	str	r2, [r3, #0]

	// Configure the FREQ field of CR2
	tempreg = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
	tempreg |= (RCC_GetPCLK1Value() / 1000000U); // Divide by 1MHz to only get 16 instead of 16MHz
 800105e:	f000 f9d9 	bl	8001414 <RCC_GetPCLK1Value>
 8001062:	4603      	mov	r3, r0
 8001064:	4a4f      	ldr	r2, [pc, #316]	; (80011a4 <I2C_Init+0x178>)
 8001066:	fba2 2303 	umull	r2, r3, r2, r3
 800106a:	0c9b      	lsrs	r3, r3, #18
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	4313      	orrs	r3, r2
 8001070:	60fb      	str	r3, [r7, #12]
	pI2C_Handle->pI2Cx->CR2 = (tempreg & 0x3F);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800107c:	605a      	str	r2, [r3, #4]

	// Device Own Address
	tempreg = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2C_Handle->I2C_Config.I2C_DeviceAddress << 1;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	7a1b      	ldrb	r3, [r3, #8]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	461a      	mov	r2, r3
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4313      	orrs	r3, r2
 800108e:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001096:	60fb      	str	r3, [r7, #12]
	pI2C_Handle->pI2Cx->OAR1 |= tempreg;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6899      	ldr	r1, [r3, #8]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	430a      	orrs	r2, r1
 80010a6:	609a      	str	r2, [r3, #8]

	// Clock Control Calculations
	uint16_t ccr_value = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
	if(pI2C_Handle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	4a3c      	ldr	r2, [pc, #240]	; (80011a8 <I2C_Init+0x17c>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d813      	bhi.n	80010e2 <I2C_Init+0xb6>
		// Standard Mode
		tempreg &= ~(1 << 15);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80010c0:	60fb      	str	r3, [r7, #12]
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2C_Handle->I2C_Config.I2C_SCLSpeed);
 80010c2:	f000 f9a7 	bl	8001414 <RCC_GetPCLK1Value>
 80010c6:	4602      	mov	r2, r0
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d2:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 80010d4:	897b      	ldrh	r3, [r7, #10]
 80010d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	4313      	orrs	r3, r2
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	e02d      	b.n	800113e <I2C_Init+0x112>
	}else{
		// Fast Mode
		tempreg |= (1 << 15);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010e8:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2C_Handle->I2C_Config.I2C_FMDutyCycle << 14);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	7a9b      	ldrb	r3, [r3, #10]
 80010ee:	039b      	lsls	r3, r3, #14
 80010f0:	461a      	mov	r2, r3
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	60fb      	str	r3, [r7, #12]
		if(pI2C_Handle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	7a9b      	ldrb	r3, [r3, #10]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d10b      	bne.n	8001118 <I2C_Init+0xec>
			ccr_value = RCC_GetPCLK1Value() / (3 * pI2C_Handle->I2C_Config.I2C_SCLSpeed);
 8001100:	f000 f988 	bl	8001414 <RCC_GetPCLK1Value>
 8001104:	4601      	mov	r1, r0
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	4613      	mov	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4413      	add	r3, r2
 8001110:	fbb1 f3f3 	udiv	r3, r1, r3
 8001114:	817b      	strh	r3, [r7, #10]
 8001116:	e00c      	b.n	8001132 <I2C_Init+0x106>
		}else{
			ccr_value = RCC_GetPCLK1Value() / (25 * pI2C_Handle->I2C_Config.I2C_SCLSpeed);
 8001118:	f000 f97c 	bl	8001414 <RCC_GetPCLK1Value>
 800111c:	4601      	mov	r1, r0
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	4613      	mov	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	4413      	add	r3, r2
 8001128:	009a      	lsls	r2, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001130:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8001132:	897b      	ldrh	r3, [r7, #10]
 8001134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001138:	68fa      	ldr	r2, [r7, #12]
 800113a:	4313      	orrs	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
	}

	pI2C_Handle->pI2Cx->CCR |= tempreg;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	69d9      	ldr	r1, [r3, #28]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	430a      	orrs	r2, r1
 800114c:	61da      	str	r2, [r3, #28]

	// TRISE
	if(pI2C_Handle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	4a15      	ldr	r2, [pc, #84]	; (80011a8 <I2C_Init+0x17c>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d809      	bhi.n	800116c <I2C_Init+0x140>
		// Standard Mode
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8001158:	f000 f95c 	bl	8001414 <RCC_GetPCLK1Value>
 800115c:	4603      	mov	r3, r0
 800115e:	4a11      	ldr	r2, [pc, #68]	; (80011a4 <I2C_Init+0x178>)
 8001160:	fba2 2303 	umull	r2, r3, r2, r3
 8001164:	0c9b      	lsrs	r3, r3, #18
 8001166:	3301      	adds	r3, #1
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	e00d      	b.n	8001188 <I2C_Init+0x15c>
	}else{
		// Fast Mode
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 800116c:	f000 f952 	bl	8001414 <RCC_GetPCLK1Value>
 8001170:	4603      	mov	r3, r0
 8001172:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001176:	fb02 f303 	mul.w	r3, r2, r3
 800117a:	0a5b      	lsrs	r3, r3, #9
 800117c:	4a0b      	ldr	r2, [pc, #44]	; (80011ac <I2C_Init+0x180>)
 800117e:	fba2 2303 	umull	r2, r3, r2, r3
 8001182:	09db      	lsrs	r3, r3, #7
 8001184:	3301      	adds	r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
	}

	pI2C_Handle->pI2Cx->TRISE |= (tempreg & 0x3F);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6a19      	ldr	r1, [r3, #32]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	430a      	orrs	r2, r1
 800119a:	621a      	str	r2, [r3, #32]
}
 800119c:	bf00      	nop
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	431bde83 	.word	0x431bde83
 80011a8:	000186a0 	.word	0x000186a0
 80011ac:	00044b83 	.word	0x00044b83

080011b0 <I2C_MasterSendData>:
}




void I2C_MasterSendData(I2C_Handle_t *pI2C_Handle, uint8_t *pTxBuffer, uint8_t Length, uint8_t SlaveAddr, uint8_t Sr){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	4611      	mov	r1, r2
 80011bc:	461a      	mov	r2, r3
 80011be:	460b      	mov	r3, r1
 80011c0:	71fb      	strb	r3, [r7, #7]
 80011c2:	4613      	mov	r3, r2
 80011c4:	71bb      	strb	r3, [r7, #6]
	// 1. Generate the Start Condition
	I2C_GenerateStartCondition(pI2C_Handle->pI2Cx);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fe3a 	bl	8000e44 <I2C_GenerateStartCondition>

	// 2. Confirm that start generation is completed by checking the SB Flag in the SR1
	while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_SB));
 80011d0:	bf00      	nop
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2101      	movs	r1, #1
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 f8fd 	bl	80013d8 <I2C_GetFlagStatus>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0f6      	beq.n	80011d2 <I2C_MasterSendData+0x22>

	// 3. Send the Address of the slave with R/nW bit set to W(0) (total 8 bits)
	I2C_ExecuteAddressPhaseWrite(pI2C_Handle->pI2Cx, SlaveAddr);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	79ba      	ldrb	r2, [r7, #6]
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fe38 	bl	8000e62 <I2C_ExecuteAddressPhaseWrite>

	// 4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_ADDR));
 80011f2:	bf00      	nop
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2102      	movs	r1, #2
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 f8ec 	bl	80013d8 <I2C_GetFlagStatus>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d0f6      	beq.n	80011f4 <I2C_MasterSendData+0x44>

	// 5. Clear the ADDR Flag according to its software sequence
	I2C_ClearADDRFlag(pI2C_Handle);
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f7ff fe55 	bl	8000eb6 <I2C_ClearADDRFlag>

	// 6. Send the data until Length becomes 0
	while(Length > 0){
 800120c:	e014      	b.n	8001238 <I2C_MasterSendData+0x88>
		while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_TXE)); // Wait till TXE is set
 800120e:	bf00      	nop
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2180      	movs	r1, #128	; 0x80
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f8de 	bl	80013d8 <I2C_GetFlagStatus>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d0f6      	beq.n	8001210 <I2C_MasterSendData+0x60>
		pI2C_Handle->pI2Cx->DR = *pTxBuffer;
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	781a      	ldrb	r2, [r3, #0]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	3301      	adds	r3, #1
 8001230:	60bb      	str	r3, [r7, #8]
		Length--;
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	3b01      	subs	r3, #1
 8001236:	71fb      	strb	r3, [r7, #7]
	while(Length > 0){
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1e7      	bne.n	800120e <I2C_MasterSendData+0x5e>
	}

	// 7. When Length becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_TXE));
 800123e:	bf00      	nop
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2180      	movs	r1, #128	; 0x80
 8001246:	4618      	mov	r0, r3
 8001248:	f000 f8c6 	bl	80013d8 <I2C_GetFlagStatus>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0f6      	beq.n	8001240 <I2C_MasterSendData+0x90>
	while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_BTF));
 8001252:	bf00      	nop
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2104      	movs	r1, #4
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f8bc 	bl	80013d8 <I2C_GetFlagStatus>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0f6      	beq.n	8001254 <I2C_MasterSendData+0xa4>

	// 8. Generate STOP condition and master need not to wait for the completion of stop condition
	if(Sr == I2C_DISABLE_SR){
 8001266:	7e3b      	ldrb	r3, [r7, #24]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d104      	bne.n	8001276 <I2C_MasterSendData+0xc6>
		I2C_GenerateStopCondition(pI2C_Handle->pI2Cx);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fe57 	bl	8000f24 <I2C_GenerateStopCondition>
	}


}
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <I2C_MasterReceiveData>:


void I2C_MasterReceiveData(I2C_Handle_t *pI2C_Handle, uint8_t *pRxBuffer, uint8_t Length, uint8_t SlaveAddr, uint8_t Sr){
 800127e:	b580      	push	{r7, lr}
 8001280:	b086      	sub	sp, #24
 8001282:	af00      	add	r7, sp, #0
 8001284:	60f8      	str	r0, [r7, #12]
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	4611      	mov	r1, r2
 800128a:	461a      	mov	r2, r3
 800128c:	460b      	mov	r3, r1
 800128e:	71fb      	strb	r3, [r7, #7]
 8001290:	4613      	mov	r3, r2
 8001292:	71bb      	strb	r3, [r7, #6]

	// 1. Generate the Start Condition
	I2C_GenerateStartCondition(pI2C_Handle->pI2Cx);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fdd3 	bl	8000e44 <I2C_GenerateStartCondition>

	// 2. Confirm that start generation is completed by checking the SB Flag in the SR1
	while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_SB));
 800129e:	bf00      	nop
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2101      	movs	r1, #1
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f896 	bl	80013d8 <I2C_GetFlagStatus>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f6      	beq.n	80012a0 <I2C_MasterReceiveData+0x22>

	// 3. Send the Address of the slave with R/nW bit set to R(1) (total 8 bits)
	I2C_ExecuteAddressPhaseRead(pI2C_Handle->pI2Cx, SlaveAddr);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	79ba      	ldrb	r2, [r7, #6]
 80012b8:	4611      	mov	r1, r2
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fde6 	bl	8000e8c <I2C_ExecuteAddressPhaseRead>

	// 4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_ADDR));
 80012c0:	bf00      	nop
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2102      	movs	r1, #2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 f885 	bl	80013d8 <I2C_GetFlagStatus>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0f6      	beq.n	80012c2 <I2C_MasterReceiveData+0x44>

	// if Reading Length only 1 Byte
	if(Length == 1){
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d121      	bne.n	800131e <I2C_MasterReceiveData+0xa0>
		// Disable ACKing
		I2C_ManageAcking(pI2C_Handle->pI2Cx, I2C_ACK_DISABLE);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 f85e 	bl	80013a2 <I2C_ManageAcking>

		// Clear the ADDR Flag
		I2C_ClearADDRFlag(pI2C_Handle);
 80012e6:	68f8      	ldr	r0, [r7, #12]
 80012e8:	f7ff fde5 	bl	8000eb6 <I2C_ClearADDRFlag>

		// Wait until RXNE Becomes 1
		while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_RXNE));
 80012ec:	bf00      	nop
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2140      	movs	r1, #64	; 0x40
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 f86f 	bl	80013d8 <I2C_GetFlagStatus>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0f6      	beq.n	80012ee <I2C_MasterReceiveData+0x70>

		// Generate STOP Condition
		if(Sr == I2C_DISABLE_SR){
 8001300:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d104      	bne.n	8001312 <I2C_MasterReceiveData+0x94>
			I2C_GenerateStopCondition(pI2C_Handle->pI2Cx);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fe09 	bl	8000f24 <I2C_GenerateStopCondition>
		}

		// Read Data into Buffer
		*pRxBuffer = pI2C_Handle->pI2Cx->DR;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	701a      	strb	r2, [r3, #0]

	}

	// if Reading Length > 1
	if(Length > 1){
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d930      	bls.n	8001386 <I2C_MasterReceiveData+0x108>
		// Clear the ADDR Flag
		I2C_ClearADDRFlag(pI2C_Handle);
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	f7ff fdc6 	bl	8000eb6 <I2C_ClearADDRFlag>

		// Read the Data until Length becomes zero
		for(uint32_t i = Length; i > 0; i--){
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	e027      	b.n	8001380 <I2C_MasterReceiveData+0x102>
			// wait for RXNE becomes 1
			while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_RXNE));
 8001330:	bf00      	nop
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2140      	movs	r1, #64	; 0x40
 8001338:	4618      	mov	r0, r3
 800133a:	f000 f84d 	bl	80013d8 <I2C_GetFlagStatus>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0f6      	beq.n	8001332 <I2C_MasterReceiveData+0xb4>

			// Last 2 Bytes remaining
			if(i == 2){
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	2b02      	cmp	r3, #2
 8001348:	d10e      	bne.n	8001368 <I2C_MasterReceiveData+0xea>
				// Clear the ACK bit
				I2C_ManageAcking(pI2C_Handle->pI2Cx, I2C_ACK_DISABLE);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f000 f826 	bl	80013a2 <I2C_ManageAcking>

				// Generate STOP Condition
				if(Sr == I2C_DISABLE_SR){
 8001356:	f897 3020 	ldrb.w	r3, [r7, #32]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d104      	bne.n	8001368 <I2C_MasterReceiveData+0xea>
					I2C_GenerateStopCondition(pI2C_Handle->pI2Cx);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fdde 	bl	8000f24 <I2C_GenerateStopCondition>
				}
			}

			// Read the Data from the Data Register into Buffer
			*pRxBuffer = pI2C_Handle->pI2Cx->DR;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	b2da      	uxtb	r2, r3
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	701a      	strb	r2, [r3, #0]

			// Increment the Buffer Address
			pRxBuffer++;
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	3301      	adds	r3, #1
 8001378:	60bb      	str	r3, [r7, #8]
		for(uint32_t i = Length; i > 0; i--){
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	3b01      	subs	r3, #1
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1d4      	bne.n	8001330 <I2C_MasterReceiveData+0xb2>

		}
	}

	// Re-Enable ACKing
	if(pI2C_Handle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE){
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	7a5b      	ldrb	r3, [r3, #9]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d105      	bne.n	800139a <I2C_MasterReceiveData+0x11c>
		I2C_ManageAcking(pI2C_Handle->pI2Cx, I2C_ACK_ENABLE);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2101      	movs	r1, #1
 8001394:	4618      	mov	r0, r3
 8001396:	f000 f804 	bl	80013a2 <I2C_ManageAcking>
	}


}
 800139a:	bf00      	nop
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <I2C_ManageAcking>:
	}

}


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
 80013aa:	460b      	mov	r3, r1
 80013ac:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == I2C_ACK_ENABLE){
 80013ae:	78fb      	ldrb	r3, [r7, #3]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d106      	bne.n	80013c2 <I2C_ManageAcking+0x20>
		// Enable ACKing
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	601a      	str	r2, [r3, #0]
	}else{
		// Disable ACKing
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 80013c0:	e005      	b.n	80013ce <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	601a      	str	r2, [r3, #0]
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <I2C_GetFlagStatus>:

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName){
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName){
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695a      	ldr	r2, [r3, #20]
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	4013      	ands	r3, r2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <I2C_GetFlagStatus+0x1a>
		return FLAG_SET;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr

080013fe <RCC_GetPLLOutputClock>:
#include "stm32f446xx_rcc_driver.h"



// Not implemented, just a placeholder
uint32_t RCC_GetPLLOutputClock(void){
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
	uint32_t temp = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	607b      	str	r3, [r7, #4]
	return temp;
 8001408:	687b      	ldr	r3, [r7, #4]
}
 800140a:	4618      	mov	r0, r3
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <RCC_GetPCLK1Value>:

uint16_t AHB_PreScaler[8] = {2, 4, 8, 16, 64, 128, 512};
uint16_t APB1_PreScaler[4] = {2, 4, 8, 16};
uint16_t APB2_PreScaler[4] = {2, 4, 8, 16};

uint32_t RCC_GetPCLK1Value(void){
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, ahbp, apb1p;
	clksrc = (RCC->CFGR >> 2) & 0x3;
 800141a:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <RCC_GetPCLK1Value+0xa0>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	089b      	lsrs	r3, r3, #2
 8001420:	b2db      	uxtb	r3, r3
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0){
 8001428:	7a7b      	ldrb	r3, [r7, #9]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d102      	bne.n	8001434 <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 800142e:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <RCC_GetPCLK1Value+0xa4>)
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	e00b      	b.n	800144c <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1){
 8001434:	7a7b      	ldrb	r3, [r7, #9]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d102      	bne.n	8001440 <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 800143a:	4b20      	ldr	r3, [pc, #128]	; (80014bc <RCC_GetPCLK1Value+0xa8>)
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	e005      	b.n	800144c <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 2){
 8001440:	7a7b      	ldrb	r3, [r7, #9]
 8001442:	2b02      	cmp	r3, #2
 8001444:	d102      	bne.n	800144c <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 8001446:	f7ff ffda 	bl	80013fe <RCC_GetPLLOutputClock>
 800144a:	60f8      	str	r0, [r7, #12]
	}

	// AHB Pre-scaler
	temp = (RCC->CFGR >> 4) & 0xF;
 800144c:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <RCC_GetPCLK1Value+0xa0>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	091b      	lsrs	r3, r3, #4
 8001452:	b2db      	uxtb	r3, r3
 8001454:	f003 030f 	and.w	r3, r3, #15
 8001458:	723b      	strb	r3, [r7, #8]
	if(temp < 8){
 800145a:	7a3b      	ldrb	r3, [r7, #8]
 800145c:	2b07      	cmp	r3, #7
 800145e:	d802      	bhi.n	8001466 <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 8001460:	2301      	movs	r3, #1
 8001462:	72fb      	strb	r3, [r7, #11]
 8001464:	e005      	b.n	8001472 <RCC_GetPCLK1Value+0x5e>
	}else{
		ahbp = AHB_PreScaler[temp-8];
 8001466:	7a3b      	ldrb	r3, [r7, #8]
 8001468:	3b08      	subs	r3, #8
 800146a:	4a15      	ldr	r2, [pc, #84]	; (80014c0 <RCC_GetPCLK1Value+0xac>)
 800146c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001470:	72fb      	strb	r3, [r7, #11]
	}

	// APB1 Pre-scaler
	temp = (RCC->CFGR >> 10) & 0x7;
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <RCC_GetPCLK1Value+0xa0>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	0a9b      	lsrs	r3, r3, #10
 8001478:	b2db      	uxtb	r3, r3
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	723b      	strb	r3, [r7, #8]
	if(temp < 8){
 8001480:	7a3b      	ldrb	r3, [r7, #8]
 8001482:	2b07      	cmp	r3, #7
 8001484:	d802      	bhi.n	800148c <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 8001486:	2301      	movs	r3, #1
 8001488:	72bb      	strb	r3, [r7, #10]
 800148a:	e005      	b.n	8001498 <RCC_GetPCLK1Value+0x84>
	}else{
		apb1p = APB1_PreScaler[temp-4];
 800148c:	7a3b      	ldrb	r3, [r7, #8]
 800148e:	3b04      	subs	r3, #4
 8001490:	4a0c      	ldr	r2, [pc, #48]	; (80014c4 <RCC_GetPCLK1Value+0xb0>)
 8001492:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001496:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1p;
 8001498:	7afb      	ldrb	r3, [r7, #11]
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	fbb2 f2f3 	udiv	r2, r2, r3
 80014a0:	7abb      	ldrb	r3, [r7, #10]
 80014a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a6:	607b      	str	r3, [r7, #4]

	return pclk1;
 80014a8:	687b      	ldr	r3, [r7, #4]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800
 80014b8:	00f42400 	.word	0x00f42400
 80014bc:	007a1200 	.word	0x007a1200
 80014c0:	20000000 	.word	0x20000000
 80014c4:	20000010 	.word	0x20000010

080014c8 <init_systick_timer>:
extern void initialise_monitor_handles();

#define SYSTICK_TIM_CLK		16000000UL

void init_systick_timer(uint32_t tick_hz)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b087      	sub	sp, #28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 80014d0:	4b14      	ldr	r3, [pc, #80]	; (8001524 <init_systick_timer+0x5c>)
 80014d2:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 80014d4:	4b14      	ldr	r3, [pc, #80]	; (8001528 <init_systick_timer+0x60>)
 80014d6:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 80014d8:	4a14      	ldr	r2, [pc, #80]	; (800152c <init_systick_timer+0x64>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e0:	3b01      	subs	r3, #1
 80014e2:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	431a      	orrs	r2, r3
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f043 0202 	orr.w	r2, r3, #2
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f043 0204 	orr.w	r2, r3, #4
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f043 0201 	orr.w	r2, r3, #1
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	601a      	str	r2, [r3, #0]

}
 800151a:	bf00      	nop
 800151c:	371c      	adds	r7, #28
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	e000e014 	.word	0xe000e014
 8001528:	e000e010 	.word	0xe000e010
 800152c:	00f42400 	.word	0x00f42400

08001530 <mdelay>:
char* time_to_string(RTC_time_t *rtc_time);
char* date_to_string(RTC_date_t *rtc_date);
void printf_rtc(void);


static void mdelay(uint32_t cnt){
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0; i < (cnt * 1000); i++);
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	e002      	b.n	8001544 <mdelay+0x14>
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	3301      	adds	r3, #1
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800154a:	fb02 f303 	mul.w	r3, r2, r3
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	429a      	cmp	r2, r3
 8001552:	d3f4      	bcc.n	800153e <mdelay+0xe>
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr

08001560 <main>:


RTC_time_t current_time;
RTC_date_t current_date;

int main(void){
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0

#ifndef PRINT_LCD
	initialise_monitor_handles();
	printf("RTC test\n");
#else
	lcd_init();
 8001564:	f7ff f8b6 	bl	80006d4 <lcd_init>

	lcd_print_string("LCD Test...");
 8001568:	481d      	ldr	r0, [pc, #116]	; (80015e0 <main+0x80>)
 800156a:	f7ff f877 	bl	800065c <lcd_print_string>

	mdelay(2000);
 800156e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001572:	f7ff ffdd 	bl	8001530 <mdelay>

	lcd_display_clear();
 8001576:	f7ff f937 	bl	80007e8 <lcd_display_clear>
	lcd_display_return_home();
 800157a:	f7ff f93f 	bl	80007fc <lcd_display_return_home>
#endif

	if(ds1307_init()){
 800157e:	f7fe fe41 	bl	8000204 <ds1307_init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d000      	beq.n	800158a <main+0x2a>
#ifndef PRINT_LCD
		printf("RTC Init Failed\n");
#endif
		while(1);
 8001588:	e7fe      	b.n	8001588 <main+0x28>
	}

	init_systick_timer(1);
 800158a:	2001      	movs	r0, #1
 800158c:	f7ff ff9c 	bl	80014c8 <init_systick_timer>

	// Configure Date
	current_date.day = MONDAY;
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <main+0x84>)
 8001592:	2202      	movs	r2, #2
 8001594:	70da      	strb	r2, [r3, #3]
	current_date.date = 4;
 8001596:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <main+0x84>)
 8001598:	2204      	movs	r2, #4
 800159a:	701a      	strb	r2, [r3, #0]
	current_date.month = 3;
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <main+0x84>)
 800159e:	2203      	movs	r2, #3
 80015a0:	705a      	strb	r2, [r3, #1]
	current_date.year = 24;
 80015a2:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <main+0x84>)
 80015a4:	2218      	movs	r2, #24
 80015a6:	709a      	strb	r2, [r3, #2]

	// Configure Time
	current_time.seconds = 50;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <main+0x88>)
 80015aa:	2232      	movs	r2, #50	; 0x32
 80015ac:	705a      	strb	r2, [r3, #1]
	current_time.minutes = 59;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <main+0x88>)
 80015b0:	223b      	movs	r2, #59	; 0x3b
 80015b2:	709a      	strb	r2, [r3, #2]
	current_time.hours = 11;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <main+0x88>)
 80015b6:	220b      	movs	r2, #11
 80015b8:	701a      	strb	r2, [r3, #0]
	current_time.time_format = TIME_FORMAT_12HRS_PM;
 80015ba:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <main+0x88>)
 80015bc:	2201      	movs	r2, #1
 80015be:	70da      	strb	r2, [r3, #3]

	ds1307_set_current_date(&current_date);
 80015c0:	4808      	ldr	r0, [pc, #32]	; (80015e4 <main+0x84>)
 80015c2:	f7fe fecf 	bl	8000364 <ds1307_set_current_date>
	ds1307_set_current_time(&current_time);
 80015c6:	4808      	ldr	r0, [pc, #32]	; (80015e8 <main+0x88>)
 80015c8:	f7fe fe3a 	bl	8000240 <ds1307_set_current_time>

	ds1307_get_current_date(&current_date);
 80015cc:	4805      	ldr	r0, [pc, #20]	; (80015e4 <main+0x84>)
 80015ce:	f7fe fef9 	bl	80003c4 <ds1307_get_current_date>
	ds1307_get_current_time(&current_time);
 80015d2:	4805      	ldr	r0, [pc, #20]	; (80015e8 <main+0x88>)
 80015d4:	f7fe fe7d 	bl	80002d2 <ds1307_get_current_time>

	printf_rtc();
 80015d8:	f000 f808 	bl	80015ec <printf_rtc>


	while(1);
 80015dc:	e7fe      	b.n	80015dc <main+0x7c>
 80015de:	bf00      	nop
 80015e0:	080018b8 	.word	0x080018b8
 80015e4:	20000060 	.word	0x20000060
 80015e8:	2000005c 	.word	0x2000005c

080015ec <printf_rtc>:

	return 0;
}


void printf_rtc(void){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
	char *am_pm;
	lcd_set_cursor(1, 1);
 80015f2:	2101      	movs	r1, #1
 80015f4:	2001      	movs	r0, #1
 80015f6:	f7ff f846 	bl	8000686 <lcd_set_cursor>
	if(current_time.time_format != TIME_FORMAT_24HRS){
 80015fa:	4b1c      	ldr	r3, [pc, #112]	; (800166c <printf_rtc+0x80>)
 80015fc:	78db      	ldrb	r3, [r3, #3]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d012      	beq.n	8001628 <printf_rtc+0x3c>
		am_pm = (current_time.time_format) ? "PM" : "AM";
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <printf_rtc+0x80>)
 8001604:	78db      	ldrb	r3, [r3, #3]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <printf_rtc+0x22>
 800160a:	4b19      	ldr	r3, [pc, #100]	; (8001670 <printf_rtc+0x84>)
 800160c:	e000      	b.n	8001610 <printf_rtc+0x24>
 800160e:	4b19      	ldr	r3, [pc, #100]	; (8001674 <printf_rtc+0x88>)
 8001610:	607b      	str	r3, [r7, #4]
#ifndef PRINT_LCD
		printf("Current Time: %s %s\n", time_to_string(&current_time), am_pm); // 08:08:41 PM
#else
		lcd_print_string(time_to_string(&current_time));
 8001612:	4816      	ldr	r0, [pc, #88]	; (800166c <printf_rtc+0x80>)
 8001614:	f000 f88a 	bl	800172c <time_to_string>
 8001618:	4603      	mov	r3, r0
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff f81e 	bl	800065c <lcd_print_string>
		lcd_print_string(am_pm);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff f81b 	bl	800065c <lcd_print_string>
 8001626:	e006      	b.n	8001636 <printf_rtc+0x4a>
	}else{
		// 24 Hours Format
#ifndef PRINT_LCD
		printf("Current Time: %s\n", time_to_string(&current_time)); // 20:08:41
#else
		lcd_print_string(time_to_string(&current_time));
 8001628:	4810      	ldr	r0, [pc, #64]	; (800166c <printf_rtc+0x80>)
 800162a:	f000 f87f 	bl	800172c <time_to_string>
 800162e:	4603      	mov	r3, r0
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff f813 	bl	800065c <lcd_print_string>
	}

#ifndef PRINT_LCD
	printf("Current Date: %s <%s>\n", date_to_string(&current_date), get_day_of_week(current_date.day));
#else
	lcd_set_cursor(2, 1);
 8001636:	2101      	movs	r1, #1
 8001638:	2002      	movs	r0, #2
 800163a:	f7ff f824 	bl	8000686 <lcd_set_cursor>
	lcd_print_string(date_to_string(&current_date));
 800163e:	480e      	ldr	r0, [pc, #56]	; (8001678 <printf_rtc+0x8c>)
 8001640:	f000 f89e 	bl	8001780 <date_to_string>
 8001644:	4603      	mov	r3, r0
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff f808 	bl	800065c <lcd_print_string>
	lcd_print_char(' ');
 800164c:	2020      	movs	r0, #32
 800164e:	f7fe ffe3 	bl	8000618 <lcd_print_char>
	lcd_print_string(get_day_of_week(current_date.day));
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <printf_rtc+0x8c>)
 8001654:	78db      	ldrb	r3, [r3, #3]
 8001656:	4618      	mov	r0, r3
 8001658:	f000 f810 	bl	800167c <get_day_of_week>
 800165c:	4603      	mov	r3, r0
 800165e:	4618      	mov	r0, r3
 8001660:	f7fe fffc 	bl	800065c <lcd_print_string>
#endif

}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	2000005c 	.word	0x2000005c
 8001670:	080018c4 	.word	0x080018c4
 8001674:	080018c8 	.word	0x080018c8
 8001678:	20000060 	.word	0x20000060

0800167c <get_day_of_week>:

char* get_day_of_week(uint8_t day){
 800167c:	b4b0      	push	{r4, r5, r7}
 800167e:	b08b      	sub	sp, #44	; 0x2c
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
	char *days_list[] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
 8001686:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <get_day_of_week+0x38>)
 8001688:	f107 040c 	add.w	r4, r7, #12
 800168c:	461d      	mov	r5, r3
 800168e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001692:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001696:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return days_list[day-1];
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	3b01      	subs	r3, #1
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	3328      	adds	r3, #40	; 0x28
 80016a2:	443b      	add	r3, r7
 80016a4:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	372c      	adds	r7, #44	; 0x2c
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bcb0      	pop	{r4, r5, r7}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	08001910 	.word	0x08001910

080016b8 <number_to_string>:


void number_to_string(uint8_t num, char* buf){
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	71fb      	strb	r3, [r7, #7]

	if(num < 10){
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	2b09      	cmp	r3, #9
 80016c8:	d809      	bhi.n	80016de <number_to_string+0x26>
		buf[0] = '0';
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	2230      	movs	r2, #48	; 0x30
 80016ce:	701a      	strb	r2, [r3, #0]
		buf[1] = num + 48;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	3301      	adds	r3, #1
 80016d4:	79fa      	ldrb	r2, [r7, #7]
 80016d6:	3230      	adds	r2, #48	; 0x30
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	701a      	strb	r2, [r3, #0]
	}else if(num >= 10 && num < 99){
		buf[0] = (num /10) + 48;
		buf[1] = (num % 10) + 48;
	}
}
 80016dc:	e01f      	b.n	800171e <number_to_string+0x66>
	}else if(num >= 10 && num < 99){
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	2b09      	cmp	r3, #9
 80016e2:	d91c      	bls.n	800171e <number_to_string+0x66>
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	2b62      	cmp	r3, #98	; 0x62
 80016e8:	d819      	bhi.n	800171e <number_to_string+0x66>
		buf[0] = (num /10) + 48;
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <number_to_string+0x70>)
 80016ee:	fba2 2303 	umull	r2, r3, r2, r3
 80016f2:	08db      	lsrs	r3, r3, #3
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	3330      	adds	r3, #48	; 0x30
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	701a      	strb	r2, [r3, #0]
		buf[1] = (num % 10) + 48;
 80016fe:	79fa      	ldrb	r2, [r7, #7]
 8001700:	4b09      	ldr	r3, [pc, #36]	; (8001728 <number_to_string+0x70>)
 8001702:	fba3 1302 	umull	r1, r3, r3, r2
 8001706:	08d9      	lsrs	r1, r3, #3
 8001708:	460b      	mov	r3, r1
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	b2da      	uxtb	r2, r3
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	3301      	adds	r3, #1
 8001718:	3230      	adds	r2, #48	; 0x30
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	701a      	strb	r2, [r3, #0]
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr
 8001728:	cccccccd 	.word	0xcccccccd

0800172c <time_to_string>:


// hh:mm:ss'\0'
char* time_to_string(RTC_time_t *rtc_time){
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	static char buf[9];
	buf[2] = ':';
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <time_to_string+0x48>)
 8001736:	223a      	movs	r2, #58	; 0x3a
 8001738:	709a      	strb	r2, [r3, #2]
	buf[5] = ':';
 800173a:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <time_to_string+0x48>)
 800173c:	223a      	movs	r2, #58	; 0x3a
 800173e:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_time->hours, buf);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	490b      	ldr	r1, [pc, #44]	; (8001774 <time_to_string+0x48>)
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff ffb6 	bl	80016b8 <number_to_string>
	number_to_string(rtc_time->minutes, &buf[3]);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	789b      	ldrb	r3, [r3, #2]
 8001750:	4909      	ldr	r1, [pc, #36]	; (8001778 <time_to_string+0x4c>)
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff ffb0 	bl	80016b8 <number_to_string>
	number_to_string(rtc_time->seconds, &buf[6]);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	785b      	ldrb	r3, [r3, #1]
 800175c:	4907      	ldr	r1, [pc, #28]	; (800177c <time_to_string+0x50>)
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff ffaa 	bl	80016b8 <number_to_string>

	buf[8] = '\0';
 8001764:	4b03      	ldr	r3, [pc, #12]	; (8001774 <time_to_string+0x48>)
 8001766:	2200      	movs	r2, #0
 8001768:	721a      	strb	r2, [r3, #8]

	return buf;
 800176a:	4b02      	ldr	r3, [pc, #8]	; (8001774 <time_to_string+0x48>)

}
 800176c:	4618      	mov	r0, r3
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000064 	.word	0x20000064
 8001778:	20000067 	.word	0x20000067
 800177c:	2000006a 	.word	0x2000006a

08001780 <date_to_string>:

// dd/mm/yy'\0'
char* date_to_string(RTC_date_t *rtc_date){
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2] = '/';
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <date_to_string+0x48>)
 800178a:	222f      	movs	r2, #47	; 0x2f
 800178c:	709a      	strb	r2, [r3, #2]
	buf[5] = '/';
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <date_to_string+0x48>)
 8001790:	222f      	movs	r2, #47	; 0x2f
 8001792:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_date->month, buf);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	785b      	ldrb	r3, [r3, #1]
 8001798:	490b      	ldr	r1, [pc, #44]	; (80017c8 <date_to_string+0x48>)
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff ff8c 	bl	80016b8 <number_to_string>
	number_to_string(rtc_date->date, &buf[3]);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	4909      	ldr	r1, [pc, #36]	; (80017cc <date_to_string+0x4c>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff ff86 	bl	80016b8 <number_to_string>
	number_to_string(rtc_date->year, &buf[6]);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	789b      	ldrb	r3, [r3, #2]
 80017b0:	4907      	ldr	r1, [pc, #28]	; (80017d0 <date_to_string+0x50>)
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff ff80 	bl	80016b8 <number_to_string>

	buf[8] = '\0';
 80017b8:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <date_to_string+0x48>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	721a      	strb	r2, [r3, #8]

	return buf;
 80017be:	4b02      	ldr	r3, [pc, #8]	; (80017c8 <date_to_string+0x48>)
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000070 	.word	0x20000070
 80017cc:	20000073 	.word	0x20000073
 80017d0:	20000076 	.word	0x20000076

080017d4 <SysTick_Handler>:



void SysTick_Handler(void){
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
	ds1307_get_current_date(&current_date);
 80017d8:	4804      	ldr	r0, [pc, #16]	; (80017ec <SysTick_Handler+0x18>)
 80017da:	f7fe fdf3 	bl	80003c4 <ds1307_get_current_date>
	ds1307_get_current_time(&current_time);
 80017de:	4804      	ldr	r0, [pc, #16]	; (80017f0 <SysTick_Handler+0x1c>)
 80017e0:	f7fe fd77 	bl	80002d2 <ds1307_get_current_time>
	printf_rtc();
 80017e4:	f7ff ff02 	bl	80015ec <printf_rtc>
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000060 	.word	0x20000060
 80017f0:	2000005c 	.word	0x2000005c

080017f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017f4:	480d      	ldr	r0, [pc, #52]	; (800182c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80017f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017fc:	480c      	ldr	r0, [pc, #48]	; (8001830 <LoopForever+0x6>)
  ldr r1, =_edata
 80017fe:	490d      	ldr	r1, [pc, #52]	; (8001834 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001800:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <LoopForever+0xe>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001804:	e002      	b.n	800180c <LoopCopyDataInit>

08001806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180a:	3304      	adds	r3, #4

0800180c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800180c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001810:	d3f9      	bcc.n	8001806 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001812:	4a0a      	ldr	r2, [pc, #40]	; (800183c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001814:	4c0a      	ldr	r4, [pc, #40]	; (8001840 <LoopForever+0x16>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001818:	e001      	b.n	800181e <LoopFillZerobss>

0800181a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800181c:	3204      	adds	r2, #4

0800181e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001820:	d3fb      	bcc.n	800181a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001822:	f000 f819 	bl	8001858 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001826:	f7ff fe9b 	bl	8001560 <main>

0800182a <LoopForever>:

LoopForever:
  b LoopForever
 800182a:	e7fe      	b.n	800182a <LoopForever>
  ldr   r0, =_estack
 800182c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001834:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001838:	08001934 	.word	0x08001934
  ldr r2, =_sbss
 800183c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001840:	2000007c 	.word	0x2000007c

08001844 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001844:	e7fe      	b.n	8001844 <ADC_IRQHandler>

08001846 <memset>:
 8001846:	4402      	add	r2, r0
 8001848:	4603      	mov	r3, r0
 800184a:	4293      	cmp	r3, r2
 800184c:	d100      	bne.n	8001850 <memset+0xa>
 800184e:	4770      	bx	lr
 8001850:	f803 1b01 	strb.w	r1, [r3], #1
 8001854:	e7f9      	b.n	800184a <memset+0x4>
	...

08001858 <__libc_init_array>:
 8001858:	b570      	push	{r4, r5, r6, lr}
 800185a:	4d0d      	ldr	r5, [pc, #52]	; (8001890 <__libc_init_array+0x38>)
 800185c:	4c0d      	ldr	r4, [pc, #52]	; (8001894 <__libc_init_array+0x3c>)
 800185e:	1b64      	subs	r4, r4, r5
 8001860:	10a4      	asrs	r4, r4, #2
 8001862:	2600      	movs	r6, #0
 8001864:	42a6      	cmp	r6, r4
 8001866:	d109      	bne.n	800187c <__libc_init_array+0x24>
 8001868:	4d0b      	ldr	r5, [pc, #44]	; (8001898 <__libc_init_array+0x40>)
 800186a:	4c0c      	ldr	r4, [pc, #48]	; (800189c <__libc_init_array+0x44>)
 800186c:	f000 f818 	bl	80018a0 <_init>
 8001870:	1b64      	subs	r4, r4, r5
 8001872:	10a4      	asrs	r4, r4, #2
 8001874:	2600      	movs	r6, #0
 8001876:	42a6      	cmp	r6, r4
 8001878:	d105      	bne.n	8001886 <__libc_init_array+0x2e>
 800187a:	bd70      	pop	{r4, r5, r6, pc}
 800187c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001880:	4798      	blx	r3
 8001882:	3601      	adds	r6, #1
 8001884:	e7ee      	b.n	8001864 <__libc_init_array+0xc>
 8001886:	f855 3b04 	ldr.w	r3, [r5], #4
 800188a:	4798      	blx	r3
 800188c:	3601      	adds	r6, #1
 800188e:	e7f2      	b.n	8001876 <__libc_init_array+0x1e>
 8001890:	0800192c 	.word	0x0800192c
 8001894:	0800192c 	.word	0x0800192c
 8001898:	0800192c 	.word	0x0800192c
 800189c:	08001930 	.word	0x08001930

080018a0 <_init>:
 80018a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018a2:	bf00      	nop
 80018a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018a6:	bc08      	pop	{r3}
 80018a8:	469e      	mov	lr, r3
 80018aa:	4770      	bx	lr

080018ac <_fini>:
 80018ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ae:	bf00      	nop
 80018b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018b2:	bc08      	pop	{r3}
 80018b4:	469e      	mov	lr, r3
 80018b6:	4770      	bx	lr


008_stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002098  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800225c  0800225c  0001225c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022ec  080022ec  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080022ec  080022ec  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022ec  080022ec  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022ec  080022ec  000122ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022f0  080022f0  000122f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080022f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000007c  08002370  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08002370  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY
 13 .debug_info   000023f4  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a21  00000000  00000000  000224dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002f0  00000000  00000000  00022f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000227  00000000  00000000  000231f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000315f  00000000  00000000  00023417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000318a  00000000  00000000  00026576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b48d  00000000  00000000  00029700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001370  00000000  00000000  00034b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00035f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000007c 	.word	0x2000007c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002244 	.word	0x08002244

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000080 	.word	0x20000080
 8000200:	08002244 	.word	0x08002244

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <ds1307_init>:
static uint8_t bcd_to_binary(uint8_t value);


/* ds1307 Initialization */
// Returns Value of CH. If 1 then Initialization Failed else Success
uint8_t ds1307_init(void){
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0

	// 1. Initialize the I2C GPIO Pins
	ds1307_i2c_pin_config();
 800021a:	f000 f90f 	bl	800043c <ds1307_i2c_pin_config>

	// 2. Initialize the I2C Peripheral
	ds1307_i2c_config();
 800021e:	f000 f949 	bl	80004b4 <ds1307_i2c_config>

	// 3. Enable the I2C Peripheral
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 8000222:	2101      	movs	r1, #1
 8000224:	4809      	ldr	r0, [pc, #36]	; (800024c <ds1307_init+0x38>)
 8000226:	f000 feed 	bl	8001004 <I2C_PeripheralControl>

	// 4. Make Clock Halt = 0;
	ds1307_write(0x00, DS1307_ADDR_SEC);
 800022a:	2100      	movs	r1, #0
 800022c:	2000      	movs	r0, #0
 800022e:	f000 f957 	bl	80004e0 <ds1307_write>

	// 5. Read Clock Halt Bit to see if Write was successful
	uint8_t clock_state = ds1307_read(DS1307_ADDR_SEC);
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f970 	bl	8000518 <ds1307_read>
 8000238:	4603      	mov	r3, r0
 800023a:	71fb      	strb	r3, [r7, #7]

	// Clock State is the 7th bit
	return ((clock_state >> 7) & 0x1);
 800023c:	79fb      	ldrb	r3, [r7, #7]
 800023e:	09db      	lsrs	r3, r3, #7
 8000240:	b2db      	uxtb	r3, r3

}
 8000242:	4618      	mov	r0, r3
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40005400 	.word	0x40005400

08000250 <ds1307_set_current_time>:


/* Set / Get Time */
void ds1307_set_current_time(RTC_time_t *rtc_time){
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hours;

	// Set Seconds
	seconds = binary_to_bcd(rtc_time->seconds);
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	785b      	ldrb	r3, [r3, #1]
 800025c:	4618      	mov	r0, r3
 800025e:	f000 f979 	bl	8000554 <binary_to_bcd>
 8000262:	4603      	mov	r3, r0
 8000264:	73bb      	strb	r3, [r7, #14]
	seconds &= ~(1 << 7); // Make sure the clock is not halted
 8000266:	7bbb      	ldrb	r3, [r7, #14]
 8000268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800026c:	73bb      	strb	r3, [r7, #14]
	ds1307_write(seconds, DS1307_ADDR_SEC);
 800026e:	7bbb      	ldrb	r3, [r7, #14]
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f000 f934 	bl	80004e0 <ds1307_write>

	// Set Minutes
	ds1307_write(binary_to_bcd(rtc_time->minutes), DS1307_ADDR_MIN);
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	789b      	ldrb	r3, [r3, #2]
 800027c:	4618      	mov	r0, r3
 800027e:	f000 f969 	bl	8000554 <binary_to_bcd>
 8000282:	4603      	mov	r3, r0
 8000284:	2101      	movs	r1, #1
 8000286:	4618      	mov	r0, r3
 8000288:	f000 f92a 	bl	80004e0 <ds1307_write>

	// Set Hours
	hours = binary_to_bcd(rtc_time->hours);
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	4618      	mov	r0, r3
 8000292:	f000 f95f 	bl	8000554 <binary_to_bcd>
 8000296:	4603      	mov	r3, r0
 8000298:	73fb      	strb	r3, [r7, #15]
	if(rtc_time->time_format == TIME_FORMAT_24HRS){
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	78db      	ldrb	r3, [r3, #3]
 800029e:	2b02      	cmp	r3, #2
 80002a0:	d104      	bne.n	80002ac <ds1307_set_current_time+0x5c>
		hours &= ~(1 << 6);
 80002a2:	7bfb      	ldrb	r3, [r7, #15]
 80002a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002a8:	73fb      	strb	r3, [r7, #15]
 80002aa:	e011      	b.n	80002d0 <ds1307_set_current_time+0x80>
	}else{
		// 12 Hour Format
		hours |= (1 << 6);
 80002ac:	7bfb      	ldrb	r3, [r7, #15]
 80002ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002b2:	73fb      	strb	r3, [r7, #15]
		hours = (rtc_time->time_format == TIME_FORMAT_12HRS_PM) ? hours | (1 << 5) : hours & ~(1 << 5);
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	78db      	ldrb	r3, [r3, #3]
 80002b8:	2b01      	cmp	r3, #1
 80002ba:	d104      	bne.n	80002c6 <ds1307_set_current_time+0x76>
 80002bc:	7bfb      	ldrb	r3, [r7, #15]
 80002be:	f043 0320 	orr.w	r3, r3, #32
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	e003      	b.n	80002ce <ds1307_set_current_time+0x7e>
 80002c6:	7bfb      	ldrb	r3, [r7, #15]
 80002c8:	f023 0320 	bic.w	r3, r3, #32
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	73fb      	strb	r3, [r7, #15]
	}
	ds1307_write(hours, DS1307_ADDR_HRS);
 80002d0:	7bfb      	ldrb	r3, [r7, #15]
 80002d2:	2102      	movs	r1, #2
 80002d4:	4618      	mov	r0, r3
 80002d6:	f000 f903 	bl	80004e0 <ds1307_write>

}
 80002da:	bf00      	nop
 80002dc:	3710      	adds	r7, #16
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}

080002e2 <ds1307_get_current_time>:

void ds1307_get_current_time(RTC_time_t *rtc_time){
 80002e2:	b580      	push	{r7, lr}
 80002e4:	b084      	sub	sp, #16
 80002e6:	af00      	add	r7, sp, #0
 80002e8:	6078      	str	r0, [r7, #4]
	// Get Seconds
	uint8_t seconds = ds1307_read(DS1307_ADDR_SEC);
 80002ea:	2000      	movs	r0, #0
 80002ec:	f000 f914 	bl	8000518 <ds1307_read>
 80002f0:	4603      	mov	r3, r0
 80002f2:	73bb      	strb	r3, [r7, #14]
	seconds &= ~(1 << 7); // Clear the Clock Halt
 80002f4:	7bbb      	ldrb	r3, [r7, #14]
 80002f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80002fa:	73bb      	strb	r3, [r7, #14]
	rtc_time->seconds = bcd_to_binary(seconds);
 80002fc:	7bbb      	ldrb	r3, [r7, #14]
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 f954 	bl	80005ac <bcd_to_binary>
 8000304:	4603      	mov	r3, r0
 8000306:	461a      	mov	r2, r3
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	705a      	strb	r2, [r3, #1]

	// Get Minutes
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 800030c:	2001      	movs	r0, #1
 800030e:	f000 f903 	bl	8000518 <ds1307_read>
 8000312:	4603      	mov	r3, r0
 8000314:	4618      	mov	r0, r3
 8000316:	f000 f949 	bl	80005ac <bcd_to_binary>
 800031a:	4603      	mov	r3, r0
 800031c:	461a      	mov	r2, r3
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	709a      	strb	r2, [r3, #2]

	// Get Hours
	uint8_t hours = ds1307_read(DS1307_ADDR_HRS);
 8000322:	2002      	movs	r0, #2
 8000324:	f000 f8f8 	bl	8000518 <ds1307_read>
 8000328:	4603      	mov	r3, r0
 800032a:	73fb      	strb	r3, [r7, #15]
	if(hours & (1 << 6)){
 800032c:	7bfb      	ldrb	r3, [r7, #15]
 800032e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000332:	2b00      	cmp	r3, #0
 8000334:	d00f      	beq.n	8000356 <ds1307_get_current_time+0x74>
		// 12 Hour Format
		rtc_time->time_format = !((hours & (1 << 5)) == 0); // PM or AM
 8000336:	7bfb      	ldrb	r3, [r7, #15]
 8000338:	f003 0320 	and.w	r3, r3, #32
 800033c:	2b00      	cmp	r3, #0
 800033e:	bf14      	ite	ne
 8000340:	2301      	movne	r3, #1
 8000342:	2300      	moveq	r3, #0
 8000344:	b2db      	uxtb	r3, r3
 8000346:	461a      	mov	r2, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	70da      	strb	r2, [r3, #3]
		hours &= ~(0x3 << 5); // Clear 6 and 5 bit
 800034c:	7bfb      	ldrb	r3, [r7, #15]
 800034e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000352:	73fb      	strb	r3, [r7, #15]
 8000354:	e002      	b.n	800035c <ds1307_get_current_time+0x7a>
	}else{
		// 24 Hour Format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	2202      	movs	r2, #2
 800035a:	70da      	strb	r2, [r3, #3]
	}
	rtc_time->hours = bcd_to_binary(hours);
 800035c:	7bfb      	ldrb	r3, [r7, #15]
 800035e:	4618      	mov	r0, r3
 8000360:	f000 f924 	bl	80005ac <bcd_to_binary>
 8000364:	4603      	mov	r3, r0
 8000366:	461a      	mov	r2, r3
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	701a      	strb	r2, [r3, #0]
}
 800036c:	bf00      	nop
 800036e:	3710      	adds	r7, #16
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <ds1307_set_current_date>:


/* Set / Get Date */
void ds1307_set_current_date(RTC_date_t *rtc_date){
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	// Set Day
	ds1307_write(binary_to_bcd(rtc_date->day), DS1307_ADDR_DAY);
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	78db      	ldrb	r3, [r3, #3]
 8000380:	4618      	mov	r0, r3
 8000382:	f000 f8e7 	bl	8000554 <binary_to_bcd>
 8000386:	4603      	mov	r3, r0
 8000388:	2103      	movs	r1, #3
 800038a:	4618      	mov	r0, r3
 800038c:	f000 f8a8 	bl	80004e0 <ds1307_write>

	// Set Date
	ds1307_write(binary_to_bcd(rtc_date->date), DS1307_ADDR_DATE);
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	4618      	mov	r0, r3
 8000396:	f000 f8dd 	bl	8000554 <binary_to_bcd>
 800039a:	4603      	mov	r3, r0
 800039c:	2104      	movs	r1, #4
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 f89e 	bl	80004e0 <ds1307_write>

	// Set Month
	ds1307_write(binary_to_bcd(rtc_date->month), DS1307_ADDR_MONTH);
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	785b      	ldrb	r3, [r3, #1]
 80003a8:	4618      	mov	r0, r3
 80003aa:	f000 f8d3 	bl	8000554 <binary_to_bcd>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2105      	movs	r1, #5
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 f894 	bl	80004e0 <ds1307_write>

	// Set Year
	ds1307_write(binary_to_bcd(rtc_date->year), DS1307_ADDR_YEAR);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	789b      	ldrb	r3, [r3, #2]
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 f8c9 	bl	8000554 <binary_to_bcd>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2106      	movs	r1, #6
 80003c6:	4618      	mov	r0, r3
 80003c8:	f000 f88a 	bl	80004e0 <ds1307_write>

}
 80003cc:	bf00      	nop
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <ds1307_get_current_date>:

void ds1307_get_current_date(RTC_date_t *rtc_date){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	// Get Day
	rtc_date->day = bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 80003dc:	2003      	movs	r0, #3
 80003de:	f000 f89b 	bl	8000518 <ds1307_read>
 80003e2:	4603      	mov	r3, r0
 80003e4:	4618      	mov	r0, r3
 80003e6:	f000 f8e1 	bl	80005ac <bcd_to_binary>
 80003ea:	4603      	mov	r3, r0
 80003ec:	461a      	mov	r2, r3
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	70da      	strb	r2, [r3, #3]
	// Get Date
	rtc_date->date = bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 80003f2:	2004      	movs	r0, #4
 80003f4:	f000 f890 	bl	8000518 <ds1307_read>
 80003f8:	4603      	mov	r3, r0
 80003fa:	4618      	mov	r0, r3
 80003fc:	f000 f8d6 	bl	80005ac <bcd_to_binary>
 8000400:	4603      	mov	r3, r0
 8000402:	461a      	mov	r2, r3
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	701a      	strb	r2, [r3, #0]
	// Get Month
	rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 8000408:	2005      	movs	r0, #5
 800040a:	f000 f885 	bl	8000518 <ds1307_read>
 800040e:	4603      	mov	r3, r0
 8000410:	4618      	mov	r0, r3
 8000412:	f000 f8cb 	bl	80005ac <bcd_to_binary>
 8000416:	4603      	mov	r3, r0
 8000418:	461a      	mov	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	705a      	strb	r2, [r3, #1]
	// Get Year
	rtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 800041e:	2006      	movs	r0, #6
 8000420:	f000 f87a 	bl	8000518 <ds1307_read>
 8000424:	4603      	mov	r3, r0
 8000426:	4618      	mov	r0, r3
 8000428:	f000 f8c0 	bl	80005ac <bcd_to_binary>
 800042c:	4603      	mov	r3, r0
 800042e:	461a      	mov	r2, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	709a      	strb	r2, [r3, #2]
}
 8000434:	bf00      	nop
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <ds1307_i2c_pin_config>:


/*
 * Private Helper Functions Definitions
 */
static void ds1307_i2c_pin_config(void){
 800043c:	b580      	push	{r7, lr}
 800043e:	b086      	sub	sp, #24
 8000440:	af00      	add	r7, sp, #0
	 * ALT Function Mode: 4
	 */

	/* I2C SCL */
	GPIO_Handle_t i2c_scl;
	memset(&i2c_scl, 0, sizeof(i2c_scl)); // Clear all the Variables
 8000442:	f107 030c 	add.w	r3, r7, #12
 8000446:	220c      	movs	r2, #12
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f001 fb0b 	bl	8001a66 <memset>
	i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT;
 8000450:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <ds1307_i2c_pin_config+0x74>)
 8000452:	60fb      	str	r3, [r7, #12]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 8000454:	2308      	movs	r3, #8
 8000456:	743b      	strb	r3, [r7, #16]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000458:	2301      	movs	r3, #1
 800045a:	74fb      	strb	r3, [r7, #19]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFUN;
 800045c:	2302      	movs	r3, #2
 800045e:	747b      	strb	r3, [r7, #17]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000460:	2304      	movs	r3, #4
 8000462:	757b      	strb	r3, [r7, #21]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000464:	2301      	movs	r3, #1
 8000466:	753b      	strb	r3, [r7, #20]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000468:	2302      	movs	r3, #2
 800046a:	74bb      	strb	r3, [r7, #18]
	GPIO_Init(&i2c_scl);
 800046c:	f107 030c 	add.w	r3, r7, #12
 8000470:	4618      	mov	r0, r3
 8000472:	f000 fb1f 	bl	8000ab4 <GPIO_Init>

	/* I2C SDA */
	GPIO_Handle_t i2c_sda;
	memset(&i2c_sda, 0, sizeof(i2c_sda)); // Clear all the Variables
 8000476:	463b      	mov	r3, r7
 8000478:	220c      	movs	r2, #12
 800047a:	2100      	movs	r1, #0
 800047c:	4618      	mov	r0, r3
 800047e:	f001 faf2 	bl	8001a66 <memset>
	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT;
 8000482:	4b0b      	ldr	r3, [pc, #44]	; (80004b0 <ds1307_i2c_pin_config+0x74>)
 8000484:	603b      	str	r3, [r7, #0]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 8000486:	2309      	movs	r3, #9
 8000488:	713b      	strb	r3, [r7, #4]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 800048a:	2301      	movs	r3, #1
 800048c:	71fb      	strb	r3, [r7, #7]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFUN;
 800048e:	2302      	movs	r3, #2
 8000490:	717b      	strb	r3, [r7, #5]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000492:	2304      	movs	r3, #4
 8000494:	727b      	strb	r3, [r7, #9]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000496:	2301      	movs	r3, #1
 8000498:	723b      	strb	r3, [r7, #8]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800049a:	2302      	movs	r3, #2
 800049c:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(&i2c_sda);
 800049e:	463b      	mov	r3, r7
 80004a0:	4618      	mov	r0, r3
 80004a2:	f000 fb07 	bl	8000ab4 <GPIO_Init>

}
 80004a6:	bf00      	nop
 80004a8:	3718      	adds	r7, #24
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40020400 	.word	0x40020400

080004b4 <ds1307_i2c_config>:


static void ds1307_i2c_config(void){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
	g_ds1307I2cHandle.pI2Cx = DS1307_I2C;
 80004b8:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <ds1307_i2c_config+0x20>)
 80004ba:	4a07      	ldr	r2, [pc, #28]	; (80004d8 <ds1307_i2c_config+0x24>)
 80004bc:	601a      	str	r2, [r3, #0]
//	g_ds1307I2cHandle.I2C_Config.I2C_DeviceAddress = DS1307_I2C_ADDRESS;
	g_ds1307I2cHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 80004be:	4b05      	ldr	r3, [pc, #20]	; (80004d4 <ds1307_i2c_config+0x20>)
 80004c0:	4a06      	ldr	r2, [pc, #24]	; (80004dc <ds1307_i2c_config+0x28>)
 80004c2:	605a      	str	r2, [r3, #4]
	g_ds1307I2cHandle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 80004c4:	4b03      	ldr	r3, [pc, #12]	; (80004d4 <ds1307_i2c_config+0x20>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	725a      	strb	r2, [r3, #9]
//	g_ds1307I2cHandle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;

	I2C_Init(&g_ds1307I2cHandle);
 80004ca:	4802      	ldr	r0, [pc, #8]	; (80004d4 <ds1307_i2c_config+0x20>)
 80004cc:	f000 fdb6 	bl	800103c <I2C_Init>
}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000098 	.word	0x20000098
 80004d8:	40005400 	.word	0x40005400
 80004dc:	000186a0 	.word	0x000186a0

080004e0 <ds1307_write>:


static void ds1307_write(uint8_t value, uint8_t reg_addr){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af02      	add	r7, sp, #8
 80004e6:	4603      	mov	r3, r0
 80004e8:	460a      	mov	r2, r1
 80004ea:	71fb      	strb	r3, [r7, #7]
 80004ec:	4613      	mov	r3, r2
 80004ee:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = reg_addr;
 80004f0:	79bb      	ldrb	r3, [r7, #6]
 80004f2:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 80004f4:	79fb      	ldrb	r3, [r7, #7]
 80004f6:	737b      	strb	r3, [r7, #13]

	// Send Register Address then the Value
	I2C_MasterSendData(&g_ds1307I2cHandle, tx, 2, DS1307_I2C_ADDRESS, 0);
 80004f8:	f107 010c 	add.w	r1, r7, #12
 80004fc:	2300      	movs	r3, #0
 80004fe:	9300      	str	r3, [sp, #0]
 8000500:	2368      	movs	r3, #104	; 0x68
 8000502:	2202      	movs	r2, #2
 8000504:	4803      	ldr	r0, [pc, #12]	; (8000514 <ds1307_write+0x34>)
 8000506:	f000 fe5b 	bl	80011c0 <I2C_MasterSendData>

}
 800050a:	bf00      	nop
 800050c:	3710      	adds	r7, #16
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000098 	.word	0x20000098

08000518 <ds1307_read>:


static uint8_t ds1307_read(uint8_t reg_addr){
 8000518:	b580      	push	{r7, lr}
 800051a:	b086      	sub	sp, #24
 800051c:	af02      	add	r7, sp, #8
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]

	uint8_t data;
	I2C_MasterSendData(&g_ds1307I2cHandle, &reg_addr, 1, DS1307_I2C_ADDRESS, 0);
 8000522:	1df9      	adds	r1, r7, #7
 8000524:	2300      	movs	r3, #0
 8000526:	9300      	str	r3, [sp, #0]
 8000528:	2368      	movs	r3, #104	; 0x68
 800052a:	2201      	movs	r2, #1
 800052c:	4808      	ldr	r0, [pc, #32]	; (8000550 <ds1307_read+0x38>)
 800052e:	f000 fe47 	bl	80011c0 <I2C_MasterSendData>
	I2C_MasterReceiveData(&g_ds1307I2cHandle, &data, 1, DS1307_I2C_ADDRESS, 0);
 8000532:	f107 010f 	add.w	r1, r7, #15
 8000536:	2300      	movs	r3, #0
 8000538:	9300      	str	r3, [sp, #0]
 800053a:	2368      	movs	r3, #104	; 0x68
 800053c:	2201      	movs	r2, #1
 800053e:	4804      	ldr	r0, [pc, #16]	; (8000550 <ds1307_read+0x38>)
 8000540:	f000 fea5 	bl	800128e <I2C_MasterReceiveData>

	return data;
 8000544:	7bfb      	ldrb	r3, [r7, #15]
}
 8000546:	4618      	mov	r0, r3
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000098 	.word	0x20000098

08000554 <binary_to_bcd>:



static uint8_t binary_to_bcd(uint8_t value){
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
	uint8_t m, n, bcd;
	if(value >= 10){
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	2b09      	cmp	r3, #9
 8000562:	d919      	bls.n	8000598 <binary_to_bcd+0x44>
		m = value / 10;
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	4a10      	ldr	r2, [pc, #64]	; (80005a8 <binary_to_bcd+0x54>)
 8000568:	fba2 2303 	umull	r2, r3, r2, r3
 800056c:	08db      	lsrs	r3, r3, #3
 800056e:	73bb      	strb	r3, [r7, #14]
		n = value % 10;
 8000570:	79fa      	ldrb	r2, [r7, #7]
 8000572:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <binary_to_bcd+0x54>)
 8000574:	fba3 1302 	umull	r1, r3, r3, r2
 8000578:	08d9      	lsrs	r1, r3, #3
 800057a:	460b      	mov	r3, r1
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	440b      	add	r3, r1
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	1ad3      	subs	r3, r2, r3
 8000584:	737b      	strb	r3, [r7, #13]
		bcd = (uint8_t)((m << 4) | n);
 8000586:	7bbb      	ldrb	r3, [r7, #14]
 8000588:	011b      	lsls	r3, r3, #4
 800058a:	b25a      	sxtb	r2, r3
 800058c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000590:	4313      	orrs	r3, r2
 8000592:	b25b      	sxtb	r3, r3
 8000594:	73fb      	strb	r3, [r7, #15]
 8000596:	e001      	b.n	800059c <binary_to_bcd+0x48>
	}else{
		bcd = value;
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	73fb      	strb	r3, [r7, #15]
	}

	return bcd;
 800059c:	7bfb      	ldrb	r3, [r7, #15]

}
 800059e:	4618      	mov	r0, r3
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr
 80005a8:	cccccccd 	.word	0xcccccccd

080005ac <bcd_to_binary>:


static uint8_t bcd_to_binary(uint8_t value){
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	uint8_t m, n, binary;
	m = (uint8_t)(value >> 4) * 10;
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	091b      	lsrs	r3, r3, #4
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	461a      	mov	r2, r3
 80005be:	0092      	lsls	r2, r2, #2
 80005c0:	4413      	add	r3, r2
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	73fb      	strb	r3, [r7, #15]
	n = (value & (uint8_t)0x0F);
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	f003 030f 	and.w	r3, r3, #15
 80005cc:	73bb      	strb	r3, [r7, #14]
	binary = (uint8_t)(m + n);
 80005ce:	7bfa      	ldrb	r2, [r7, #15]
 80005d0:	7bbb      	ldrb	r3, [r7, #14]
 80005d2:	4413      	add	r3, r2
 80005d4:	737b      	strb	r3, [r7, #13]
	return binary;
 80005d6:	7b7b      	ldrb	r3, [r7, #13]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3714      	adds	r7, #20
 80005dc:	46bd      	mov	sp, r7
 80005de:	bc80      	pop	{r7}
 80005e0:	4770      	bx	lr
	...

080005e4 <lcd_send_command>:
static void lcd_enable(void);
static void mdelay(uint32_t cnt);
static void udelay(uint32_t cnt);


void lcd_send_command(uint8_t cmd){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
	/* RS=0 for LCD Command
	 * R/^W=0 for write
	 */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2100      	movs	r1, #0
 80005f2:	480c      	ldr	r0, [pc, #48]	; (8000624 <lcd_send_command+0x40>)
 80005f4:	f000 fc0a 	bl	8000e0c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2107      	movs	r1, #7
 80005fc:	4809      	ldr	r0, [pc, #36]	; (8000624 <lcd_send_command+0x40>)
 80005fe:	f000 fc05 	bl	8000e0c <GPIO_WriteToOutputPin>

	// Send the higher nibble
	write_4_bits(((cmd >> 4) & 0x0F));
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	091b      	lsrs	r3, r3, #4
 8000606:	b2db      	uxtb	r3, r3
 8000608:	4618      	mov	r0, r3
 800060a:	f000 f909 	bl	8000820 <write_4_bits>

	// Send the Lower Nibble
	write_4_bits((cmd & 0x0F));
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	f003 030f 	and.w	r3, r3, #15
 8000614:	b2db      	uxtb	r3, r3
 8000616:	4618      	mov	r0, r3
 8000618:	f000 f902 	bl	8000820 <write_4_bits>

}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40020800 	.word	0x40020800

08000628 <lcd_print_char>:


void lcd_print_char(uint8_t data){
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
	/* RS=1 for Data
	 * R/^W=0 for write
	 */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2100      	movs	r1, #0
 8000636:	480c      	ldr	r0, [pc, #48]	; (8000668 <lcd_print_char+0x40>)
 8000638:	f000 fbe8 	bl	8000e0c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	2107      	movs	r1, #7
 8000640:	4809      	ldr	r0, [pc, #36]	; (8000668 <lcd_print_char+0x40>)
 8000642:	f000 fbe3 	bl	8000e0c <GPIO_WriteToOutputPin>

	// Send the higher nibble
	write_4_bits((data >> 4));
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	091b      	lsrs	r3, r3, #4
 800064a:	b2db      	uxtb	r3, r3
 800064c:	4618      	mov	r0, r3
 800064e:	f000 f8e7 	bl	8000820 <write_4_bits>

	// Send the Lower Nibble
	write_4_bits((data & 0x0F));
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	f003 030f 	and.w	r3, r3, #15
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4618      	mov	r0, r3
 800065c:	f000 f8e0 	bl	8000820 <write_4_bits>



}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40020800 	.word	0x40020800

0800066c <lcd_print_string>:


void lcd_print_string(char *message){
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	do{
		lcd_print_char((uint8_t)*message);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ffd5 	bl	8000628 <lcd_print_char>
		message++;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	3301      	adds	r3, #1
 8000682:	607b      	str	r3, [r7, #4]
	}while(*message != '\0');
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d1f3      	bne.n	8000674 <lcd_print_string+0x8>
}
 800068c:	bf00      	nop
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <lcd_set_cursor>:

/*
 * Row can be 1 or 2
 * Column can be 1 to 16
 */
void lcd_set_cursor(uint8_t row, uint8_t column){
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
 800069c:	4603      	mov	r3, r0
 800069e:	460a      	mov	r2, r1
 80006a0:	71fb      	strb	r3, [r7, #7]
 80006a2:	4613      	mov	r3, r2
 80006a4:	71bb      	strb	r3, [r7, #6]
	column--;
 80006a6:	79bb      	ldrb	r3, [r7, #6]
 80006a8:	3b01      	subs	r3, #1
 80006aa:	71bb      	strb	r3, [r7, #6]
	switch(row){
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d002      	beq.n	80006b8 <lcd_set_cursor+0x22>
 80006b2:	2b02      	cmp	r3, #2
 80006b4:	d009      	beq.n	80006ca <lcd_set_cursor+0x34>
	case 2:
		// Set Cursor to 2nd Row Address and add index
		lcd_send_command((column |= 0xC0));
		break;
	default:
		break;
 80006b6:	e011      	b.n	80006dc <lcd_set_cursor+0x46>
		lcd_send_command((column |= 0x80));
 80006b8:	79bb      	ldrb	r3, [r7, #6]
 80006ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006be:	71bb      	strb	r3, [r7, #6]
 80006c0:	79bb      	ldrb	r3, [r7, #6]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ff8e 	bl	80005e4 <lcd_send_command>
		break;
 80006c8:	e008      	b.n	80006dc <lcd_set_cursor+0x46>
		lcd_send_command((column |= 0xC0));
 80006ca:	79bb      	ldrb	r3, [r7, #6]
 80006cc:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80006d0:	71bb      	strb	r3, [r7, #6]
 80006d2:	79bb      	ldrb	r3, [r7, #6]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff85 	bl	80005e4 <lcd_send_command>
		break;
 80006da:	bf00      	nop
	}
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <lcd_init>:


void lcd_init(void){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0

	// 1. Configure LCD GPIO Pins
	GPIO_Handle_t lcd_signal;

	// Common Configurations of pins
	lcd_signal.pGPIOx = LCD_GPIO_PORT;
 80006ea:	4b42      	ldr	r3, [pc, #264]	; (80007f4 <lcd_init+0x110>)
 80006ec:	607b      	str	r3, [r7, #4]
	lcd_signal.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT;
 80006ee:	2301      	movs	r3, #1
 80006f0:	727b      	strb	r3, [r7, #9]
	lcd_signal.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80006f2:	2300      	movs	r3, #0
 80006f4:	733b      	strb	r3, [r7, #12]
	lcd_signal.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80006f6:	2300      	movs	r3, #0
 80006f8:	72fb      	strb	r3, [r7, #11]
	lcd_signal.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80006fa:	2302      	movs	r3, #2
 80006fc:	72bb      	strb	r3, [r7, #10]

	// Initialize Each Pin
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RS;
 80006fe:	2300      	movs	r3, #0
 8000700:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	4618      	mov	r0, r3
 8000706:	f000 f9d5 	bl	8000ab4 <GPIO_Init>
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RW;
 800070a:	2307      	movs	r3, #7
 800070c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	4618      	mov	r0, r3
 8000712:	f000 f9cf 	bl	8000ab4 <GPIO_Init>
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_EN;
 8000716:	2308      	movs	r3, #8
 8000718:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	4618      	mov	r0, r3
 800071e:	f000 f9c9 	bl	8000ab4 <GPIO_Init>
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D4;
 8000722:	2309      	movs	r3, #9
 8000724:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	4618      	mov	r0, r3
 800072a:	f000 f9c3 	bl	8000ab4 <GPIO_Init>
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D5;
 800072e:	2304      	movs	r3, #4
 8000730:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	4618      	mov	r0, r3
 8000736:	f000 f9bd 	bl	8000ab4 <GPIO_Init>
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D6;
 800073a:	2305      	movs	r3, #5
 800073c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	4618      	mov	r0, r3
 8000742:	f000 f9b7 	bl	8000ab4 <GPIO_Init>
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D7;
 8000746:	2306      	movs	r3, #6
 8000748:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	4618      	mov	r0, r3
 800074e:	f000 f9b1 	bl	8000ab4 <GPIO_Init>

	// Clear all the pins
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2100      	movs	r1, #0
 8000756:	4827      	ldr	r0, [pc, #156]	; (80007f4 <lcd_init+0x110>)
 8000758:	f000 fb58 	bl	8000e0c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	2107      	movs	r1, #7
 8000760:	4824      	ldr	r0, [pc, #144]	; (80007f4 <lcd_init+0x110>)
 8000762:	f000 fb53 	bl	8000e0c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2108      	movs	r1, #8
 800076a:	4822      	ldr	r0, [pc, #136]	; (80007f4 <lcd_init+0x110>)
 800076c:	f000 fb4e 	bl	8000e0c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2109      	movs	r1, #9
 8000774:	481f      	ldr	r0, [pc, #124]	; (80007f4 <lcd_init+0x110>)
 8000776:	f000 fb49 	bl	8000e0c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2104      	movs	r1, #4
 800077e:	481d      	ldr	r0, [pc, #116]	; (80007f4 <lcd_init+0x110>)
 8000780:	f000 fb44 	bl	8000e0c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	2105      	movs	r1, #5
 8000788:	481a      	ldr	r0, [pc, #104]	; (80007f4 <lcd_init+0x110>)
 800078a:	f000 fb3f 	bl	8000e0c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	2106      	movs	r1, #6
 8000792:	4818      	ldr	r0, [pc, #96]	; (80007f4 <lcd_init+0x110>)
 8000794:	f000 fb3a 	bl	8000e0c <GPIO_WriteToOutputPin>


	// 2. Initialize the LCD

	// Wait 40milliseconds
	mdelay(40);
 8000798:	2028      	movs	r0, #40	; 0x28
 800079a:	f000 f88f 	bl	80008bc <mdelay>

	// Write 000011 to RS, R/^W, DB7, DB6, DB5, DB4
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	2100      	movs	r1, #0
 80007a2:	4814      	ldr	r0, [pc, #80]	; (80007f4 <lcd_init+0x110>)
 80007a4:	f000 fb32 	bl	8000e0c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2107      	movs	r1, #7
 80007ac:	4811      	ldr	r0, [pc, #68]	; (80007f4 <lcd_init+0x110>)
 80007ae:	f000 fb2d 	bl	8000e0c <GPIO_WriteToOutputPin>
	write_4_bits(0x3); // 0011
 80007b2:	2003      	movs	r0, #3
 80007b4:	f000 f834 	bl	8000820 <write_4_bits>

	// Wait for more than 4.1ms
	mdelay(5);
 80007b8:	2005      	movs	r0, #5
 80007ba:	f000 f87f 	bl	80008bc <mdelay>
	udelay(150);
 80007be:	2096      	movs	r0, #150	; 0x96
 80007c0:	f000 f894 	bl	80008ec <udelay>

	// Write 000011 to RS, R/^W, DB7, DB6, DB5, DB4
	write_4_bits(0x3); // 0011
 80007c4:	2003      	movs	r0, #3
 80007c6:	f000 f82b 	bl	8000820 <write_4_bits>

	// Wait for more than 1us
//	mdelay(1);

	// Write 000011 to RS, R/^W, DB7, DB6, DB5, DB4
	write_4_bits(0x3); // 0011
 80007ca:	2003      	movs	r0, #3
 80007cc:	f000 f828 	bl	8000820 <write_4_bits>

	// Write the following into DB7, DB6, DB5, DB4
	write_4_bits(0x2); // 0010
 80007d0:	2002      	movs	r0, #2
 80007d2:	f000 f825 	bl	8000820 <write_4_bits>
	lcd_send_command(LCD_CMD_4DL_2N_5X8F); // Function Set
 80007d6:	2028      	movs	r0, #40	; 0x28
 80007d8:	f7ff ff04 	bl	80005e4 <lcd_send_command>
	lcd_send_command(LCD_CMD_DON_CURON); // Display On Cursor On
 80007dc:	200e      	movs	r0, #14
 80007de:	f7ff ff01 	bl	80005e4 <lcd_send_command>
	lcd_display_clear(); // Display Clear
 80007e2:	f000 f809 	bl	80007f8 <lcd_display_clear>
	lcd_send_command(LCD_CMD_INCADD); // Entry Mode Set
 80007e6:	2006      	movs	r0, #6
 80007e8:	f7ff fefc 	bl	80005e4 <lcd_send_command>


}
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40020800 	.word	0x40020800

080007f8 <lcd_display_clear>:


void lcd_display_clear(void){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	lcd_send_command(LCD_CMD_DIS_CLEAR);
 80007fc:	2001      	movs	r0, #1
 80007fe:	f7ff fef1 	bl	80005e4 <lcd_send_command>
	mdelay(5);
 8000802:	2005      	movs	r0, #5
 8000804:	f000 f85a 	bl	80008bc <mdelay>
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}

0800080c <lcd_display_return_home>:

void lcd_display_return_home(void){
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	lcd_send_command(LCD_CMD_DIS_RETURN_HOME);
 8000810:	2002      	movs	r0, #2
 8000812:	f7ff fee7 	bl	80005e4 <lcd_send_command>
	mdelay(5);
 8000816:	2005      	movs	r0, #5
 8000818:	f000 f850 	bl	80008bc <mdelay>
}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}

08000820 <write_4_bits>:


// Writes 4 bits of Data to DB7, DB6, DB5, DB4
static void write_4_bits(uint8_t value){
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, (value & 0x1));
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	f003 0301 	and.w	r3, r3, #1
 8000830:	b2db      	uxtb	r3, r3
 8000832:	461a      	mov	r2, r3
 8000834:	2109      	movs	r1, #9
 8000836:	4815      	ldr	r0, [pc, #84]	; (800088c <write_4_bits+0x6c>)
 8000838:	f000 fae8 	bl	8000e0c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, ((value >> 1) & 0x1));
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	085b      	lsrs	r3, r3, #1
 8000840:	b2db      	uxtb	r3, r3
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	b2db      	uxtb	r3, r3
 8000848:	461a      	mov	r2, r3
 800084a:	2104      	movs	r1, #4
 800084c:	480f      	ldr	r0, [pc, #60]	; (800088c <write_4_bits+0x6c>)
 800084e:	f000 fadd 	bl	8000e0c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, ((value >> 2) & 0x1));
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	089b      	lsrs	r3, r3, #2
 8000856:	b2db      	uxtb	r3, r3
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	b2db      	uxtb	r3, r3
 800085e:	461a      	mov	r2, r3
 8000860:	2105      	movs	r1, #5
 8000862:	480a      	ldr	r0, [pc, #40]	; (800088c <write_4_bits+0x6c>)
 8000864:	f000 fad2 	bl	8000e0c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, ((value >> 3) & 0x1));
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	08db      	lsrs	r3, r3, #3
 800086c:	b2db      	uxtb	r3, r3
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	b2db      	uxtb	r3, r3
 8000874:	461a      	mov	r2, r3
 8000876:	2106      	movs	r1, #6
 8000878:	4804      	ldr	r0, [pc, #16]	; (800088c <write_4_bits+0x6c>)
 800087a:	f000 fac7 	bl	8000e0c <GPIO_WriteToOutputPin>

	lcd_enable();
 800087e:	f000 f807 	bl	8000890 <lcd_enable>
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40020800 	.word	0x40020800

08000890 <lcd_enable>:


// Transitions the Enable line to make the LCD Read
static void lcd_enable(void){
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0

	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	2108      	movs	r1, #8
 8000898:	4807      	ldr	r0, [pc, #28]	; (80008b8 <lcd_enable+0x28>)
 800089a:	f000 fab7 	bl	8000e0c <GPIO_WriteToOutputPin>
	udelay(10); // Wait 10us
 800089e:	200a      	movs	r0, #10
 80008a0:	f000 f824 	bl	80008ec <udelay>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2108      	movs	r1, #8
 80008a8:	4803      	ldr	r0, [pc, #12]	; (80008b8 <lcd_enable+0x28>)
 80008aa:	f000 faaf 	bl	8000e0c <GPIO_WriteToOutputPin>
	udelay(100); // Wait >37us
 80008ae:	2064      	movs	r0, #100	; 0x64
 80008b0:	f000 f81c 	bl	80008ec <udelay>
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40020800 	.word	0x40020800

080008bc <mdelay>:


static void mdelay(uint32_t cnt){
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0; i < (cnt * 1000); i++);
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	e002      	b.n	80008d0 <mdelay+0x14>
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	3301      	adds	r3, #1
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008d6:	fb02 f303 	mul.w	r3, r2, r3
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d3f4      	bcc.n	80008ca <mdelay+0xe>
}
 80008e0:	bf00      	nop
 80008e2:	bf00      	nop
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr

080008ec <udelay>:

static void udelay(uint32_t cnt){
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0; i < (cnt * 1); i++);
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	e002      	b.n	8000900 <udelay+0x14>
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	3301      	adds	r3, #1
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	429a      	cmp	r2, r3
 8000906:	d3f8      	bcc.n	80008fa <udelay+0xe>
}
 8000908:	bf00      	nop
 800090a:	bf00      	nop
 800090c:	3714      	adds	r7, #20
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr

08000914 <GPIO_PeriClockControl>:
 * @return            -  void
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi){
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	460b      	mov	r3, r1
 800091e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){ // Enable
 8000920:	78fb      	ldrb	r3, [r7, #3]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d157      	bne.n	80009d6 <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA){
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4a59      	ldr	r2, [pc, #356]	; (8000a90 <GPIO_PeriClockControl+0x17c>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d106      	bne.n	800093c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800092e:	4b59      	ldr	r3, [pc, #356]	; (8000a94 <GPIO_PeriClockControl+0x180>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a58      	ldr	r2, [pc, #352]	; (8000a94 <GPIO_PeriClockControl+0x180>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
		}else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}

}
 800093a:	e0a3      	b.n	8000a84 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB){
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4a56      	ldr	r2, [pc, #344]	; (8000a98 <GPIO_PeriClockControl+0x184>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d106      	bne.n	8000952 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000944:	4b53      	ldr	r3, [pc, #332]	; (8000a94 <GPIO_PeriClockControl+0x180>)
 8000946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000948:	4a52      	ldr	r2, [pc, #328]	; (8000a94 <GPIO_PeriClockControl+0x180>)
 800094a:	f043 0302 	orr.w	r3, r3, #2
 800094e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000950:	e098      	b.n	8000a84 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC){
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a51      	ldr	r2, [pc, #324]	; (8000a9c <GPIO_PeriClockControl+0x188>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d106      	bne.n	8000968 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800095a:	4b4e      	ldr	r3, [pc, #312]	; (8000a94 <GPIO_PeriClockControl+0x180>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a4d      	ldr	r2, [pc, #308]	; (8000a94 <GPIO_PeriClockControl+0x180>)
 8000960:	f043 0304 	orr.w	r3, r3, #4
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000966:	e08d      	b.n	8000a84 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOD){
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a4d      	ldr	r2, [pc, #308]	; (8000aa0 <GPIO_PeriClockControl+0x18c>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d106      	bne.n	800097e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000970:	4b48      	ldr	r3, [pc, #288]	; (8000a94 <GPIO_PeriClockControl+0x180>)
 8000972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000974:	4a47      	ldr	r2, [pc, #284]	; (8000a94 <GPIO_PeriClockControl+0x180>)
 8000976:	f043 0308 	orr.w	r3, r3, #8
 800097a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800097c:	e082      	b.n	8000a84 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE){
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a48      	ldr	r2, [pc, #288]	; (8000aa4 <GPIO_PeriClockControl+0x190>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d106      	bne.n	8000994 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000986:	4b43      	ldr	r3, [pc, #268]	; (8000a94 <GPIO_PeriClockControl+0x180>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a42      	ldr	r2, [pc, #264]	; (8000a94 <GPIO_PeriClockControl+0x180>)
 800098c:	f043 0310 	orr.w	r3, r3, #16
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000992:	e077      	b.n	8000a84 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF){
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4a44      	ldr	r2, [pc, #272]	; (8000aa8 <GPIO_PeriClockControl+0x194>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d106      	bne.n	80009aa <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800099c:	4b3d      	ldr	r3, [pc, #244]	; (8000a94 <GPIO_PeriClockControl+0x180>)
 800099e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a0:	4a3c      	ldr	r2, [pc, #240]	; (8000a94 <GPIO_PeriClockControl+0x180>)
 80009a2:	f043 0320 	orr.w	r3, r3, #32
 80009a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009a8:	e06c      	b.n	8000a84 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOG){
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a3f      	ldr	r2, [pc, #252]	; (8000aac <GPIO_PeriClockControl+0x198>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d106      	bne.n	80009c0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80009b2:	4b38      	ldr	r3, [pc, #224]	; (8000a94 <GPIO_PeriClockControl+0x180>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a37      	ldr	r2, [pc, #220]	; (8000a94 <GPIO_PeriClockControl+0x180>)
 80009b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009be:	e061      	b.n	8000a84 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOH){
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a3b      	ldr	r2, [pc, #236]	; (8000ab0 <GPIO_PeriClockControl+0x19c>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d15d      	bne.n	8000a84 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 80009c8:	4b32      	ldr	r3, [pc, #200]	; (8000a94 <GPIO_PeriClockControl+0x180>)
 80009ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009cc:	4a31      	ldr	r2, [pc, #196]	; (8000a94 <GPIO_PeriClockControl+0x180>)
 80009ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009d4:	e056      	b.n	8000a84 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA){
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a2d      	ldr	r2, [pc, #180]	; (8000a90 <GPIO_PeriClockControl+0x17c>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d106      	bne.n	80009ec <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 80009de:	4b2d      	ldr	r3, [pc, #180]	; (8000a94 <GPIO_PeriClockControl+0x180>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a2c      	ldr	r2, [pc, #176]	; (8000a94 <GPIO_PeriClockControl+0x180>)
 80009e4:	f023 0301 	bic.w	r3, r3, #1
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009ea:	e04b      	b.n	8000a84 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB){
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a2a      	ldr	r2, [pc, #168]	; (8000a98 <GPIO_PeriClockControl+0x184>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d106      	bne.n	8000a02 <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 80009f4:	4b27      	ldr	r3, [pc, #156]	; (8000a94 <GPIO_PeriClockControl+0x180>)
 80009f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f8:	4a26      	ldr	r2, [pc, #152]	; (8000a94 <GPIO_PeriClockControl+0x180>)
 80009fa:	f023 0302 	bic.w	r3, r3, #2
 80009fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a00:	e040      	b.n	8000a84 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC){
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a25      	ldr	r2, [pc, #148]	; (8000a9c <GPIO_PeriClockControl+0x188>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d106      	bne.n	8000a18 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 8000a0a:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <GPIO_PeriClockControl+0x180>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a21      	ldr	r2, [pc, #132]	; (8000a94 <GPIO_PeriClockControl+0x180>)
 8000a10:	f023 0304 	bic.w	r3, r3, #4
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a16:	e035      	b.n	8000a84 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOD){
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a21      	ldr	r2, [pc, #132]	; (8000aa0 <GPIO_PeriClockControl+0x18c>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d106      	bne.n	8000a2e <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 8000a20:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <GPIO_PeriClockControl+0x180>)
 8000a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a24:	4a1b      	ldr	r2, [pc, #108]	; (8000a94 <GPIO_PeriClockControl+0x180>)
 8000a26:	f023 0308 	bic.w	r3, r3, #8
 8000a2a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a2c:	e02a      	b.n	8000a84 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE){
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a1c      	ldr	r2, [pc, #112]	; (8000aa4 <GPIO_PeriClockControl+0x190>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d106      	bne.n	8000a44 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <GPIO_PeriClockControl+0x180>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a16      	ldr	r2, [pc, #88]	; (8000a94 <GPIO_PeriClockControl+0x180>)
 8000a3c:	f023 0310 	bic.w	r3, r3, #16
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a42:	e01f      	b.n	8000a84 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF){
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a18      	ldr	r2, [pc, #96]	; (8000aa8 <GPIO_PeriClockControl+0x194>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d106      	bne.n	8000a5a <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <GPIO_PeriClockControl+0x180>)
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a50:	4a10      	ldr	r2, [pc, #64]	; (8000a94 <GPIO_PeriClockControl+0x180>)
 8000a52:	f023 0320 	bic.w	r3, r3, #32
 8000a56:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a58:	e014      	b.n	8000a84 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOG){
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a13      	ldr	r2, [pc, #76]	; (8000aac <GPIO_PeriClockControl+0x198>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d106      	bne.n	8000a70 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <GPIO_PeriClockControl+0x180>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a0b      	ldr	r2, [pc, #44]	; (8000a94 <GPIO_PeriClockControl+0x180>)
 8000a68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a6e:	e009      	b.n	8000a84 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOH){
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a0f      	ldr	r2, [pc, #60]	; (8000ab0 <GPIO_PeriClockControl+0x19c>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d105      	bne.n	8000a84 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <GPIO_PeriClockControl+0x180>)
 8000a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7c:	4a05      	ldr	r2, [pc, #20]	; (8000a94 <GPIO_PeriClockControl+0x180>)
 8000a7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a82:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	40020000 	.word	0x40020000
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020400 	.word	0x40020400
 8000a9c:	40020800 	.word	0x40020800
 8000aa0:	40020c00 	.word	0x40020c00
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40021400 	.word	0x40021400
 8000aac:	40021800 	.word	0x40021800
 8000ab0:	40021c00 	.word	0x40021c00

08000ab4 <GPIO_Init>:


/*
 * Initialize and De-Initialize
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]

	// Enable Peripheral Clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff ff26 	bl	8000914 <GPIO_PeriClockControl>

	uint32_t temp = 0; // Temporary Register
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]

	// 1. Configure Mode of GPIO Pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	795b      	ldrb	r3, [r3, #5]
 8000ad0:	2b03      	cmp	r3, #3
 8000ad2:	d821      	bhi.n	8000b18 <GPIO_Init+0x64>
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	795b      	ldrb	r3, [r3, #5]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	791b      	ldrb	r3, [r3, #4]
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae4:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	791b      	ldrb	r3, [r3, #4]
 8000af0:	4619      	mov	r1, r3
 8000af2:	2303      	movs	r3, #3
 8000af4:	408b      	lsls	r3, r1
 8000af6:	43db      	mvns	r3, r3
 8000af8:	4619      	mov	r1, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	400a      	ands	r2, r1
 8000b00:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // Set
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	6819      	ldr	r1, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	e0b8      	b.n	8000c8a <GPIO_Init+0x1d6>
	}else{
		// TODO: Interrupt Mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	795b      	ldrb	r3, [r3, #5]
 8000b1c:	2b04      	cmp	r3, #4
 8000b1e:	d117      	bne.n	8000b50 <GPIO_Init+0x9c>
			// Configure the Falling Trigger Selection Register
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b20:	4b43      	ldr	r3, [pc, #268]	; (8000c30 <GPIO_Init+0x17c>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	7912      	ldrb	r2, [r2, #4]
 8000b28:	4611      	mov	r1, r2
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	408a      	lsls	r2, r1
 8000b2e:	4611      	mov	r1, r2
 8000b30:	4a3f      	ldr	r2, [pc, #252]	; (8000c30 <GPIO_Init+0x17c>)
 8000b32:	430b      	orrs	r3, r1
 8000b34:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear RTSR
 8000b36:	4b3e      	ldr	r3, [pc, #248]	; (8000c30 <GPIO_Init+0x17c>)
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	7912      	ldrb	r2, [r2, #4]
 8000b3e:	4611      	mov	r1, r2
 8000b40:	2201      	movs	r2, #1
 8000b42:	408a      	lsls	r2, r1
 8000b44:	43d2      	mvns	r2, r2
 8000b46:	4611      	mov	r1, r2
 8000b48:	4a39      	ldr	r2, [pc, #228]	; (8000c30 <GPIO_Init+0x17c>)
 8000b4a:	400b      	ands	r3, r1
 8000b4c:	6093      	str	r3, [r2, #8]
 8000b4e:	e035      	b.n	8000bbc <GPIO_Init+0x108>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	795b      	ldrb	r3, [r3, #5]
 8000b54:	2b05      	cmp	r3, #5
 8000b56:	d117      	bne.n	8000b88 <GPIO_Init+0xd4>
			// Configure the Rising Trigger Selection Register
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b58:	4b35      	ldr	r3, [pc, #212]	; (8000c30 <GPIO_Init+0x17c>)
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	7912      	ldrb	r2, [r2, #4]
 8000b60:	4611      	mov	r1, r2
 8000b62:	2201      	movs	r2, #1
 8000b64:	408a      	lsls	r2, r1
 8000b66:	4611      	mov	r1, r2
 8000b68:	4a31      	ldr	r2, [pc, #196]	; (8000c30 <GPIO_Init+0x17c>)
 8000b6a:	430b      	orrs	r3, r1
 8000b6c:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear FTSR
 8000b6e:	4b30      	ldr	r3, [pc, #192]	; (8000c30 <GPIO_Init+0x17c>)
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	7912      	ldrb	r2, [r2, #4]
 8000b76:	4611      	mov	r1, r2
 8000b78:	2201      	movs	r2, #1
 8000b7a:	408a      	lsls	r2, r1
 8000b7c:	43d2      	mvns	r2, r2
 8000b7e:	4611      	mov	r1, r2
 8000b80:	4a2b      	ldr	r2, [pc, #172]	; (8000c30 <GPIO_Init+0x17c>)
 8000b82:	400b      	ands	r3, r1
 8000b84:	60d3      	str	r3, [r2, #12]
 8000b86:	e019      	b.n	8000bbc <GPIO_Init+0x108>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	795b      	ldrb	r3, [r3, #5]
 8000b8c:	2b06      	cmp	r3, #6
 8000b8e:	d115      	bne.n	8000bbc <GPIO_Init+0x108>
			// Configure Both Falling and Rising
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b90:	4b27      	ldr	r3, [pc, #156]	; (8000c30 <GPIO_Init+0x17c>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	7912      	ldrb	r2, [r2, #4]
 8000b98:	4611      	mov	r1, r2
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	408a      	lsls	r2, r1
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4a23      	ldr	r2, [pc, #140]	; (8000c30 <GPIO_Init+0x17c>)
 8000ba2:	430b      	orrs	r3, r1
 8000ba4:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ba6:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <GPIO_Init+0x17c>)
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	7912      	ldrb	r2, [r2, #4]
 8000bae:	4611      	mov	r1, r2
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	408a      	lsls	r2, r1
 8000bb4:	4611      	mov	r1, r2
 8000bb6:	4a1e      	ldr	r2, [pc, #120]	; (8000c30 <GPIO_Init+0x17c>)
 8000bb8:	430b      	orrs	r3, r1
 8000bba:	6093      	str	r3, [r2, #8]
		}

		// Configure the GPIO port Selection in SYSCFG_EXTICR
		uint8_t ExtiCR_Number = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	791b      	ldrb	r3, [r3, #4]
 8000bc0:	089b      	lsrs	r3, r3, #2
 8000bc2:	72fb      	strb	r3, [r7, #11]
		uint8_t ExtiCR_ShiftOffset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	791b      	ldrb	r3, [r3, #4]
 8000bc8:	f003 0303 	and.w	r3, r3, #3
 8000bcc:	72bb      	strb	r3, [r7, #10]
		uint8_t portcode = GPIO_BASEADDR_TO_PORTCODE(pGPIOHandle->pGPIOx);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a18      	ldr	r2, [pc, #96]	; (8000c34 <GPIO_Init+0x180>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d03b      	beq.n	8000c50 <GPIO_Init+0x19c>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a16      	ldr	r2, [pc, #88]	; (8000c38 <GPIO_Init+0x184>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d024      	beq.n	8000c2c <GPIO_Init+0x178>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a15      	ldr	r2, [pc, #84]	; (8000c3c <GPIO_Init+0x188>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d01d      	beq.n	8000c28 <GPIO_Init+0x174>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a13      	ldr	r2, [pc, #76]	; (8000c40 <GPIO_Init+0x18c>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d016      	beq.n	8000c24 <GPIO_Init+0x170>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <GPIO_Init+0x190>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d00f      	beq.n	8000c20 <GPIO_Init+0x16c>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a10      	ldr	r2, [pc, #64]	; (8000c48 <GPIO_Init+0x194>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d008      	beq.n	8000c1c <GPIO_Init+0x168>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a0f      	ldr	r2, [pc, #60]	; (8000c4c <GPIO_Init+0x198>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d101      	bne.n	8000c18 <GPIO_Init+0x164>
 8000c14:	2306      	movs	r3, #6
 8000c16:	e01c      	b.n	8000c52 <GPIO_Init+0x19e>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	e01a      	b.n	8000c52 <GPIO_Init+0x19e>
 8000c1c:	2305      	movs	r3, #5
 8000c1e:	e018      	b.n	8000c52 <GPIO_Init+0x19e>
 8000c20:	2304      	movs	r3, #4
 8000c22:	e016      	b.n	8000c52 <GPIO_Init+0x19e>
 8000c24:	2303      	movs	r3, #3
 8000c26:	e014      	b.n	8000c52 <GPIO_Init+0x19e>
 8000c28:	2302      	movs	r3, #2
 8000c2a:	e012      	b.n	8000c52 <GPIO_Init+0x19e>
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	e010      	b.n	8000c52 <GPIO_Init+0x19e>
 8000c30:	40013c00 	.word	0x40013c00
 8000c34:	40020000 	.word	0x40020000
 8000c38:	40020400 	.word	0x40020400
 8000c3c:	40020800 	.word	0x40020800
 8000c40:	40020c00 	.word	0x40020c00
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40021400 	.word	0x40021400
 8000c4c:	40021800 	.word	0x40021800
 8000c50:	2300      	movs	r3, #0
 8000c52:	727b      	strb	r3, [r7, #9]
		SYSCFG_PCLK_EN();
 8000c54:	4b6a      	ldr	r3, [pc, #424]	; (8000e00 <GPIO_Init+0x34c>)
 8000c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c58:	4a69      	ldr	r2, [pc, #420]	; (8000e00 <GPIO_Init+0x34c>)
 8000c5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c5e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[ExtiCR_Number] = portcode << (ExtiCR_ShiftOffset * 4);
 8000c60:	7a7a      	ldrb	r2, [r7, #9]
 8000c62:	7abb      	ldrb	r3, [r7, #10]
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	fa02 f103 	lsl.w	r1, r2, r3
 8000c6a:	4a66      	ldr	r2, [pc, #408]	; (8000e04 <GPIO_Init+0x350>)
 8000c6c:	7afb      	ldrb	r3, [r7, #11]
 8000c6e:	3302      	adds	r3, #2
 8000c70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c74:	4b64      	ldr	r3, [pc, #400]	; (8000e08 <GPIO_Init+0x354>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	7912      	ldrb	r2, [r2, #4]
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	2201      	movs	r2, #1
 8000c80:	408a      	lsls	r2, r1
 8000c82:	4611      	mov	r1, r2
 8000c84:	4a60      	ldr	r2, [pc, #384]	; (8000e08 <GPIO_Init+0x354>)
 8000c86:	430b      	orrs	r3, r1
 8000c88:	6013      	str	r3, [r2, #0]
	}

	// 2. Configure Speed
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	799b      	ldrb	r3, [r3, #6]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	791b      	ldrb	r3, [r3, #4]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	689a      	ldr	r2, [r3, #8]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	791b      	ldrb	r3, [r3, #4]
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	2303      	movs	r3, #3
 8000caa:	408b      	lsls	r3, r1
 8000cac:	43db      	mvns	r3, r3
 8000cae:	4619      	mov	r1, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	400a      	ands	r2, r1
 8000cb6:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	6899      	ldr	r1, [r3, #8]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]

	// 3. Configure Pull-up Pull-down Settings
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	79db      	ldrb	r3, [r3, #7]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	791b      	ldrb	r3, [r3, #4]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	68da      	ldr	r2, [r3, #12]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	791b      	ldrb	r3, [r3, #4]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	2303      	movs	r3, #3
 8000cec:	408b      	lsls	r3, r1
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	400a      	ands	r2, r1
 8000cf8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68d9      	ldr	r1, [r3, #12]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	68fa      	ldr	r2, [r7, #12]
 8000d06:	430a      	orrs	r2, r1
 8000d08:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]

	// 4. Configure the Output Type
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	7a1b      	ldrb	r3, [r3, #8]
 8000d12:	461a      	mov	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	791b      	ldrb	r3, [r3, #4]
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	685a      	ldr	r2, [r3, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	791b      	ldrb	r3, [r3, #4]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	4619      	mov	r1, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	400a      	ands	r2, r1
 8000d38:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	6859      	ldr	r1, [r3, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	68fa      	ldr	r2, [r7, #12]
 8000d46:	430a      	orrs	r2, r1
 8000d48:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]

	// 5. Configure Alternate Functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFUN){
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	795b      	ldrb	r3, [r3, #5]
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d150      	bne.n	8000df8 <GPIO_Init+0x344>
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= GPIO_PIN_NO_7){
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	791b      	ldrb	r3, [r3, #4]
 8000d5a:	2b07      	cmp	r3, #7
 8000d5c:	d826      	bhi.n	8000dac <GPIO_Init+0x2f8>
				// AFRL Registers
				temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	7a5b      	ldrb	r3, [r3, #9]
 8000d62:	461a      	mov	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	791b      	ldrb	r3, [r3, #4]
 8000d68:	f003 0307 	and.w	r3, r3, #7
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->AFRL &= ~(0xF << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8))); // Clear
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	6a1a      	ldr	r2, [r3, #32]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	791b      	ldrb	r3, [r3, #4]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	210f      	movs	r1, #15
 8000d86:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	400a      	ands	r2, r1
 8000d94:	621a      	str	r2, [r3, #32]
				pGPIOHandle->pGPIOx->AFRL |= temp;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	6a19      	ldr	r1, [r3, #32]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	68fa      	ldr	r2, [r7, #12]
 8000da2:	430a      	orrs	r2, r1
 8000da4:	621a      	str	r2, [r3, #32]
				temp = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->AFRH |= temp;
				temp = 0;
			}
	}

}
 8000daa:	e025      	b.n	8000df8 <GPIO_Init+0x344>
				temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	7a5b      	ldrb	r3, [r3, #9]
 8000db0:	461a      	mov	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	791b      	ldrb	r3, [r3, #4]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->AFRH &= ~(0xF << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8))); // Clear
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	791b      	ldrb	r3, [r3, #4]
 8000dcc:	f003 0307 	and.w	r3, r3, #7
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	210f      	movs	r1, #15
 8000dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	4619      	mov	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	400a      	ands	r2, r1
 8000de2:	625a      	str	r2, [r3, #36]	; 0x24
				pGPIOHandle->pGPIOx->AFRH |= temp;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	430a      	orrs	r2, r1
 8000df2:	625a      	str	r2, [r3, #36]	; 0x24
				temp = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
}
 8000df8:	bf00      	nop
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40013800 	.word	0x40013800
 8000e08:	40013c00 	.word	0x40013c00

08000e0c <GPIO_WriteToOutputPin>:
	value = (uint16_t)pGPIOx->IDR;
	return value;

}

void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value){
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	70fb      	strb	r3, [r7, #3]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET){
 8000e1c:	78bb      	ldrb	r3, [r7, #2]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d109      	bne.n	8000e36 <GPIO_WriteToOutputPin+0x2a>
		// Set 1
		pGPIOx->ODR |= (1 << PinNumber);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	78fa      	ldrb	r2, [r7, #3]
 8000e28:	2101      	movs	r1, #1
 8000e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	615a      	str	r2, [r3, #20]
	}else{
		// Set 0
		pGPIOx->ODR &= ~(1 << PinNumber);
	}

}
 8000e34:	e009      	b.n	8000e4a <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	78fa      	ldrb	r2, [r7, #3]
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e42:	43d2      	mvns	r2, r2
 8000e44:	401a      	ands	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	615a      	str	r2, [r3, #20]
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <I2C_GenerateStartCondition>:
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle);
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle);
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle);

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	601a      	str	r2, [r3, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr

08000e72 <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b083      	sub	sp, #12
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000e7e:	78fb      	ldrb	r3, [r7, #3]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 8000e84:	78fb      	ldrb	r3, [r7, #3]
 8000e86:	f023 0301 	bic.w	r3, r3, #1
 8000e8a:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000e8c:	78fa      	ldrb	r2, [r7, #3]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	611a      	str	r2, [r3, #16]
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <I2C_ExecuteAddressPhaseRead>:


static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000ea8:	78fb      	ldrb	r3, [r7, #3]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 8000eae:	78fb      	ldrb	r3, [r7, #3]
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000eb6:	78fa      	ldrb	r2, [r7, #3]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	611a      	str	r2, [r3, #16]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr

08000ec6 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle){
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b084      	sub	sp, #16
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	// Check for Device Mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d01f      	beq.n	8000f1c <I2C_ClearADDRFlag+0x56>
		// Master
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	7f1b      	ldrb	r3, [r3, #28]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d112      	bne.n	8000f0a <I2C_ClearADDRFlag+0x44>
			if(pI2CHandle->RxSize == 1){
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a1b      	ldr	r3, [r3, #32]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d11f      	bne.n	8000f2c <I2C_ClearADDRFlag+0x66>
				// Disable the ACK
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 fa5d 	bl	80013b2 <I2C_ManageAcking>

				// Clear the ADDR Flag (read SR1 and SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	60fb      	str	r3, [r7, #12]
		// Clear the ADDR Flag (read SR1 and SR2)
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}
}
 8000f08:	e010      	b.n	8000f2c <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	695b      	ldr	r3, [r3, #20]
 8000f10:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	60fb      	str	r3, [r7, #12]
}
 8000f1a:	e007      	b.n	8000f2c <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	60fb      	str	r3, [r7, #12]
}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <I2C_GenerateStopCondition>:

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	601a      	str	r2, [r3, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
	...

08000f54 <I2C_PeriClockControl>:
	}
}


// Peripheral Clock Setup
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000f60:	78fb      	ldrb	r3, [r7, #3]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d120      	bne.n	8000fa8 <I2C_PeriClockControl+0x54>
		// Enable
		if(pI2Cx == I2C1){
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a22      	ldr	r2, [pc, #136]	; (8000ff4 <I2C_PeriClockControl+0xa0>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d106      	bne.n	8000f7c <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 8000f6e:	4b22      	ldr	r3, [pc, #136]	; (8000ff8 <I2C_PeriClockControl+0xa4>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	4a21      	ldr	r2, [pc, #132]	; (8000ff8 <I2C_PeriClockControl+0xa4>)
 8000f74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f78:	6413      	str	r3, [r2, #64]	; 0x40
			I2C2_PCLK_DI();
		}else if(pI2Cx == I2C3){
			I2C3_PCLK_DI();
		}
	}
}
 8000f7a:	e035      	b.n	8000fe8 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C2){
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a1f      	ldr	r2, [pc, #124]	; (8000ffc <I2C_PeriClockControl+0xa8>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d106      	bne.n	8000f92 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000f84:	4b1c      	ldr	r3, [pc, #112]	; (8000ff8 <I2C_PeriClockControl+0xa4>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	4a1b      	ldr	r2, [pc, #108]	; (8000ff8 <I2C_PeriClockControl+0xa4>)
 8000f8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f8e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f90:	e02a      	b.n	8000fe8 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C3){
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a1a      	ldr	r2, [pc, #104]	; (8001000 <I2C_PeriClockControl+0xac>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d126      	bne.n	8000fe8 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000f9a:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <I2C_PeriClockControl+0xa4>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	4a16      	ldr	r2, [pc, #88]	; (8000ff8 <I2C_PeriClockControl+0xa4>)
 8000fa0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fa4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000fa6:	e01f      	b.n	8000fe8 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1){
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <I2C_PeriClockControl+0xa0>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d106      	bne.n	8000fbe <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <I2C_PeriClockControl+0xa4>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	4a10      	ldr	r2, [pc, #64]	; (8000ff8 <I2C_PeriClockControl+0xa4>)
 8000fb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000fba:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000fbc:	e014      	b.n	8000fe8 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C2){
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <I2C_PeriClockControl+0xa8>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d106      	bne.n	8000fd4 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <I2C_PeriClockControl+0xa4>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <I2C_PeriClockControl+0xa4>)
 8000fcc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000fd0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000fd2:	e009      	b.n	8000fe8 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C3){
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <I2C_PeriClockControl+0xac>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d105      	bne.n	8000fe8 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <I2C_PeriClockControl+0xa4>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <I2C_PeriClockControl+0xa4>)
 8000fe2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000fe6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40005400 	.word	0x40005400
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40005800 	.word	0x40005800
 8001000:	40005c00 	.word	0x40005c00

08001004 <I2C_PeripheralControl>:

// I2C Peripheral Control
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8001010:	78fb      	ldrb	r3, [r7, #3]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d106      	bne.n	8001024 <I2C_PeripheralControl+0x20>
		// Enable
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f043 0201 	orr.w	r2, r3, #1
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	601a      	str	r2, [r3, #0]
	}else{
		// Disable
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}

}
 8001022:	e005      	b.n	8001030 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f023 0201 	bic.w	r2, r3, #1
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	601a      	str	r2, [r3, #0]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
	...

0800103c <I2C_Init>:


void I2C_Init(I2C_Handle_t *pI2C_Handle){
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]

	// Enable the Clock for the I2Cx Peripheral
	I2C_PeriClockControl(pI2C_Handle->pI2Cx, ENABLE);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2101      	movs	r1, #1
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff ff80 	bl	8000f54 <I2C_PeriClockControl>

	// ACK Control Bit
	tempreg |= pI2C_Handle->I2C_Config.I2C_ACKControl << 10;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	7a5b      	ldrb	r3, [r3, #9]
 8001058:	029b      	lsls	r3, r3, #10
 800105a:	461a      	mov	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4313      	orrs	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
	pI2C_Handle->pI2Cx->CR1 = tempreg;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	601a      	str	r2, [r3, #0]

	// Configure the FREQ field of CR2
	tempreg = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
	tempreg |= (RCC_GetPCLK1Value() / 1000000U); // Divide by 1MHz to only get 16 instead of 16MHz
 800106e:	f000 f9d9 	bl	8001424 <RCC_GetPCLK1Value>
 8001072:	4603      	mov	r3, r0
 8001074:	4a4f      	ldr	r2, [pc, #316]	; (80011b4 <I2C_Init+0x178>)
 8001076:	fba2 2303 	umull	r2, r3, r2, r3
 800107a:	0c9b      	lsrs	r3, r3, #18
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	4313      	orrs	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
	pI2C_Handle->pI2Cx->CR2 = (tempreg & 0x3F);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800108c:	605a      	str	r2, [r3, #4]

	// Device Own Address
	tempreg = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2C_Handle->I2C_Config.I2C_DeviceAddress << 1;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	7a1b      	ldrb	r3, [r3, #8]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	461a      	mov	r2, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4313      	orrs	r3, r2
 800109e:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a6:	60fb      	str	r3, [r7, #12]
	pI2C_Handle->pI2Cx->OAR1 |= tempreg;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	6899      	ldr	r1, [r3, #8]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	430a      	orrs	r2, r1
 80010b6:	609a      	str	r2, [r3, #8]

	// Clock Control Calculations
	uint16_t ccr_value = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
	if(pI2C_Handle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	4a3c      	ldr	r2, [pc, #240]	; (80011b8 <I2C_Init+0x17c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d813      	bhi.n	80010f2 <I2C_Init+0xb6>
		// Standard Mode
		tempreg &= ~(1 << 15);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80010d0:	60fb      	str	r3, [r7, #12]
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2C_Handle->I2C_Config.I2C_SCLSpeed);
 80010d2:	f000 f9a7 	bl	8001424 <RCC_GetPCLK1Value>
 80010d6:	4602      	mov	r2, r0
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e2:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 80010e4:	897b      	ldrh	r3, [r7, #10]
 80010e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	e02d      	b.n	800114e <I2C_Init+0x112>
	}else{
		// Fast Mode
		tempreg |= (1 << 15);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010f8:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2C_Handle->I2C_Config.I2C_FMDutyCycle << 14);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	7a9b      	ldrb	r3, [r3, #10]
 80010fe:	039b      	lsls	r3, r3, #14
 8001100:	461a      	mov	r2, r3
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	4313      	orrs	r3, r2
 8001106:	60fb      	str	r3, [r7, #12]
		if(pI2C_Handle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	7a9b      	ldrb	r3, [r3, #10]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d10b      	bne.n	8001128 <I2C_Init+0xec>
			ccr_value = RCC_GetPCLK1Value() / (3 * pI2C_Handle->I2C_Config.I2C_SCLSpeed);
 8001110:	f000 f988 	bl	8001424 <RCC_GetPCLK1Value>
 8001114:	4601      	mov	r1, r0
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	4613      	mov	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4413      	add	r3, r2
 8001120:	fbb1 f3f3 	udiv	r3, r1, r3
 8001124:	817b      	strh	r3, [r7, #10]
 8001126:	e00c      	b.n	8001142 <I2C_Init+0x106>
		}else{
			ccr_value = RCC_GetPCLK1Value() / (25 * pI2C_Handle->I2C_Config.I2C_SCLSpeed);
 8001128:	f000 f97c 	bl	8001424 <RCC_GetPCLK1Value>
 800112c:	4601      	mov	r1, r0
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	009a      	lsls	r2, r3, #2
 800113a:	4413      	add	r3, r2
 800113c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001140:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8001142:	897b      	ldrh	r3, [r7, #10]
 8001144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	4313      	orrs	r3, r2
 800114c:	60fb      	str	r3, [r7, #12]
	}

	pI2C_Handle->pI2Cx->CCR |= tempreg;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	69d9      	ldr	r1, [r3, #28]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	68fa      	ldr	r2, [r7, #12]
 800115a:	430a      	orrs	r2, r1
 800115c:	61da      	str	r2, [r3, #28]

	// TRISE
	if(pI2C_Handle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	4a15      	ldr	r2, [pc, #84]	; (80011b8 <I2C_Init+0x17c>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d809      	bhi.n	800117c <I2C_Init+0x140>
		// Standard Mode
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8001168:	f000 f95c 	bl	8001424 <RCC_GetPCLK1Value>
 800116c:	4603      	mov	r3, r0
 800116e:	4a11      	ldr	r2, [pc, #68]	; (80011b4 <I2C_Init+0x178>)
 8001170:	fba2 2303 	umull	r2, r3, r2, r3
 8001174:	0c9b      	lsrs	r3, r3, #18
 8001176:	3301      	adds	r3, #1
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	e00d      	b.n	8001198 <I2C_Init+0x15c>
	}else{
		// Fast Mode
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 800117c:	f000 f952 	bl	8001424 <RCC_GetPCLK1Value>
 8001180:	4603      	mov	r3, r0
 8001182:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001186:	fb02 f303 	mul.w	r3, r2, r3
 800118a:	0a5b      	lsrs	r3, r3, #9
 800118c:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <I2C_Init+0x180>)
 800118e:	fba2 2303 	umull	r2, r3, r2, r3
 8001192:	09db      	lsrs	r3, r3, #7
 8001194:	3301      	adds	r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
	}

	pI2C_Handle->pI2Cx->TRISE |= (tempreg & 0x3F);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6a19      	ldr	r1, [r3, #32]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	430a      	orrs	r2, r1
 80011aa:	621a      	str	r2, [r3, #32]
}
 80011ac:	bf00      	nop
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	431bde83 	.word	0x431bde83
 80011b8:	000186a0 	.word	0x000186a0
 80011bc:	00044b83 	.word	0x00044b83

080011c0 <I2C_MasterSendData>:
}




void I2C_MasterSendData(I2C_Handle_t *pI2C_Handle, uint8_t *pTxBuffer, uint8_t Length, uint8_t SlaveAddr, uint8_t Sr){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	4611      	mov	r1, r2
 80011cc:	461a      	mov	r2, r3
 80011ce:	460b      	mov	r3, r1
 80011d0:	71fb      	strb	r3, [r7, #7]
 80011d2:	4613      	mov	r3, r2
 80011d4:	71bb      	strb	r3, [r7, #6]
	// 1. Generate the Start Condition
	I2C_GenerateStartCondition(pI2C_Handle->pI2Cx);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fe3a 	bl	8000e54 <I2C_GenerateStartCondition>

	// 2. Confirm that start generation is completed by checking the SB Flag in the SR1
	while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_SB));
 80011e0:	bf00      	nop
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2101      	movs	r1, #1
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 f8fd 	bl	80013e8 <I2C_GetFlagStatus>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d0f6      	beq.n	80011e2 <I2C_MasterSendData+0x22>

	// 3. Send the Address of the slave with R/nW bit set to W(0) (total 8 bits)
	I2C_ExecuteAddressPhaseWrite(pI2C_Handle->pI2Cx, SlaveAddr);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	79ba      	ldrb	r2, [r7, #6]
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fe38 	bl	8000e72 <I2C_ExecuteAddressPhaseWrite>

	// 4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_ADDR));
 8001202:	bf00      	nop
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2102      	movs	r1, #2
 800120a:	4618      	mov	r0, r3
 800120c:	f000 f8ec 	bl	80013e8 <I2C_GetFlagStatus>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0f6      	beq.n	8001204 <I2C_MasterSendData+0x44>

	// 5. Clear the ADDR Flag according to its software sequence
	I2C_ClearADDRFlag(pI2C_Handle);
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f7ff fe55 	bl	8000ec6 <I2C_ClearADDRFlag>

	// 6. Send the data until Length becomes 0
	while(Length > 0){
 800121c:	e014      	b.n	8001248 <I2C_MasterSendData+0x88>
		while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_TXE)); // Wait till TXE is set
 800121e:	bf00      	nop
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2180      	movs	r1, #128	; 0x80
 8001226:	4618      	mov	r0, r3
 8001228:	f000 f8de 	bl	80013e8 <I2C_GetFlagStatus>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d0f6      	beq.n	8001220 <I2C_MasterSendData+0x60>
		pI2C_Handle->pI2Cx->DR = *pTxBuffer;
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	781a      	ldrb	r2, [r3, #0]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	3301      	adds	r3, #1
 8001240:	60bb      	str	r3, [r7, #8]
		Length--;
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	3b01      	subs	r3, #1
 8001246:	71fb      	strb	r3, [r7, #7]
	while(Length > 0){
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1e7      	bne.n	800121e <I2C_MasterSendData+0x5e>
	}

	// 7. When Length becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_TXE));
 800124e:	bf00      	nop
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2180      	movs	r1, #128	; 0x80
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f8c6 	bl	80013e8 <I2C_GetFlagStatus>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0f6      	beq.n	8001250 <I2C_MasterSendData+0x90>
	while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_BTF));
 8001262:	bf00      	nop
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2104      	movs	r1, #4
 800126a:	4618      	mov	r0, r3
 800126c:	f000 f8bc 	bl	80013e8 <I2C_GetFlagStatus>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0f6      	beq.n	8001264 <I2C_MasterSendData+0xa4>

	// 8. Generate STOP condition and master need not to wait for the completion of stop condition
	if(Sr == I2C_DISABLE_SR){
 8001276:	7e3b      	ldrb	r3, [r7, #24]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d104      	bne.n	8001286 <I2C_MasterSendData+0xc6>
		I2C_GenerateStopCondition(pI2C_Handle->pI2Cx);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fe57 	bl	8000f34 <I2C_GenerateStopCondition>
	}


}
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <I2C_MasterReceiveData>:


void I2C_MasterReceiveData(I2C_Handle_t *pI2C_Handle, uint8_t *pRxBuffer, uint8_t Length, uint8_t SlaveAddr, uint8_t Sr){
 800128e:	b580      	push	{r7, lr}
 8001290:	b086      	sub	sp, #24
 8001292:	af00      	add	r7, sp, #0
 8001294:	60f8      	str	r0, [r7, #12]
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	4611      	mov	r1, r2
 800129a:	461a      	mov	r2, r3
 800129c:	460b      	mov	r3, r1
 800129e:	71fb      	strb	r3, [r7, #7]
 80012a0:	4613      	mov	r3, r2
 80012a2:	71bb      	strb	r3, [r7, #6]

	// 1. Generate the Start Condition
	I2C_GenerateStartCondition(pI2C_Handle->pI2Cx);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fdd3 	bl	8000e54 <I2C_GenerateStartCondition>

	// 2. Confirm that start generation is completed by checking the SB Flag in the SR1
	while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_SB));
 80012ae:	bf00      	nop
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2101      	movs	r1, #1
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f896 	bl	80013e8 <I2C_GetFlagStatus>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0f6      	beq.n	80012b0 <I2C_MasterReceiveData+0x22>

	// 3. Send the Address of the slave with R/nW bit set to R(1) (total 8 bits)
	I2C_ExecuteAddressPhaseRead(pI2C_Handle->pI2Cx, SlaveAddr);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	79ba      	ldrb	r2, [r7, #6]
 80012c8:	4611      	mov	r1, r2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fde6 	bl	8000e9c <I2C_ExecuteAddressPhaseRead>

	// 4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_ADDR));
 80012d0:	bf00      	nop
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2102      	movs	r1, #2
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 f885 	bl	80013e8 <I2C_GetFlagStatus>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0f6      	beq.n	80012d2 <I2C_MasterReceiveData+0x44>

	// if Reading Length only 1 Byte
	if(Length == 1){
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d121      	bne.n	800132e <I2C_MasterReceiveData+0xa0>
		// Disable ACKing
		I2C_ManageAcking(pI2C_Handle->pI2Cx, I2C_ACK_DISABLE);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 f85e 	bl	80013b2 <I2C_ManageAcking>

		// Clear the ADDR Flag
		I2C_ClearADDRFlag(pI2C_Handle);
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f7ff fde5 	bl	8000ec6 <I2C_ClearADDRFlag>

		// Wait until RXNE Becomes 1
		while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_RXNE));
 80012fc:	bf00      	nop
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2140      	movs	r1, #64	; 0x40
 8001304:	4618      	mov	r0, r3
 8001306:	f000 f86f 	bl	80013e8 <I2C_GetFlagStatus>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0f6      	beq.n	80012fe <I2C_MasterReceiveData+0x70>

		// Generate STOP Condition
		if(Sr == I2C_DISABLE_SR){
 8001310:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d104      	bne.n	8001322 <I2C_MasterReceiveData+0x94>
			I2C_GenerateStopCondition(pI2C_Handle->pI2Cx);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fe09 	bl	8000f34 <I2C_GenerateStopCondition>
		}

		// Read Data into Buffer
		*pRxBuffer = pI2C_Handle->pI2Cx->DR;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	701a      	strb	r2, [r3, #0]

	}

	// if Reading Length > 1
	if(Length > 1){
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d930      	bls.n	8001396 <I2C_MasterReceiveData+0x108>
		// Clear the ADDR Flag
		I2C_ClearADDRFlag(pI2C_Handle);
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	f7ff fdc6 	bl	8000ec6 <I2C_ClearADDRFlag>

		// Read the Data until Length becomes zero
		for(uint32_t i = Length; i > 0; i--){
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	e027      	b.n	8001390 <I2C_MasterReceiveData+0x102>
			// wait for RXNE becomes 1
			while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_RXNE));
 8001340:	bf00      	nop
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2140      	movs	r1, #64	; 0x40
 8001348:	4618      	mov	r0, r3
 800134a:	f000 f84d 	bl	80013e8 <I2C_GetFlagStatus>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0f6      	beq.n	8001342 <I2C_MasterReceiveData+0xb4>

			// Last 2 Bytes remaining
			if(i == 2){
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	2b02      	cmp	r3, #2
 8001358:	d10e      	bne.n	8001378 <I2C_MasterReceiveData+0xea>
				// Clear the ACK bit
				I2C_ManageAcking(pI2C_Handle->pI2Cx, I2C_ACK_DISABLE);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f000 f826 	bl	80013b2 <I2C_ManageAcking>

				// Generate STOP Condition
				if(Sr == I2C_DISABLE_SR){
 8001366:	f897 3020 	ldrb.w	r3, [r7, #32]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d104      	bne.n	8001378 <I2C_MasterReceiveData+0xea>
					I2C_GenerateStopCondition(pI2C_Handle->pI2Cx);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fdde 	bl	8000f34 <I2C_GenerateStopCondition>
				}
			}

			// Read the Data from the Data Register into Buffer
			*pRxBuffer = pI2C_Handle->pI2Cx->DR;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	b2da      	uxtb	r2, r3
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	701a      	strb	r2, [r3, #0]

			// Increment the Buffer Address
			pRxBuffer++;
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	3301      	adds	r3, #1
 8001388:	60bb      	str	r3, [r7, #8]
		for(uint32_t i = Length; i > 0; i--){
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	3b01      	subs	r3, #1
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1d4      	bne.n	8001340 <I2C_MasterReceiveData+0xb2>

		}
	}

	// Re-Enable ACKing
	if(pI2C_Handle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE){
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	7a5b      	ldrb	r3, [r3, #9]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d105      	bne.n	80013aa <I2C_MasterReceiveData+0x11c>
		I2C_ManageAcking(pI2C_Handle->pI2Cx, I2C_ACK_ENABLE);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2101      	movs	r1, #1
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 f804 	bl	80013b2 <I2C_ManageAcking>
	}


}
 80013aa:	bf00      	nop
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <I2C_ManageAcking>:
	}

}


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	460b      	mov	r3, r1
 80013bc:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == I2C_ACK_ENABLE){
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d106      	bne.n	80013d2 <I2C_ManageAcking+0x20>
		// Enable ACKing
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	601a      	str	r2, [r3, #0]
	}else{
		// Disable ACKing
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 80013d0:	e005      	b.n	80013de <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	601a      	str	r2, [r3, #0]
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr

080013e8 <I2C_GetFlagStatus>:

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName){
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName){
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695a      	ldr	r2, [r3, #20]
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	4013      	ands	r3, r2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <I2C_GetFlagStatus+0x1a>
		return FLAG_SET;
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr

0800140e <RCC_GetPLLOutputClock>:
#include "stm32f446xx_rcc_driver.h"



// Not implemented, just a placeholder
uint32_t RCC_GetPLLOutputClock(void){
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
	uint32_t temp = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
	return temp;
 8001418:	687b      	ldr	r3, [r7, #4]
}
 800141a:	4618      	mov	r0, r3
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr

08001424 <RCC_GetPCLK1Value>:

uint16_t AHB_PreScaler[8] = {2, 4, 8, 16, 64, 128, 512};
uint16_t APB1_PreScaler[4] = {2, 4, 8, 16};
uint16_t APB2_PreScaler[4] = {2, 4, 8, 16};

uint32_t RCC_GetPCLK1Value(void){
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, ahbp, apb1p;
	clksrc = (RCC->CFGR >> 2) & 0x3;
 800142a:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <RCC_GetPCLK1Value+0xa0>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	089b      	lsrs	r3, r3, #2
 8001430:	b2db      	uxtb	r3, r3
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0){
 8001438:	7a7b      	ldrb	r3, [r7, #9]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d102      	bne.n	8001444 <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 800143e:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <RCC_GetPCLK1Value+0xa4>)
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	e00b      	b.n	800145c <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1){
 8001444:	7a7b      	ldrb	r3, [r7, #9]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d102      	bne.n	8001450 <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 800144a:	4b20      	ldr	r3, [pc, #128]	; (80014cc <RCC_GetPCLK1Value+0xa8>)
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	e005      	b.n	800145c <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 2){
 8001450:	7a7b      	ldrb	r3, [r7, #9]
 8001452:	2b02      	cmp	r3, #2
 8001454:	d102      	bne.n	800145c <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 8001456:	f7ff ffda 	bl	800140e <RCC_GetPLLOutputClock>
 800145a:	60f8      	str	r0, [r7, #12]
	}

	// AHB Pre-scaler
	temp = (RCC->CFGR >> 4) & 0xF;
 800145c:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <RCC_GetPCLK1Value+0xa0>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	091b      	lsrs	r3, r3, #4
 8001462:	b2db      	uxtb	r3, r3
 8001464:	f003 030f 	and.w	r3, r3, #15
 8001468:	723b      	strb	r3, [r7, #8]
	if(temp < 8){
 800146a:	7a3b      	ldrb	r3, [r7, #8]
 800146c:	2b07      	cmp	r3, #7
 800146e:	d802      	bhi.n	8001476 <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 8001470:	2301      	movs	r3, #1
 8001472:	72fb      	strb	r3, [r7, #11]
 8001474:	e005      	b.n	8001482 <RCC_GetPCLK1Value+0x5e>
	}else{
		ahbp = AHB_PreScaler[temp-8];
 8001476:	7a3b      	ldrb	r3, [r7, #8]
 8001478:	3b08      	subs	r3, #8
 800147a:	4a15      	ldr	r2, [pc, #84]	; (80014d0 <RCC_GetPCLK1Value+0xac>)
 800147c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001480:	72fb      	strb	r3, [r7, #11]
	}

	// APB1 Pre-scaler
	temp = (RCC->CFGR >> 10) & 0x7;
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <RCC_GetPCLK1Value+0xa0>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	0a9b      	lsrs	r3, r3, #10
 8001488:	b2db      	uxtb	r3, r3
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	723b      	strb	r3, [r7, #8]
	if(temp < 8){
 8001490:	7a3b      	ldrb	r3, [r7, #8]
 8001492:	2b07      	cmp	r3, #7
 8001494:	d802      	bhi.n	800149c <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 8001496:	2301      	movs	r3, #1
 8001498:	72bb      	strb	r3, [r7, #10]
 800149a:	e005      	b.n	80014a8 <RCC_GetPCLK1Value+0x84>
	}else{
		apb1p = APB1_PreScaler[temp-4];
 800149c:	7a3b      	ldrb	r3, [r7, #8]
 800149e:	3b04      	subs	r3, #4
 80014a0:	4a0c      	ldr	r2, [pc, #48]	; (80014d4 <RCC_GetPCLK1Value+0xb0>)
 80014a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014a6:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1p;
 80014a8:	7afb      	ldrb	r3, [r7, #11]
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80014b0:	7abb      	ldrb	r3, [r7, #10]
 80014b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b6:	607b      	str	r3, [r7, #4]

	return pclk1;
 80014b8:	687b      	ldr	r3, [r7, #4]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800
 80014c8:	00f42400 	.word	0x00f42400
 80014cc:	007a1200 	.word	0x007a1200
 80014d0:	20000000 	.word	0x20000000
 80014d4:	20000010 	.word	0x20000010

080014d8 <init_systick_timer>:
extern void initialise_monitor_handles();

#define SYSTICK_TIM_CLK		16000000UL

void init_systick_timer(uint32_t tick_hz)
{
 80014d8:	b480      	push	{r7}
 80014da:	b087      	sub	sp, #28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <init_systick_timer+0x5c>)
 80014e2:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <init_systick_timer+0x60>)
 80014e6:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 80014e8:	4a14      	ldr	r2, [pc, #80]	; (800153c <init_systick_timer+0x64>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f0:	3b01      	subs	r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	431a      	orrs	r2, r3
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f043 0202 	orr.w	r2, r3, #2
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f043 0204 	orr.w	r2, r3, #4
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f043 0201 	orr.w	r2, r3, #1
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	601a      	str	r2, [r3, #0]

}
 800152a:	bf00      	nop
 800152c:	371c      	adds	r7, #28
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	e000e014 	.word	0xe000e014
 8001538:	e000e010 	.word	0xe000e010
 800153c:	00f42400 	.word	0x00f42400

08001540 <mdelay>:
char* time_to_string(RTC_time_t *rtc_time);
char* date_to_string(RTC_date_t *rtc_date);
void printf_rtc(void);


static void mdelay(uint32_t cnt){
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0; i < (cnt * 1000); i++);
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	e002      	b.n	8001554 <mdelay+0x14>
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	3301      	adds	r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800155a:	fb02 f303 	mul.w	r3, r2, r3
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	429a      	cmp	r2, r3
 8001562:	d3f4      	bcc.n	800154e <mdelay+0xe>
}
 8001564:	bf00      	nop
 8001566:	bf00      	nop
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <main>:


RTC_time_t current_time;
RTC_date_t current_date;

int main(void){
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0

	initialise_monitor_handles();
 8001574:	f000 fe00 	bl	8002178 <initialise_monitor_handles>

#ifndef PRINT_LCD
	printf("RTC test\n");
#else
	lcd_init();
 8001578:	f7ff f8b4 	bl	80006e4 <lcd_init>

	lcd_print_string("LCD Test...");
 800157c:	481d      	ldr	r0, [pc, #116]	; (80015f4 <main+0x84>)
 800157e:	f7ff f875 	bl	800066c <lcd_print_string>

	mdelay(2000);
 8001582:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001586:	f7ff ffdb 	bl	8001540 <mdelay>

	lcd_display_clear();
 800158a:	f7ff f935 	bl	80007f8 <lcd_display_clear>
	lcd_display_return_home();
 800158e:	f7ff f93d 	bl	800080c <lcd_display_return_home>
#endif

	if(ds1307_init()){
 8001592:	f7fe fe3f 	bl	8000214 <ds1307_init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d000      	beq.n	800159e <main+0x2e>
#ifndef PRINT_LCD
		printf("RTC Init Failed\n");
#endif
		while(1);
 800159c:	e7fe      	b.n	800159c <main+0x2c>
	}

	init_systick_timer(1);
 800159e:	2001      	movs	r0, #1
 80015a0:	f7ff ff9a 	bl	80014d8 <init_systick_timer>

	// Configure Date
	current_date.day = MONDAY;
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <main+0x88>)
 80015a6:	2202      	movs	r2, #2
 80015a8:	70da      	strb	r2, [r3, #3]
	current_date.date = 4;
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <main+0x88>)
 80015ac:	2204      	movs	r2, #4
 80015ae:	701a      	strb	r2, [r3, #0]
	current_date.month = 3;
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <main+0x88>)
 80015b2:	2203      	movs	r2, #3
 80015b4:	705a      	strb	r2, [r3, #1]
	current_date.year = 24;
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <main+0x88>)
 80015b8:	2218      	movs	r2, #24
 80015ba:	709a      	strb	r2, [r3, #2]

	// Configure Time
	current_time.seconds = 50;
 80015bc:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <main+0x8c>)
 80015be:	2232      	movs	r2, #50	; 0x32
 80015c0:	705a      	strb	r2, [r3, #1]
	current_time.minutes = 59;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <main+0x8c>)
 80015c4:	223b      	movs	r2, #59	; 0x3b
 80015c6:	709a      	strb	r2, [r3, #2]
	current_time.hours = 11;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <main+0x8c>)
 80015ca:	220b      	movs	r2, #11
 80015cc:	701a      	strb	r2, [r3, #0]
	current_time.time_format = TIME_FORMAT_12HRS_PM;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <main+0x8c>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	70da      	strb	r2, [r3, #3]

	ds1307_set_current_date(&current_date);
 80015d4:	4808      	ldr	r0, [pc, #32]	; (80015f8 <main+0x88>)
 80015d6:	f7fe fecd 	bl	8000374 <ds1307_set_current_date>
	ds1307_set_current_time(&current_time);
 80015da:	4808      	ldr	r0, [pc, #32]	; (80015fc <main+0x8c>)
 80015dc:	f7fe fe38 	bl	8000250 <ds1307_set_current_time>

	ds1307_get_current_date(&current_date);
 80015e0:	4805      	ldr	r0, [pc, #20]	; (80015f8 <main+0x88>)
 80015e2:	f7fe fef7 	bl	80003d4 <ds1307_get_current_date>
	ds1307_get_current_time(&current_time);
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <main+0x8c>)
 80015e8:	f7fe fe7b 	bl	80002e2 <ds1307_get_current_time>

	printf_rtc();
 80015ec:	f000 f808 	bl	8001600 <printf_rtc>


	while(1);
 80015f0:	e7fe      	b.n	80015f0 <main+0x80>
 80015f2:	bf00      	nop
 80015f4:	0800225c 	.word	0x0800225c
 80015f8:	200000c4 	.word	0x200000c4
 80015fc:	200000c0 	.word	0x200000c0

08001600 <printf_rtc>:

	return 0;
}


void printf_rtc(void){
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
	char *am_pm;
	lcd_set_cursor(1, 1);
 8001606:	2101      	movs	r1, #1
 8001608:	2001      	movs	r0, #1
 800160a:	f7ff f844 	bl	8000696 <lcd_set_cursor>
	if(current_time.time_format != TIME_FORMAT_24HRS){
 800160e:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <printf_rtc+0x80>)
 8001610:	78db      	ldrb	r3, [r3, #3]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d012      	beq.n	800163c <printf_rtc+0x3c>
		am_pm = (current_time.time_format) ? "PM" : "AM";
 8001616:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <printf_rtc+0x80>)
 8001618:	78db      	ldrb	r3, [r3, #3]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <printf_rtc+0x22>
 800161e:	4b19      	ldr	r3, [pc, #100]	; (8001684 <printf_rtc+0x84>)
 8001620:	e000      	b.n	8001624 <printf_rtc+0x24>
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <printf_rtc+0x88>)
 8001624:	607b      	str	r3, [r7, #4]
#ifndef PRINT_LCD
		printf("Current Time: %s %s\n", time_to_string(&current_time), am_pm); // 08:08:41 PM
#else
		lcd_print_string(time_to_string(&current_time));
 8001626:	4816      	ldr	r0, [pc, #88]	; (8001680 <printf_rtc+0x80>)
 8001628:	f000 f88a 	bl	8001740 <time_to_string>
 800162c:	4603      	mov	r3, r0
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff f81c 	bl	800066c <lcd_print_string>
		lcd_print_string(am_pm);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff f819 	bl	800066c <lcd_print_string>
 800163a:	e006      	b.n	800164a <printf_rtc+0x4a>
	}else{
		// 24 Hours Format
#ifndef PRINT_LCD
		printf("Current Time: %s\n", time_to_string(&current_time)); // 20:08:41
#else
		lcd_print_string(time_to_string(&current_time));
 800163c:	4810      	ldr	r0, [pc, #64]	; (8001680 <printf_rtc+0x80>)
 800163e:	f000 f87f 	bl	8001740 <time_to_string>
 8001642:	4603      	mov	r3, r0
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff f811 	bl	800066c <lcd_print_string>
	}

#ifndef PRINT_LCD
	printf("Current Date: %s <%s>\n", date_to_string(&current_date), get_day_of_week(current_date.day));
#else
	lcd_set_cursor(2, 1);
 800164a:	2101      	movs	r1, #1
 800164c:	2002      	movs	r0, #2
 800164e:	f7ff f822 	bl	8000696 <lcd_set_cursor>
	lcd_print_string(date_to_string(&current_date));
 8001652:	480e      	ldr	r0, [pc, #56]	; (800168c <printf_rtc+0x8c>)
 8001654:	f000 f89e 	bl	8001794 <date_to_string>
 8001658:	4603      	mov	r3, r0
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff f806 	bl	800066c <lcd_print_string>
	lcd_print_char(' ');
 8001660:	2020      	movs	r0, #32
 8001662:	f7fe ffe1 	bl	8000628 <lcd_print_char>
	lcd_print_string(get_day_of_week(current_date.day));
 8001666:	4b09      	ldr	r3, [pc, #36]	; (800168c <printf_rtc+0x8c>)
 8001668:	78db      	ldrb	r3, [r3, #3]
 800166a:	4618      	mov	r0, r3
 800166c:	f000 f810 	bl	8001690 <get_day_of_week>
 8001670:	4603      	mov	r3, r0
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe fffa 	bl	800066c <lcd_print_string>
#endif

}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	200000c0 	.word	0x200000c0
 8001684:	08002268 	.word	0x08002268
 8001688:	0800226c 	.word	0x0800226c
 800168c:	200000c4 	.word	0x200000c4

08001690 <get_day_of_week>:

char* get_day_of_week(uint8_t day){
 8001690:	b4b0      	push	{r4, r5, r7}
 8001692:	b08b      	sub	sp, #44	; 0x2c
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
	char *days_list[] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <get_day_of_week+0x38>)
 800169c:	f107 040c 	add.w	r4, r7, #12
 80016a0:	461d      	mov	r5, r3
 80016a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return days_list[day-1];
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	3b01      	subs	r3, #1
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	3328      	adds	r3, #40	; 0x28
 80016b6:	443b      	add	r3, r7
 80016b8:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	372c      	adds	r7, #44	; 0x2c
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bcb0      	pop	{r4, r5, r7}
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	080022b4 	.word	0x080022b4

080016cc <number_to_string>:


void number_to_string(uint8_t num, char* buf){
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	6039      	str	r1, [r7, #0]
 80016d6:	71fb      	strb	r3, [r7, #7]

	if(num < 10){
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	2b09      	cmp	r3, #9
 80016dc:	d809      	bhi.n	80016f2 <number_to_string+0x26>
		buf[0] = '0';
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	2230      	movs	r2, #48	; 0x30
 80016e2:	701a      	strb	r2, [r3, #0]
		buf[1] = num + 48;
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	3301      	adds	r3, #1
 80016e8:	79fa      	ldrb	r2, [r7, #7]
 80016ea:	3230      	adds	r2, #48	; 0x30
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	701a      	strb	r2, [r3, #0]
	}else if(num >= 10 && num < 99){
		buf[0] = (num /10) + 48;
		buf[1] = (num % 10) + 48;
	}
}
 80016f0:	e01f      	b.n	8001732 <number_to_string+0x66>
	}else if(num >= 10 && num < 99){
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	2b09      	cmp	r3, #9
 80016f6:	d91c      	bls.n	8001732 <number_to_string+0x66>
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	2b62      	cmp	r3, #98	; 0x62
 80016fc:	d819      	bhi.n	8001732 <number_to_string+0x66>
		buf[0] = (num /10) + 48;
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	4a0e      	ldr	r2, [pc, #56]	; (800173c <number_to_string+0x70>)
 8001702:	fba2 2303 	umull	r2, r3, r2, r3
 8001706:	08db      	lsrs	r3, r3, #3
 8001708:	b2db      	uxtb	r3, r3
 800170a:	3330      	adds	r3, #48	; 0x30
 800170c:	b2da      	uxtb	r2, r3
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	701a      	strb	r2, [r3, #0]
		buf[1] = (num % 10) + 48;
 8001712:	79fa      	ldrb	r2, [r7, #7]
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <number_to_string+0x70>)
 8001716:	fba3 1302 	umull	r1, r3, r3, r2
 800171a:	08d9      	lsrs	r1, r3, #3
 800171c:	460b      	mov	r3, r1
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	440b      	add	r3, r1
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	b2da      	uxtb	r2, r3
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	3301      	adds	r3, #1
 800172c:	3230      	adds	r2, #48	; 0x30
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	701a      	strb	r2, [r3, #0]
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	cccccccd 	.word	0xcccccccd

08001740 <time_to_string>:


// hh:mm:ss'\0'
char* time_to_string(RTC_time_t *rtc_time){
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	static char buf[9];
	buf[2] = ':';
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <time_to_string+0x48>)
 800174a:	223a      	movs	r2, #58	; 0x3a
 800174c:	709a      	strb	r2, [r3, #2]
	buf[5] = ':';
 800174e:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <time_to_string+0x48>)
 8001750:	223a      	movs	r2, #58	; 0x3a
 8001752:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_time->hours, buf);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	490b      	ldr	r1, [pc, #44]	; (8001788 <time_to_string+0x48>)
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff ffb6 	bl	80016cc <number_to_string>
	number_to_string(rtc_time->minutes, &buf[3]);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	789b      	ldrb	r3, [r3, #2]
 8001764:	4909      	ldr	r1, [pc, #36]	; (800178c <time_to_string+0x4c>)
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff ffb0 	bl	80016cc <number_to_string>
	number_to_string(rtc_time->seconds, &buf[6]);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	785b      	ldrb	r3, [r3, #1]
 8001770:	4907      	ldr	r1, [pc, #28]	; (8001790 <time_to_string+0x50>)
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff ffaa 	bl	80016cc <number_to_string>

	buf[8] = '\0';
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <time_to_string+0x48>)
 800177a:	2200      	movs	r2, #0
 800177c:	721a      	strb	r2, [r3, #8]

	return buf;
 800177e:	4b02      	ldr	r3, [pc, #8]	; (8001788 <time_to_string+0x48>)

}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	200000c8 	.word	0x200000c8
 800178c:	200000cb 	.word	0x200000cb
 8001790:	200000ce 	.word	0x200000ce

08001794 <date_to_string>:

// dd/mm/yy'\0'
char* date_to_string(RTC_date_t *rtc_date){
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2] = '/';
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <date_to_string+0x48>)
 800179e:	222f      	movs	r2, #47	; 0x2f
 80017a0:	709a      	strb	r2, [r3, #2]
	buf[5] = '/';
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <date_to_string+0x48>)
 80017a4:	222f      	movs	r2, #47	; 0x2f
 80017a6:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_date->month, buf);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	785b      	ldrb	r3, [r3, #1]
 80017ac:	490b      	ldr	r1, [pc, #44]	; (80017dc <date_to_string+0x48>)
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff ff8c 	bl	80016cc <number_to_string>
	number_to_string(rtc_date->date, &buf[3]);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	4909      	ldr	r1, [pc, #36]	; (80017e0 <date_to_string+0x4c>)
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ff86 	bl	80016cc <number_to_string>
	number_to_string(rtc_date->year, &buf[6]);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	789b      	ldrb	r3, [r3, #2]
 80017c4:	4907      	ldr	r1, [pc, #28]	; (80017e4 <date_to_string+0x50>)
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff ff80 	bl	80016cc <number_to_string>

	buf[8] = '\0';
 80017cc:	4b03      	ldr	r3, [pc, #12]	; (80017dc <date_to_string+0x48>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	721a      	strb	r2, [r3, #8]

	return buf;
 80017d2:	4b02      	ldr	r3, [pc, #8]	; (80017dc <date_to_string+0x48>)
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	200000d4 	.word	0x200000d4
 80017e0:	200000d7 	.word	0x200000d7
 80017e4:	200000da 	.word	0x200000da

080017e8 <SysTick_Handler>:



void SysTick_Handler(void){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
	ds1307_get_current_date(&current_date);
 80017ec:	4804      	ldr	r0, [pc, #16]	; (8001800 <SysTick_Handler+0x18>)
 80017ee:	f7fe fdf1 	bl	80003d4 <ds1307_get_current_date>
	ds1307_get_current_time(&current_time);
 80017f2:	4804      	ldr	r0, [pc, #16]	; (8001804 <SysTick_Handler+0x1c>)
 80017f4:	f7fe fd75 	bl	80002e2 <ds1307_get_current_time>
	printf_rtc();
 80017f8:	f7ff ff02 	bl	8001600 <printf_rtc>
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	200000c4 	.word	0x200000c4
 8001804:	200000c0 	.word	0x200000c0

08001808 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001808:	480d      	ldr	r0, [pc, #52]	; (8001840 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800180a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800180c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001810:	480c      	ldr	r0, [pc, #48]	; (8001844 <LoopForever+0x6>)
  ldr r1, =_edata
 8001812:	490d      	ldr	r1, [pc, #52]	; (8001848 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001814:	4a0d      	ldr	r2, [pc, #52]	; (800184c <LoopForever+0xe>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001818:	e002      	b.n	8001820 <LoopCopyDataInit>

0800181a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800181c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800181e:	3304      	adds	r3, #4

08001820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001824:	d3f9      	bcc.n	800181a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001826:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001828:	4c0a      	ldr	r4, [pc, #40]	; (8001854 <LoopForever+0x16>)
  movs r3, #0
 800182a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800182c:	e001      	b.n	8001832 <LoopFillZerobss>

0800182e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800182e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001830:	3204      	adds	r2, #4

08001832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001834:	d3fb      	bcc.n	800182e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001836:	f000 f965 	bl	8001b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800183a:	f7ff fe99 	bl	8001570 <main>

0800183e <LoopForever>:

LoopForever:
  b LoopForever
 800183e:	e7fe      	b.n	800183e <LoopForever>
  ldr   r0, =_estack
 8001840:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001848:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800184c:	080022f4 	.word	0x080022f4
  ldr r2, =_sbss
 8001850:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001854:	200002d4 	.word	0x200002d4

08001858 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001858:	e7fe      	b.n	8001858 <ADC_IRQHandler>
	...

0800185c <std>:
 800185c:	2300      	movs	r3, #0
 800185e:	b510      	push	{r4, lr}
 8001860:	4604      	mov	r4, r0
 8001862:	e9c0 3300 	strd	r3, r3, [r0]
 8001866:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800186a:	6083      	str	r3, [r0, #8]
 800186c:	8181      	strh	r1, [r0, #12]
 800186e:	6643      	str	r3, [r0, #100]	; 0x64
 8001870:	81c2      	strh	r2, [r0, #14]
 8001872:	6183      	str	r3, [r0, #24]
 8001874:	4619      	mov	r1, r3
 8001876:	2208      	movs	r2, #8
 8001878:	305c      	adds	r0, #92	; 0x5c
 800187a:	f000 f8f4 	bl	8001a66 <memset>
 800187e:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <std+0x58>)
 8001880:	6263      	str	r3, [r4, #36]	; 0x24
 8001882:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <std+0x5c>)
 8001884:	62a3      	str	r3, [r4, #40]	; 0x28
 8001886:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <std+0x60>)
 8001888:	62e3      	str	r3, [r4, #44]	; 0x2c
 800188a:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <std+0x64>)
 800188c:	6323      	str	r3, [r4, #48]	; 0x30
 800188e:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <std+0x68>)
 8001890:	6224      	str	r4, [r4, #32]
 8001892:	429c      	cmp	r4, r3
 8001894:	d006      	beq.n	80018a4 <std+0x48>
 8001896:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800189a:	4294      	cmp	r4, r2
 800189c:	d002      	beq.n	80018a4 <std+0x48>
 800189e:	33d0      	adds	r3, #208	; 0xd0
 80018a0:	429c      	cmp	r4, r3
 80018a2:	d105      	bne.n	80018b0 <std+0x54>
 80018a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80018a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018ac:	f000 b94e 	b.w	8001b4c <__retarget_lock_init_recursive>
 80018b0:	bd10      	pop	{r4, pc}
 80018b2:	bf00      	nop
 80018b4:	080019e1 	.word	0x080019e1
 80018b8:	08001a03 	.word	0x08001a03
 80018bc:	08001a3b 	.word	0x08001a3b
 80018c0:	08001a5f 	.word	0x08001a5f
 80018c4:	200000e0 	.word	0x200000e0

080018c8 <stdio_exit_handler>:
 80018c8:	4a02      	ldr	r2, [pc, #8]	; (80018d4 <stdio_exit_handler+0xc>)
 80018ca:	4903      	ldr	r1, [pc, #12]	; (80018d8 <stdio_exit_handler+0x10>)
 80018cc:	4803      	ldr	r0, [pc, #12]	; (80018dc <stdio_exit_handler+0x14>)
 80018ce:	f000 b869 	b.w	80019a4 <_fwalk_sglue>
 80018d2:	bf00      	nop
 80018d4:	20000018 	.word	0x20000018
 80018d8:	08001d05 	.word	0x08001d05
 80018dc:	20000024 	.word	0x20000024

080018e0 <cleanup_stdio>:
 80018e0:	6841      	ldr	r1, [r0, #4]
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <cleanup_stdio+0x34>)
 80018e4:	4299      	cmp	r1, r3
 80018e6:	b510      	push	{r4, lr}
 80018e8:	4604      	mov	r4, r0
 80018ea:	d001      	beq.n	80018f0 <cleanup_stdio+0x10>
 80018ec:	f000 fa0a 	bl	8001d04 <_fflush_r>
 80018f0:	68a1      	ldr	r1, [r4, #8]
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <cleanup_stdio+0x38>)
 80018f4:	4299      	cmp	r1, r3
 80018f6:	d002      	beq.n	80018fe <cleanup_stdio+0x1e>
 80018f8:	4620      	mov	r0, r4
 80018fa:	f000 fa03 	bl	8001d04 <_fflush_r>
 80018fe:	68e1      	ldr	r1, [r4, #12]
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <cleanup_stdio+0x3c>)
 8001902:	4299      	cmp	r1, r3
 8001904:	d004      	beq.n	8001910 <cleanup_stdio+0x30>
 8001906:	4620      	mov	r0, r4
 8001908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800190c:	f000 b9fa 	b.w	8001d04 <_fflush_r>
 8001910:	bd10      	pop	{r4, pc}
 8001912:	bf00      	nop
 8001914:	200000e0 	.word	0x200000e0
 8001918:	20000148 	.word	0x20000148
 800191c:	200001b0 	.word	0x200001b0

08001920 <global_stdio_init.part.0>:
 8001920:	b510      	push	{r4, lr}
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <global_stdio_init.part.0+0x30>)
 8001924:	4c0b      	ldr	r4, [pc, #44]	; (8001954 <global_stdio_init.part.0+0x34>)
 8001926:	4a0c      	ldr	r2, [pc, #48]	; (8001958 <global_stdio_init.part.0+0x38>)
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	4620      	mov	r0, r4
 800192c:	2200      	movs	r2, #0
 800192e:	2104      	movs	r1, #4
 8001930:	f7ff ff94 	bl	800185c <std>
 8001934:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001938:	2201      	movs	r2, #1
 800193a:	2109      	movs	r1, #9
 800193c:	f7ff ff8e 	bl	800185c <std>
 8001940:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001944:	2202      	movs	r2, #2
 8001946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800194a:	2112      	movs	r1, #18
 800194c:	f7ff bf86 	b.w	800185c <std>
 8001950:	20000218 	.word	0x20000218
 8001954:	200000e0 	.word	0x200000e0
 8001958:	080018c9 	.word	0x080018c9

0800195c <__sfp_lock_acquire>:
 800195c:	4801      	ldr	r0, [pc, #4]	; (8001964 <__sfp_lock_acquire+0x8>)
 800195e:	f000 b8f6 	b.w	8001b4e <__retarget_lock_acquire_recursive>
 8001962:	bf00      	nop
 8001964:	20000221 	.word	0x20000221

08001968 <__sfp_lock_release>:
 8001968:	4801      	ldr	r0, [pc, #4]	; (8001970 <__sfp_lock_release+0x8>)
 800196a:	f000 b8f1 	b.w	8001b50 <__retarget_lock_release_recursive>
 800196e:	bf00      	nop
 8001970:	20000221 	.word	0x20000221

08001974 <__sinit>:
 8001974:	b510      	push	{r4, lr}
 8001976:	4604      	mov	r4, r0
 8001978:	f7ff fff0 	bl	800195c <__sfp_lock_acquire>
 800197c:	6a23      	ldr	r3, [r4, #32]
 800197e:	b11b      	cbz	r3, 8001988 <__sinit+0x14>
 8001980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001984:	f7ff bff0 	b.w	8001968 <__sfp_lock_release>
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <__sinit+0x28>)
 800198a:	6223      	str	r3, [r4, #32]
 800198c:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <__sinit+0x2c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1f5      	bne.n	8001980 <__sinit+0xc>
 8001994:	f7ff ffc4 	bl	8001920 <global_stdio_init.part.0>
 8001998:	e7f2      	b.n	8001980 <__sinit+0xc>
 800199a:	bf00      	nop
 800199c:	080018e1 	.word	0x080018e1
 80019a0:	20000218 	.word	0x20000218

080019a4 <_fwalk_sglue>:
 80019a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019a8:	4607      	mov	r7, r0
 80019aa:	4688      	mov	r8, r1
 80019ac:	4614      	mov	r4, r2
 80019ae:	2600      	movs	r6, #0
 80019b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80019b4:	f1b9 0901 	subs.w	r9, r9, #1
 80019b8:	d505      	bpl.n	80019c6 <_fwalk_sglue+0x22>
 80019ba:	6824      	ldr	r4, [r4, #0]
 80019bc:	2c00      	cmp	r4, #0
 80019be:	d1f7      	bne.n	80019b0 <_fwalk_sglue+0xc>
 80019c0:	4630      	mov	r0, r6
 80019c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80019c6:	89ab      	ldrh	r3, [r5, #12]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d907      	bls.n	80019dc <_fwalk_sglue+0x38>
 80019cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80019d0:	3301      	adds	r3, #1
 80019d2:	d003      	beq.n	80019dc <_fwalk_sglue+0x38>
 80019d4:	4629      	mov	r1, r5
 80019d6:	4638      	mov	r0, r7
 80019d8:	47c0      	blx	r8
 80019da:	4306      	orrs	r6, r0
 80019dc:	3568      	adds	r5, #104	; 0x68
 80019de:	e7e9      	b.n	80019b4 <_fwalk_sglue+0x10>

080019e0 <__sread>:
 80019e0:	b510      	push	{r4, lr}
 80019e2:	460c      	mov	r4, r1
 80019e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019e8:	f000 f868 	bl	8001abc <_read_r>
 80019ec:	2800      	cmp	r0, #0
 80019ee:	bfab      	itete	ge
 80019f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80019f2:	89a3      	ldrhlt	r3, [r4, #12]
 80019f4:	181b      	addge	r3, r3, r0
 80019f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80019fa:	bfac      	ite	ge
 80019fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80019fe:	81a3      	strhlt	r3, [r4, #12]
 8001a00:	bd10      	pop	{r4, pc}

08001a02 <__swrite>:
 8001a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a06:	461f      	mov	r7, r3
 8001a08:	898b      	ldrh	r3, [r1, #12]
 8001a0a:	05db      	lsls	r3, r3, #23
 8001a0c:	4605      	mov	r5, r0
 8001a0e:	460c      	mov	r4, r1
 8001a10:	4616      	mov	r6, r2
 8001a12:	d505      	bpl.n	8001a20 <__swrite+0x1e>
 8001a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a18:	2302      	movs	r3, #2
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f000 f83c 	bl	8001a98 <_lseek_r>
 8001a20:	89a3      	ldrh	r3, [r4, #12]
 8001a22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a2a:	81a3      	strh	r3, [r4, #12]
 8001a2c:	4632      	mov	r2, r6
 8001a2e:	463b      	mov	r3, r7
 8001a30:	4628      	mov	r0, r5
 8001a32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001a36:	f000 b853 	b.w	8001ae0 <_write_r>

08001a3a <__sseek>:
 8001a3a:	b510      	push	{r4, lr}
 8001a3c:	460c      	mov	r4, r1
 8001a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a42:	f000 f829 	bl	8001a98 <_lseek_r>
 8001a46:	1c43      	adds	r3, r0, #1
 8001a48:	89a3      	ldrh	r3, [r4, #12]
 8001a4a:	bf15      	itete	ne
 8001a4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8001a4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001a52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001a56:	81a3      	strheq	r3, [r4, #12]
 8001a58:	bf18      	it	ne
 8001a5a:	81a3      	strhne	r3, [r4, #12]
 8001a5c:	bd10      	pop	{r4, pc}

08001a5e <__sclose>:
 8001a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a62:	f000 b809 	b.w	8001a78 <_close_r>

08001a66 <memset>:
 8001a66:	4402      	add	r2, r0
 8001a68:	4603      	mov	r3, r0
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d100      	bne.n	8001a70 <memset+0xa>
 8001a6e:	4770      	bx	lr
 8001a70:	f803 1b01 	strb.w	r1, [r3], #1
 8001a74:	e7f9      	b.n	8001a6a <memset+0x4>
	...

08001a78 <_close_r>:
 8001a78:	b538      	push	{r3, r4, r5, lr}
 8001a7a:	4d06      	ldr	r5, [pc, #24]	; (8001a94 <_close_r+0x1c>)
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	4604      	mov	r4, r0
 8001a80:	4608      	mov	r0, r1
 8001a82:	602b      	str	r3, [r5, #0]
 8001a84:	f000 fa38 	bl	8001ef8 <_close>
 8001a88:	1c43      	adds	r3, r0, #1
 8001a8a:	d102      	bne.n	8001a92 <_close_r+0x1a>
 8001a8c:	682b      	ldr	r3, [r5, #0]
 8001a8e:	b103      	cbz	r3, 8001a92 <_close_r+0x1a>
 8001a90:	6023      	str	r3, [r4, #0]
 8001a92:	bd38      	pop	{r3, r4, r5, pc}
 8001a94:	2000021c 	.word	0x2000021c

08001a98 <_lseek_r>:
 8001a98:	b538      	push	{r3, r4, r5, lr}
 8001a9a:	4d07      	ldr	r5, [pc, #28]	; (8001ab8 <_lseek_r+0x20>)
 8001a9c:	4604      	mov	r4, r0
 8001a9e:	4608      	mov	r0, r1
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	602a      	str	r2, [r5, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	f000 f9e7 	bl	8001e7a <_lseek>
 8001aac:	1c43      	adds	r3, r0, #1
 8001aae:	d102      	bne.n	8001ab6 <_lseek_r+0x1e>
 8001ab0:	682b      	ldr	r3, [r5, #0]
 8001ab2:	b103      	cbz	r3, 8001ab6 <_lseek_r+0x1e>
 8001ab4:	6023      	str	r3, [r4, #0]
 8001ab6:	bd38      	pop	{r3, r4, r5, pc}
 8001ab8:	2000021c 	.word	0x2000021c

08001abc <_read_r>:
 8001abc:	b538      	push	{r3, r4, r5, lr}
 8001abe:	4d07      	ldr	r5, [pc, #28]	; (8001adc <_read_r+0x20>)
 8001ac0:	4604      	mov	r4, r0
 8001ac2:	4608      	mov	r0, r1
 8001ac4:	4611      	mov	r1, r2
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	602a      	str	r2, [r5, #0]
 8001aca:	461a      	mov	r2, r3
 8001acc:	f000 f97f 	bl	8001dce <_read>
 8001ad0:	1c43      	adds	r3, r0, #1
 8001ad2:	d102      	bne.n	8001ada <_read_r+0x1e>
 8001ad4:	682b      	ldr	r3, [r5, #0]
 8001ad6:	b103      	cbz	r3, 8001ada <_read_r+0x1e>
 8001ad8:	6023      	str	r3, [r4, #0]
 8001ada:	bd38      	pop	{r3, r4, r5, pc}
 8001adc:	2000021c 	.word	0x2000021c

08001ae0 <_write_r>:
 8001ae0:	b538      	push	{r3, r4, r5, lr}
 8001ae2:	4d07      	ldr	r5, [pc, #28]	; (8001b00 <_write_r+0x20>)
 8001ae4:	4604      	mov	r4, r0
 8001ae6:	4608      	mov	r0, r1
 8001ae8:	4611      	mov	r1, r2
 8001aea:	2200      	movs	r2, #0
 8001aec:	602a      	str	r2, [r5, #0]
 8001aee:	461a      	mov	r2, r3
 8001af0:	f000 f9d5 	bl	8001e9e <_write>
 8001af4:	1c43      	adds	r3, r0, #1
 8001af6:	d102      	bne.n	8001afe <_write_r+0x1e>
 8001af8:	682b      	ldr	r3, [r5, #0]
 8001afa:	b103      	cbz	r3, 8001afe <_write_r+0x1e>
 8001afc:	6023      	str	r3, [r4, #0]
 8001afe:	bd38      	pop	{r3, r4, r5, pc}
 8001b00:	2000021c 	.word	0x2000021c

08001b04 <__libc_init_array>:
 8001b04:	b570      	push	{r4, r5, r6, lr}
 8001b06:	4d0d      	ldr	r5, [pc, #52]	; (8001b3c <__libc_init_array+0x38>)
 8001b08:	4c0d      	ldr	r4, [pc, #52]	; (8001b40 <__libc_init_array+0x3c>)
 8001b0a:	1b64      	subs	r4, r4, r5
 8001b0c:	10a4      	asrs	r4, r4, #2
 8001b0e:	2600      	movs	r6, #0
 8001b10:	42a6      	cmp	r6, r4
 8001b12:	d109      	bne.n	8001b28 <__libc_init_array+0x24>
 8001b14:	4d0b      	ldr	r5, [pc, #44]	; (8001b44 <__libc_init_array+0x40>)
 8001b16:	4c0c      	ldr	r4, [pc, #48]	; (8001b48 <__libc_init_array+0x44>)
 8001b18:	f000 fb94 	bl	8002244 <_init>
 8001b1c:	1b64      	subs	r4, r4, r5
 8001b1e:	10a4      	asrs	r4, r4, #2
 8001b20:	2600      	movs	r6, #0
 8001b22:	42a6      	cmp	r6, r4
 8001b24:	d105      	bne.n	8001b32 <__libc_init_array+0x2e>
 8001b26:	bd70      	pop	{r4, r5, r6, pc}
 8001b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b2c:	4798      	blx	r3
 8001b2e:	3601      	adds	r6, #1
 8001b30:	e7ee      	b.n	8001b10 <__libc_init_array+0xc>
 8001b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b36:	4798      	blx	r3
 8001b38:	3601      	adds	r6, #1
 8001b3a:	e7f2      	b.n	8001b22 <__libc_init_array+0x1e>
 8001b3c:	080022ec 	.word	0x080022ec
 8001b40:	080022ec 	.word	0x080022ec
 8001b44:	080022ec 	.word	0x080022ec
 8001b48:	080022f0 	.word	0x080022f0

08001b4c <__retarget_lock_init_recursive>:
 8001b4c:	4770      	bx	lr

08001b4e <__retarget_lock_acquire_recursive>:
 8001b4e:	4770      	bx	lr

08001b50 <__retarget_lock_release_recursive>:
 8001b50:	4770      	bx	lr
	...

08001b54 <_free_r>:
 8001b54:	b538      	push	{r3, r4, r5, lr}
 8001b56:	4605      	mov	r5, r0
 8001b58:	2900      	cmp	r1, #0
 8001b5a:	d041      	beq.n	8001be0 <_free_r+0x8c>
 8001b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b60:	1f0c      	subs	r4, r1, #4
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	bfb8      	it	lt
 8001b66:	18e4      	addlt	r4, r4, r3
 8001b68:	f000 f83e 	bl	8001be8 <__malloc_lock>
 8001b6c:	4a1d      	ldr	r2, [pc, #116]	; (8001be4 <_free_r+0x90>)
 8001b6e:	6813      	ldr	r3, [r2, #0]
 8001b70:	b933      	cbnz	r3, 8001b80 <_free_r+0x2c>
 8001b72:	6063      	str	r3, [r4, #4]
 8001b74:	6014      	str	r4, [r2, #0]
 8001b76:	4628      	mov	r0, r5
 8001b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b7c:	f000 b83a 	b.w	8001bf4 <__malloc_unlock>
 8001b80:	42a3      	cmp	r3, r4
 8001b82:	d908      	bls.n	8001b96 <_free_r+0x42>
 8001b84:	6820      	ldr	r0, [r4, #0]
 8001b86:	1821      	adds	r1, r4, r0
 8001b88:	428b      	cmp	r3, r1
 8001b8a:	bf01      	itttt	eq
 8001b8c:	6819      	ldreq	r1, [r3, #0]
 8001b8e:	685b      	ldreq	r3, [r3, #4]
 8001b90:	1809      	addeq	r1, r1, r0
 8001b92:	6021      	streq	r1, [r4, #0]
 8001b94:	e7ed      	b.n	8001b72 <_free_r+0x1e>
 8001b96:	461a      	mov	r2, r3
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	b10b      	cbz	r3, 8001ba0 <_free_r+0x4c>
 8001b9c:	42a3      	cmp	r3, r4
 8001b9e:	d9fa      	bls.n	8001b96 <_free_r+0x42>
 8001ba0:	6811      	ldr	r1, [r2, #0]
 8001ba2:	1850      	adds	r0, r2, r1
 8001ba4:	42a0      	cmp	r0, r4
 8001ba6:	d10b      	bne.n	8001bc0 <_free_r+0x6c>
 8001ba8:	6820      	ldr	r0, [r4, #0]
 8001baa:	4401      	add	r1, r0
 8001bac:	1850      	adds	r0, r2, r1
 8001bae:	4283      	cmp	r3, r0
 8001bb0:	6011      	str	r1, [r2, #0]
 8001bb2:	d1e0      	bne.n	8001b76 <_free_r+0x22>
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	6053      	str	r3, [r2, #4]
 8001bba:	4408      	add	r0, r1
 8001bbc:	6010      	str	r0, [r2, #0]
 8001bbe:	e7da      	b.n	8001b76 <_free_r+0x22>
 8001bc0:	d902      	bls.n	8001bc8 <_free_r+0x74>
 8001bc2:	230c      	movs	r3, #12
 8001bc4:	602b      	str	r3, [r5, #0]
 8001bc6:	e7d6      	b.n	8001b76 <_free_r+0x22>
 8001bc8:	6820      	ldr	r0, [r4, #0]
 8001bca:	1821      	adds	r1, r4, r0
 8001bcc:	428b      	cmp	r3, r1
 8001bce:	bf04      	itt	eq
 8001bd0:	6819      	ldreq	r1, [r3, #0]
 8001bd2:	685b      	ldreq	r3, [r3, #4]
 8001bd4:	6063      	str	r3, [r4, #4]
 8001bd6:	bf04      	itt	eq
 8001bd8:	1809      	addeq	r1, r1, r0
 8001bda:	6021      	streq	r1, [r4, #0]
 8001bdc:	6054      	str	r4, [r2, #4]
 8001bde:	e7ca      	b.n	8001b76 <_free_r+0x22>
 8001be0:	bd38      	pop	{r3, r4, r5, pc}
 8001be2:	bf00      	nop
 8001be4:	20000224 	.word	0x20000224

08001be8 <__malloc_lock>:
 8001be8:	4801      	ldr	r0, [pc, #4]	; (8001bf0 <__malloc_lock+0x8>)
 8001bea:	f7ff bfb0 	b.w	8001b4e <__retarget_lock_acquire_recursive>
 8001bee:	bf00      	nop
 8001bf0:	20000220 	.word	0x20000220

08001bf4 <__malloc_unlock>:
 8001bf4:	4801      	ldr	r0, [pc, #4]	; (8001bfc <__malloc_unlock+0x8>)
 8001bf6:	f7ff bfab 	b.w	8001b50 <__retarget_lock_release_recursive>
 8001bfa:	bf00      	nop
 8001bfc:	20000220 	.word	0x20000220

08001c00 <__sflush_r>:
 8001c00:	898a      	ldrh	r2, [r1, #12]
 8001c02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c04:	4605      	mov	r5, r0
 8001c06:	0710      	lsls	r0, r2, #28
 8001c08:	460c      	mov	r4, r1
 8001c0a:	d457      	bmi.n	8001cbc <__sflush_r+0xbc>
 8001c0c:	684b      	ldr	r3, [r1, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	dc04      	bgt.n	8001c1c <__sflush_r+0x1c>
 8001c12:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	dc01      	bgt.n	8001c1c <__sflush_r+0x1c>
 8001c18:	2000      	movs	r0, #0
 8001c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c1e:	2e00      	cmp	r6, #0
 8001c20:	d0fa      	beq.n	8001c18 <__sflush_r+0x18>
 8001c22:	2300      	movs	r3, #0
 8001c24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001c28:	682f      	ldr	r7, [r5, #0]
 8001c2a:	6a21      	ldr	r1, [r4, #32]
 8001c2c:	602b      	str	r3, [r5, #0]
 8001c2e:	d032      	beq.n	8001c96 <__sflush_r+0x96>
 8001c30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001c32:	89a3      	ldrh	r3, [r4, #12]
 8001c34:	075a      	lsls	r2, r3, #29
 8001c36:	d505      	bpl.n	8001c44 <__sflush_r+0x44>
 8001c38:	6863      	ldr	r3, [r4, #4]
 8001c3a:	1ac0      	subs	r0, r0, r3
 8001c3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c3e:	b10b      	cbz	r3, 8001c44 <__sflush_r+0x44>
 8001c40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c42:	1ac0      	subs	r0, r0, r3
 8001c44:	2300      	movs	r3, #0
 8001c46:	4602      	mov	r2, r0
 8001c48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c4a:	6a21      	ldr	r1, [r4, #32]
 8001c4c:	4628      	mov	r0, r5
 8001c4e:	47b0      	blx	r6
 8001c50:	1c43      	adds	r3, r0, #1
 8001c52:	89a3      	ldrh	r3, [r4, #12]
 8001c54:	d106      	bne.n	8001c64 <__sflush_r+0x64>
 8001c56:	6829      	ldr	r1, [r5, #0]
 8001c58:	291d      	cmp	r1, #29
 8001c5a:	d82b      	bhi.n	8001cb4 <__sflush_r+0xb4>
 8001c5c:	4a28      	ldr	r2, [pc, #160]	; (8001d00 <__sflush_r+0x100>)
 8001c5e:	410a      	asrs	r2, r1
 8001c60:	07d6      	lsls	r6, r2, #31
 8001c62:	d427      	bmi.n	8001cb4 <__sflush_r+0xb4>
 8001c64:	2200      	movs	r2, #0
 8001c66:	6062      	str	r2, [r4, #4]
 8001c68:	04d9      	lsls	r1, r3, #19
 8001c6a:	6922      	ldr	r2, [r4, #16]
 8001c6c:	6022      	str	r2, [r4, #0]
 8001c6e:	d504      	bpl.n	8001c7a <__sflush_r+0x7a>
 8001c70:	1c42      	adds	r2, r0, #1
 8001c72:	d101      	bne.n	8001c78 <__sflush_r+0x78>
 8001c74:	682b      	ldr	r3, [r5, #0]
 8001c76:	b903      	cbnz	r3, 8001c7a <__sflush_r+0x7a>
 8001c78:	6560      	str	r0, [r4, #84]	; 0x54
 8001c7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c7c:	602f      	str	r7, [r5, #0]
 8001c7e:	2900      	cmp	r1, #0
 8001c80:	d0ca      	beq.n	8001c18 <__sflush_r+0x18>
 8001c82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c86:	4299      	cmp	r1, r3
 8001c88:	d002      	beq.n	8001c90 <__sflush_r+0x90>
 8001c8a:	4628      	mov	r0, r5
 8001c8c:	f7ff ff62 	bl	8001b54 <_free_r>
 8001c90:	2000      	movs	r0, #0
 8001c92:	6360      	str	r0, [r4, #52]	; 0x34
 8001c94:	e7c1      	b.n	8001c1a <__sflush_r+0x1a>
 8001c96:	2301      	movs	r3, #1
 8001c98:	4628      	mov	r0, r5
 8001c9a:	47b0      	blx	r6
 8001c9c:	1c41      	adds	r1, r0, #1
 8001c9e:	d1c8      	bne.n	8001c32 <__sflush_r+0x32>
 8001ca0:	682b      	ldr	r3, [r5, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0c5      	beq.n	8001c32 <__sflush_r+0x32>
 8001ca6:	2b1d      	cmp	r3, #29
 8001ca8:	d001      	beq.n	8001cae <__sflush_r+0xae>
 8001caa:	2b16      	cmp	r3, #22
 8001cac:	d101      	bne.n	8001cb2 <__sflush_r+0xb2>
 8001cae:	602f      	str	r7, [r5, #0]
 8001cb0:	e7b2      	b.n	8001c18 <__sflush_r+0x18>
 8001cb2:	89a3      	ldrh	r3, [r4, #12]
 8001cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cb8:	81a3      	strh	r3, [r4, #12]
 8001cba:	e7ae      	b.n	8001c1a <__sflush_r+0x1a>
 8001cbc:	690f      	ldr	r7, [r1, #16]
 8001cbe:	2f00      	cmp	r7, #0
 8001cc0:	d0aa      	beq.n	8001c18 <__sflush_r+0x18>
 8001cc2:	0793      	lsls	r3, r2, #30
 8001cc4:	680e      	ldr	r6, [r1, #0]
 8001cc6:	bf08      	it	eq
 8001cc8:	694b      	ldreq	r3, [r1, #20]
 8001cca:	600f      	str	r7, [r1, #0]
 8001ccc:	bf18      	it	ne
 8001cce:	2300      	movne	r3, #0
 8001cd0:	1bf6      	subs	r6, r6, r7
 8001cd2:	608b      	str	r3, [r1, #8]
 8001cd4:	2e00      	cmp	r6, #0
 8001cd6:	dd9f      	ble.n	8001c18 <__sflush_r+0x18>
 8001cd8:	6a21      	ldr	r1, [r4, #32]
 8001cda:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001cde:	4633      	mov	r3, r6
 8001ce0:	463a      	mov	r2, r7
 8001ce2:	4628      	mov	r0, r5
 8001ce4:	47e0      	blx	ip
 8001ce6:	2800      	cmp	r0, #0
 8001ce8:	dc06      	bgt.n	8001cf8 <__sflush_r+0xf8>
 8001cea:	89a3      	ldrh	r3, [r4, #12]
 8001cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cf0:	81a3      	strh	r3, [r4, #12]
 8001cf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cf6:	e790      	b.n	8001c1a <__sflush_r+0x1a>
 8001cf8:	4407      	add	r7, r0
 8001cfa:	1a36      	subs	r6, r6, r0
 8001cfc:	e7ea      	b.n	8001cd4 <__sflush_r+0xd4>
 8001cfe:	bf00      	nop
 8001d00:	dfbffffe 	.word	0xdfbffffe

08001d04 <_fflush_r>:
 8001d04:	b538      	push	{r3, r4, r5, lr}
 8001d06:	690b      	ldr	r3, [r1, #16]
 8001d08:	4605      	mov	r5, r0
 8001d0a:	460c      	mov	r4, r1
 8001d0c:	b913      	cbnz	r3, 8001d14 <_fflush_r+0x10>
 8001d0e:	2500      	movs	r5, #0
 8001d10:	4628      	mov	r0, r5
 8001d12:	bd38      	pop	{r3, r4, r5, pc}
 8001d14:	b118      	cbz	r0, 8001d1e <_fflush_r+0x1a>
 8001d16:	6a03      	ldr	r3, [r0, #32]
 8001d18:	b90b      	cbnz	r3, 8001d1e <_fflush_r+0x1a>
 8001d1a:	f7ff fe2b 	bl	8001974 <__sinit>
 8001d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0f3      	beq.n	8001d0e <_fflush_r+0xa>
 8001d26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001d28:	07d0      	lsls	r0, r2, #31
 8001d2a:	d404      	bmi.n	8001d36 <_fflush_r+0x32>
 8001d2c:	0599      	lsls	r1, r3, #22
 8001d2e:	d402      	bmi.n	8001d36 <_fflush_r+0x32>
 8001d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d32:	f7ff ff0c 	bl	8001b4e <__retarget_lock_acquire_recursive>
 8001d36:	4628      	mov	r0, r5
 8001d38:	4621      	mov	r1, r4
 8001d3a:	f7ff ff61 	bl	8001c00 <__sflush_r>
 8001d3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d40:	07da      	lsls	r2, r3, #31
 8001d42:	4605      	mov	r5, r0
 8001d44:	d4e4      	bmi.n	8001d10 <_fflush_r+0xc>
 8001d46:	89a3      	ldrh	r3, [r4, #12]
 8001d48:	059b      	lsls	r3, r3, #22
 8001d4a:	d4e1      	bmi.n	8001d10 <_fflush_r+0xc>
 8001d4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d4e:	f7ff feff 	bl	8001b50 <__retarget_lock_release_recursive>
 8001d52:	e7dd      	b.n	8001d10 <_fflush_r+0xc>

08001d54 <findslot>:
 8001d54:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <findslot+0x2c>)
 8001d56:	b510      	push	{r4, lr}
 8001d58:	4604      	mov	r4, r0
 8001d5a:	6818      	ldr	r0, [r3, #0]
 8001d5c:	b118      	cbz	r0, 8001d66 <findslot+0x12>
 8001d5e:	6a03      	ldr	r3, [r0, #32]
 8001d60:	b90b      	cbnz	r3, 8001d66 <findslot+0x12>
 8001d62:	f7ff fe07 	bl	8001974 <__sinit>
 8001d66:	2c13      	cmp	r4, #19
 8001d68:	d807      	bhi.n	8001d7a <findslot+0x26>
 8001d6a:	4806      	ldr	r0, [pc, #24]	; (8001d84 <findslot+0x30>)
 8001d6c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8001d70:	3201      	adds	r2, #1
 8001d72:	d002      	beq.n	8001d7a <findslot+0x26>
 8001d74:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001d78:	bd10      	pop	{r4, pc}
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	e7fc      	b.n	8001d78 <findslot+0x24>
 8001d7e:	bf00      	nop
 8001d80:	20000070 	.word	0x20000070
 8001d84:	20000234 	.word	0x20000234

08001d88 <error>:
 8001d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d8a:	4604      	mov	r4, r0
 8001d8c:	f000 fa54 	bl	8002238 <__errno>
 8001d90:	2613      	movs	r6, #19
 8001d92:	4605      	mov	r5, r0
 8001d94:	2700      	movs	r7, #0
 8001d96:	4630      	mov	r0, r6
 8001d98:	4639      	mov	r1, r7
 8001d9a:	beab      	bkpt	0x00ab
 8001d9c:	4606      	mov	r6, r0
 8001d9e:	602e      	str	r6, [r5, #0]
 8001da0:	4620      	mov	r0, r4
 8001da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001da4 <checkerror>:
 8001da4:	1c43      	adds	r3, r0, #1
 8001da6:	d101      	bne.n	8001dac <checkerror+0x8>
 8001da8:	f7ff bfee 	b.w	8001d88 <error>
 8001dac:	4770      	bx	lr

08001dae <_swiread>:
 8001dae:	b530      	push	{r4, r5, lr}
 8001db0:	b085      	sub	sp, #20
 8001db2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001db6:	9203      	str	r2, [sp, #12]
 8001db8:	2406      	movs	r4, #6
 8001dba:	ad01      	add	r5, sp, #4
 8001dbc:	4620      	mov	r0, r4
 8001dbe:	4629      	mov	r1, r5
 8001dc0:	beab      	bkpt	0x00ab
 8001dc2:	4604      	mov	r4, r0
 8001dc4:	4620      	mov	r0, r4
 8001dc6:	f7ff ffed 	bl	8001da4 <checkerror>
 8001dca:	b005      	add	sp, #20
 8001dcc:	bd30      	pop	{r4, r5, pc}

08001dce <_read>:
 8001dce:	b570      	push	{r4, r5, r6, lr}
 8001dd0:	460e      	mov	r6, r1
 8001dd2:	4615      	mov	r5, r2
 8001dd4:	f7ff ffbe 	bl	8001d54 <findslot>
 8001dd8:	4604      	mov	r4, r0
 8001dda:	b930      	cbnz	r0, 8001dea <_read+0x1c>
 8001ddc:	f000 fa2c 	bl	8002238 <__errno>
 8001de0:	2309      	movs	r3, #9
 8001de2:	6003      	str	r3, [r0, #0]
 8001de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001de8:	bd70      	pop	{r4, r5, r6, pc}
 8001dea:	6800      	ldr	r0, [r0, #0]
 8001dec:	462a      	mov	r2, r5
 8001dee:	4631      	mov	r1, r6
 8001df0:	f7ff ffdd 	bl	8001dae <_swiread>
 8001df4:	1c43      	adds	r3, r0, #1
 8001df6:	bf1f      	itttt	ne
 8001df8:	6863      	ldrne	r3, [r4, #4]
 8001dfa:	1a28      	subne	r0, r5, r0
 8001dfc:	181b      	addne	r3, r3, r0
 8001dfe:	6063      	strne	r3, [r4, #4]
 8001e00:	e7f2      	b.n	8001de8 <_read+0x1a>

08001e02 <_swilseek>:
 8001e02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e04:	460c      	mov	r4, r1
 8001e06:	4616      	mov	r6, r2
 8001e08:	f7ff ffa4 	bl	8001d54 <findslot>
 8001e0c:	4605      	mov	r5, r0
 8001e0e:	b940      	cbnz	r0, 8001e22 <_swilseek+0x20>
 8001e10:	f000 fa12 	bl	8002238 <__errno>
 8001e14:	2309      	movs	r3, #9
 8001e16:	6003      	str	r3, [r0, #0]
 8001e18:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	b003      	add	sp, #12
 8001e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e22:	2e02      	cmp	r6, #2
 8001e24:	d903      	bls.n	8001e2e <_swilseek+0x2c>
 8001e26:	f000 fa07 	bl	8002238 <__errno>
 8001e2a:	2316      	movs	r3, #22
 8001e2c:	e7f3      	b.n	8001e16 <_swilseek+0x14>
 8001e2e:	2e01      	cmp	r6, #1
 8001e30:	d112      	bne.n	8001e58 <_swilseek+0x56>
 8001e32:	6843      	ldr	r3, [r0, #4]
 8001e34:	18e4      	adds	r4, r4, r3
 8001e36:	d4f6      	bmi.n	8001e26 <_swilseek+0x24>
 8001e38:	682b      	ldr	r3, [r5, #0]
 8001e3a:	260a      	movs	r6, #10
 8001e3c:	e9cd 3400 	strd	r3, r4, [sp]
 8001e40:	466f      	mov	r7, sp
 8001e42:	4630      	mov	r0, r6
 8001e44:	4639      	mov	r1, r7
 8001e46:	beab      	bkpt	0x00ab
 8001e48:	4606      	mov	r6, r0
 8001e4a:	4630      	mov	r0, r6
 8001e4c:	f7ff ffaa 	bl	8001da4 <checkerror>
 8001e50:	2800      	cmp	r0, #0
 8001e52:	dbe1      	blt.n	8001e18 <_swilseek+0x16>
 8001e54:	606c      	str	r4, [r5, #4]
 8001e56:	e7e1      	b.n	8001e1c <_swilseek+0x1a>
 8001e58:	2e02      	cmp	r6, #2
 8001e5a:	6803      	ldr	r3, [r0, #0]
 8001e5c:	d1ec      	bne.n	8001e38 <_swilseek+0x36>
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	260c      	movs	r6, #12
 8001e62:	466f      	mov	r7, sp
 8001e64:	4630      	mov	r0, r6
 8001e66:	4639      	mov	r1, r7
 8001e68:	beab      	bkpt	0x00ab
 8001e6a:	4606      	mov	r6, r0
 8001e6c:	4630      	mov	r0, r6
 8001e6e:	f7ff ff99 	bl	8001da4 <checkerror>
 8001e72:	1c43      	adds	r3, r0, #1
 8001e74:	d0d0      	beq.n	8001e18 <_swilseek+0x16>
 8001e76:	4404      	add	r4, r0
 8001e78:	e7de      	b.n	8001e38 <_swilseek+0x36>

08001e7a <_lseek>:
 8001e7a:	f7ff bfc2 	b.w	8001e02 <_swilseek>

08001e7e <_swiwrite>:
 8001e7e:	b530      	push	{r4, r5, lr}
 8001e80:	b085      	sub	sp, #20
 8001e82:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001e86:	9203      	str	r2, [sp, #12]
 8001e88:	2405      	movs	r4, #5
 8001e8a:	ad01      	add	r5, sp, #4
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	4629      	mov	r1, r5
 8001e90:	beab      	bkpt	0x00ab
 8001e92:	4604      	mov	r4, r0
 8001e94:	4620      	mov	r0, r4
 8001e96:	f7ff ff85 	bl	8001da4 <checkerror>
 8001e9a:	b005      	add	sp, #20
 8001e9c:	bd30      	pop	{r4, r5, pc}

08001e9e <_write>:
 8001e9e:	b570      	push	{r4, r5, r6, lr}
 8001ea0:	460e      	mov	r6, r1
 8001ea2:	4615      	mov	r5, r2
 8001ea4:	f7ff ff56 	bl	8001d54 <findslot>
 8001ea8:	4604      	mov	r4, r0
 8001eaa:	b930      	cbnz	r0, 8001eba <_write+0x1c>
 8001eac:	f000 f9c4 	bl	8002238 <__errno>
 8001eb0:	2309      	movs	r3, #9
 8001eb2:	6003      	str	r3, [r0, #0]
 8001eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001eb8:	bd70      	pop	{r4, r5, r6, pc}
 8001eba:	6800      	ldr	r0, [r0, #0]
 8001ebc:	462a      	mov	r2, r5
 8001ebe:	4631      	mov	r1, r6
 8001ec0:	f7ff ffdd 	bl	8001e7e <_swiwrite>
 8001ec4:	1e03      	subs	r3, r0, #0
 8001ec6:	dbf5      	blt.n	8001eb4 <_write+0x16>
 8001ec8:	6862      	ldr	r2, [r4, #4]
 8001eca:	1ae8      	subs	r0, r5, r3
 8001ecc:	4402      	add	r2, r0
 8001ece:	42ab      	cmp	r3, r5
 8001ed0:	6062      	str	r2, [r4, #4]
 8001ed2:	d1f1      	bne.n	8001eb8 <_write+0x1a>
 8001ed4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001ed8:	2000      	movs	r0, #0
 8001eda:	f7ff bf55 	b.w	8001d88 <error>

08001ede <_swiclose>:
 8001ede:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001ee0:	2402      	movs	r4, #2
 8001ee2:	9001      	str	r0, [sp, #4]
 8001ee4:	ad01      	add	r5, sp, #4
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	4629      	mov	r1, r5
 8001eea:	beab      	bkpt	0x00ab
 8001eec:	4604      	mov	r4, r0
 8001eee:	4620      	mov	r0, r4
 8001ef0:	f7ff ff58 	bl	8001da4 <checkerror>
 8001ef4:	b003      	add	sp, #12
 8001ef6:	bd30      	pop	{r4, r5, pc}

08001ef8 <_close>:
 8001ef8:	b538      	push	{r3, r4, r5, lr}
 8001efa:	4605      	mov	r5, r0
 8001efc:	f7ff ff2a 	bl	8001d54 <findslot>
 8001f00:	4604      	mov	r4, r0
 8001f02:	b930      	cbnz	r0, 8001f12 <_close+0x1a>
 8001f04:	f000 f998 	bl	8002238 <__errno>
 8001f08:	2309      	movs	r3, #9
 8001f0a:	6003      	str	r3, [r0, #0]
 8001f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f10:	bd38      	pop	{r3, r4, r5, pc}
 8001f12:	3d01      	subs	r5, #1
 8001f14:	2d01      	cmp	r5, #1
 8001f16:	d809      	bhi.n	8001f2c <_close+0x34>
 8001f18:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <_close+0x48>)
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d104      	bne.n	8001f2c <_close+0x34>
 8001f22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f26:	6003      	str	r3, [r0, #0]
 8001f28:	2000      	movs	r0, #0
 8001f2a:	e7f1      	b.n	8001f10 <_close+0x18>
 8001f2c:	6820      	ldr	r0, [r4, #0]
 8001f2e:	f7ff ffd6 	bl	8001ede <_swiclose>
 8001f32:	2800      	cmp	r0, #0
 8001f34:	d1ec      	bne.n	8001f10 <_close+0x18>
 8001f36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f3a:	6023      	str	r3, [r4, #0]
 8001f3c:	e7e8      	b.n	8001f10 <_close+0x18>
 8001f3e:	bf00      	nop
 8001f40:	20000234 	.word	0x20000234

08001f44 <_swistat>:
 8001f44:	b570      	push	{r4, r5, r6, lr}
 8001f46:	460c      	mov	r4, r1
 8001f48:	f7ff ff04 	bl	8001d54 <findslot>
 8001f4c:	4605      	mov	r5, r0
 8001f4e:	b930      	cbnz	r0, 8001f5e <_swistat+0x1a>
 8001f50:	f000 f972 	bl	8002238 <__errno>
 8001f54:	2309      	movs	r3, #9
 8001f56:	6003      	str	r3, [r0, #0]
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f5c:	bd70      	pop	{r4, r5, r6, pc}
 8001f5e:	6863      	ldr	r3, [r4, #4]
 8001f60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f64:	6063      	str	r3, [r4, #4]
 8001f66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f6a:	64a3      	str	r3, [r4, #72]	; 0x48
 8001f6c:	260c      	movs	r6, #12
 8001f6e:	4630      	mov	r0, r6
 8001f70:	4629      	mov	r1, r5
 8001f72:	beab      	bkpt	0x00ab
 8001f74:	4605      	mov	r5, r0
 8001f76:	4628      	mov	r0, r5
 8001f78:	f7ff ff14 	bl	8001da4 <checkerror>
 8001f7c:	1c43      	adds	r3, r0, #1
 8001f7e:	bf1c      	itt	ne
 8001f80:	6120      	strne	r0, [r4, #16]
 8001f82:	2000      	movne	r0, #0
 8001f84:	e7ea      	b.n	8001f5c <_swistat+0x18>

08001f86 <_stat>:
 8001f86:	b538      	push	{r3, r4, r5, lr}
 8001f88:	460d      	mov	r5, r1
 8001f8a:	4604      	mov	r4, r0
 8001f8c:	2258      	movs	r2, #88	; 0x58
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4628      	mov	r0, r5
 8001f92:	f7ff fd68 	bl	8001a66 <memset>
 8001f96:	4620      	mov	r0, r4
 8001f98:	2100      	movs	r1, #0
 8001f9a:	f000 f811 	bl	8001fc0 <_swiopen>
 8001f9e:	1c43      	adds	r3, r0, #1
 8001fa0:	4604      	mov	r4, r0
 8001fa2:	d00b      	beq.n	8001fbc <_stat+0x36>
 8001fa4:	686b      	ldr	r3, [r5, #4]
 8001fa6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8001faa:	606b      	str	r3, [r5, #4]
 8001fac:	4629      	mov	r1, r5
 8001fae:	f7ff ffc9 	bl	8001f44 <_swistat>
 8001fb2:	4605      	mov	r5, r0
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	f7ff ff9f 	bl	8001ef8 <_close>
 8001fba:	462c      	mov	r4, r5
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	bd38      	pop	{r3, r4, r5, pc}

08001fc0 <_swiopen>:
 8001fc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fc4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002070 <_swiopen+0xb0>
 8001fc8:	b097      	sub	sp, #92	; 0x5c
 8001fca:	4607      	mov	r7, r0
 8001fcc:	460e      	mov	r6, r1
 8001fce:	2500      	movs	r5, #0
 8001fd0:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8001fd4:	1c61      	adds	r1, r4, #1
 8001fd6:	d037      	beq.n	8002048 <_swiopen+0x88>
 8001fd8:	3501      	adds	r5, #1
 8001fda:	2d14      	cmp	r5, #20
 8001fdc:	d1f8      	bne.n	8001fd0 <_swiopen+0x10>
 8001fde:	f000 f92b 	bl	8002238 <__errno>
 8001fe2:	2318      	movs	r3, #24
 8001fe4:	6003      	str	r3, [r0, #0]
 8001fe6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001fea:	e03d      	b.n	8002068 <_swiopen+0xa8>
 8001fec:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8001ff0:	f240 6301 	movw	r3, #1537	; 0x601
 8001ff4:	07b2      	lsls	r2, r6, #30
 8001ff6:	bf48      	it	mi
 8001ff8:	f044 0402 	orrmi.w	r4, r4, #2
 8001ffc:	421e      	tst	r6, r3
 8001ffe:	bf18      	it	ne
 8002000:	f044 0404 	orrne.w	r4, r4, #4
 8002004:	0733      	lsls	r3, r6, #28
 8002006:	bf48      	it	mi
 8002008:	f024 0404 	bicmi.w	r4, r4, #4
 800200c:	4638      	mov	r0, r7
 800200e:	bf48      	it	mi
 8002010:	f044 0408 	orrmi.w	r4, r4, #8
 8002014:	9700      	str	r7, [sp, #0]
 8002016:	f7fe f8f5 	bl	8000204 <strlen>
 800201a:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800201e:	2401      	movs	r4, #1
 8002020:	4620      	mov	r0, r4
 8002022:	4649      	mov	r1, r9
 8002024:	beab      	bkpt	0x00ab
 8002026:	4604      	mov	r4, r0
 8002028:	2c00      	cmp	r4, #0
 800202a:	db08      	blt.n	800203e <_swiopen+0x7e>
 800202c:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8002030:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8002034:	2300      	movs	r3, #0
 8002036:	f8c8 3004 	str.w	r3, [r8, #4]
 800203a:	462c      	mov	r4, r5
 800203c:	e014      	b.n	8002068 <_swiopen+0xa8>
 800203e:	4620      	mov	r0, r4
 8002040:	f7ff fea2 	bl	8001d88 <error>
 8002044:	4604      	mov	r4, r0
 8002046:	e00f      	b.n	8002068 <_swiopen+0xa8>
 8002048:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 800204c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002050:	46e9      	mov	r9, sp
 8002052:	d1cb      	bne.n	8001fec <_swiopen+0x2c>
 8002054:	4649      	mov	r1, r9
 8002056:	4638      	mov	r0, r7
 8002058:	f7ff ff95 	bl	8001f86 <_stat>
 800205c:	3001      	adds	r0, #1
 800205e:	d0c5      	beq.n	8001fec <_swiopen+0x2c>
 8002060:	f000 f8ea 	bl	8002238 <__errno>
 8002064:	2311      	movs	r3, #17
 8002066:	6003      	str	r3, [r0, #0]
 8002068:	4620      	mov	r0, r4
 800206a:	b017      	add	sp, #92	; 0x5c
 800206c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002070:	20000234 	.word	0x20000234

08002074 <_get_semihosting_exts>:
 8002074:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002078:	4606      	mov	r6, r0
 800207a:	460f      	mov	r7, r1
 800207c:	482a      	ldr	r0, [pc, #168]	; (8002128 <_get_semihosting_exts+0xb4>)
 800207e:	2100      	movs	r1, #0
 8002080:	4615      	mov	r5, r2
 8002082:	f7ff ff9d 	bl	8001fc0 <_swiopen>
 8002086:	462a      	mov	r2, r5
 8002088:	4604      	mov	r4, r0
 800208a:	2100      	movs	r1, #0
 800208c:	4630      	mov	r0, r6
 800208e:	f7ff fcea 	bl	8001a66 <memset>
 8002092:	1c63      	adds	r3, r4, #1
 8002094:	d016      	beq.n	80020c4 <_get_semihosting_exts+0x50>
 8002096:	4620      	mov	r0, r4
 8002098:	f7ff fe5c 	bl	8001d54 <findslot>
 800209c:	f04f 080c 	mov.w	r8, #12
 80020a0:	4681      	mov	r9, r0
 80020a2:	4640      	mov	r0, r8
 80020a4:	4649      	mov	r1, r9
 80020a6:	beab      	bkpt	0x00ab
 80020a8:	4680      	mov	r8, r0
 80020aa:	4640      	mov	r0, r8
 80020ac:	f7ff fe7a 	bl	8001da4 <checkerror>
 80020b0:	2803      	cmp	r0, #3
 80020b2:	dd02      	ble.n	80020ba <_get_semihosting_exts+0x46>
 80020b4:	1ec3      	subs	r3, r0, #3
 80020b6:	42ab      	cmp	r3, r5
 80020b8:	dc08      	bgt.n	80020cc <_get_semihosting_exts+0x58>
 80020ba:	4620      	mov	r0, r4
 80020bc:	f7ff ff1c 	bl	8001ef8 <_close>
 80020c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80020c4:	4620      	mov	r0, r4
 80020c6:	b003      	add	sp, #12
 80020c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80020cc:	2204      	movs	r2, #4
 80020ce:	eb0d 0102 	add.w	r1, sp, r2
 80020d2:	4620      	mov	r0, r4
 80020d4:	f7ff fe7b 	bl	8001dce <_read>
 80020d8:	2803      	cmp	r0, #3
 80020da:	ddee      	ble.n	80020ba <_get_semihosting_exts+0x46>
 80020dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80020e0:	2b53      	cmp	r3, #83	; 0x53
 80020e2:	d1ea      	bne.n	80020ba <_get_semihosting_exts+0x46>
 80020e4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80020e8:	2b48      	cmp	r3, #72	; 0x48
 80020ea:	d1e6      	bne.n	80020ba <_get_semihosting_exts+0x46>
 80020ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80020f0:	2b46      	cmp	r3, #70	; 0x46
 80020f2:	d1e2      	bne.n	80020ba <_get_semihosting_exts+0x46>
 80020f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80020f8:	2b42      	cmp	r3, #66	; 0x42
 80020fa:	d1de      	bne.n	80020ba <_get_semihosting_exts+0x46>
 80020fc:	2201      	movs	r2, #1
 80020fe:	4639      	mov	r1, r7
 8002100:	4620      	mov	r0, r4
 8002102:	f7ff fe7e 	bl	8001e02 <_swilseek>
 8002106:	2800      	cmp	r0, #0
 8002108:	dbd7      	blt.n	80020ba <_get_semihosting_exts+0x46>
 800210a:	462a      	mov	r2, r5
 800210c:	4631      	mov	r1, r6
 800210e:	4620      	mov	r0, r4
 8002110:	f7ff fe5d 	bl	8001dce <_read>
 8002114:	4605      	mov	r5, r0
 8002116:	4620      	mov	r0, r4
 8002118:	f7ff feee 	bl	8001ef8 <_close>
 800211c:	4628      	mov	r0, r5
 800211e:	f7ff fe41 	bl	8001da4 <checkerror>
 8002122:	4604      	mov	r4, r0
 8002124:	e7ce      	b.n	80020c4 <_get_semihosting_exts+0x50>
 8002126:	bf00      	nop
 8002128:	080022d0 	.word	0x080022d0

0800212c <initialise_semihosting_exts>:
 800212c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800212e:	4d0a      	ldr	r5, [pc, #40]	; (8002158 <initialise_semihosting_exts+0x2c>)
 8002130:	4c0a      	ldr	r4, [pc, #40]	; (800215c <initialise_semihosting_exts+0x30>)
 8002132:	2100      	movs	r1, #0
 8002134:	2201      	movs	r2, #1
 8002136:	a801      	add	r0, sp, #4
 8002138:	6029      	str	r1, [r5, #0]
 800213a:	6022      	str	r2, [r4, #0]
 800213c:	f7ff ff9a 	bl	8002074 <_get_semihosting_exts>
 8002140:	2800      	cmp	r0, #0
 8002142:	dd07      	ble.n	8002154 <initialise_semihosting_exts+0x28>
 8002144:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002148:	f003 0201 	and.w	r2, r3, #1
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	602a      	str	r2, [r5, #0]
 8002152:	6023      	str	r3, [r4, #0]
 8002154:	b003      	add	sp, #12
 8002156:	bd30      	pop	{r4, r5, pc}
 8002158:	20000074 	.word	0x20000074
 800215c:	20000078 	.word	0x20000078

08002160 <_has_ext_stdout_stderr>:
 8002160:	b510      	push	{r4, lr}
 8002162:	4c04      	ldr	r4, [pc, #16]	; (8002174 <_has_ext_stdout_stderr+0x14>)
 8002164:	6823      	ldr	r3, [r4, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	da01      	bge.n	800216e <_has_ext_stdout_stderr+0xe>
 800216a:	f7ff ffdf 	bl	800212c <initialise_semihosting_exts>
 800216e:	6820      	ldr	r0, [r4, #0]
 8002170:	bd10      	pop	{r4, pc}
 8002172:	bf00      	nop
 8002174:	20000078 	.word	0x20000078

08002178 <initialise_monitor_handles>:
 8002178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800217c:	b085      	sub	sp, #20
 800217e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8002224 <initialise_monitor_handles+0xac>
 8002182:	f8cd 9004 	str.w	r9, [sp, #4]
 8002186:	2303      	movs	r3, #3
 8002188:	2400      	movs	r4, #0
 800218a:	9303      	str	r3, [sp, #12]
 800218c:	af01      	add	r7, sp, #4
 800218e:	9402      	str	r4, [sp, #8]
 8002190:	2501      	movs	r5, #1
 8002192:	4628      	mov	r0, r5
 8002194:	4639      	mov	r1, r7
 8002196:	beab      	bkpt	0x00ab
 8002198:	4605      	mov	r5, r0
 800219a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8002228 <initialise_monitor_handles+0xb0>
 800219e:	4623      	mov	r3, r4
 80021a0:	4c22      	ldr	r4, [pc, #136]	; (800222c <initialise_monitor_handles+0xb4>)
 80021a2:	f8c8 5000 	str.w	r5, [r8]
 80021a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021aa:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80021ae:	3301      	adds	r3, #1
 80021b0:	2b14      	cmp	r3, #20
 80021b2:	d1fa      	bne.n	80021aa <initialise_monitor_handles+0x32>
 80021b4:	f7ff ffd4 	bl	8002160 <_has_ext_stdout_stderr>
 80021b8:	4d1d      	ldr	r5, [pc, #116]	; (8002230 <initialise_monitor_handles+0xb8>)
 80021ba:	b1d0      	cbz	r0, 80021f2 <initialise_monitor_handles+0x7a>
 80021bc:	f04f 0a03 	mov.w	sl, #3
 80021c0:	2304      	movs	r3, #4
 80021c2:	f8cd 9004 	str.w	r9, [sp, #4]
 80021c6:	2601      	movs	r6, #1
 80021c8:	f8cd a00c 	str.w	sl, [sp, #12]
 80021cc:	9302      	str	r3, [sp, #8]
 80021ce:	4630      	mov	r0, r6
 80021d0:	4639      	mov	r1, r7
 80021d2:	beab      	bkpt	0x00ab
 80021d4:	4683      	mov	fp, r0
 80021d6:	4b17      	ldr	r3, [pc, #92]	; (8002234 <initialise_monitor_handles+0xbc>)
 80021d8:	f8cd 9004 	str.w	r9, [sp, #4]
 80021dc:	f8c3 b000 	str.w	fp, [r3]
 80021e0:	2308      	movs	r3, #8
 80021e2:	f8cd a00c 	str.w	sl, [sp, #12]
 80021e6:	9302      	str	r3, [sp, #8]
 80021e8:	4630      	mov	r0, r6
 80021ea:	4639      	mov	r1, r7
 80021ec:	beab      	bkpt	0x00ab
 80021ee:	4606      	mov	r6, r0
 80021f0:	602e      	str	r6, [r5, #0]
 80021f2:	682b      	ldr	r3, [r5, #0]
 80021f4:	3301      	adds	r3, #1
 80021f6:	bf02      	ittt	eq
 80021f8:	4b0e      	ldreq	r3, [pc, #56]	; (8002234 <initialise_monitor_handles+0xbc>)
 80021fa:	681b      	ldreq	r3, [r3, #0]
 80021fc:	602b      	streq	r3, [r5, #0]
 80021fe:	2600      	movs	r6, #0
 8002200:	f8d8 3000 	ldr.w	r3, [r8]
 8002204:	6023      	str	r3, [r4, #0]
 8002206:	6066      	str	r6, [r4, #4]
 8002208:	f7ff ffaa 	bl	8002160 <_has_ext_stdout_stderr>
 800220c:	b130      	cbz	r0, 800221c <initialise_monitor_handles+0xa4>
 800220e:	4b09      	ldr	r3, [pc, #36]	; (8002234 <initialise_monitor_handles+0xbc>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002216:	682b      	ldr	r3, [r5, #0]
 8002218:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800221c:	b005      	add	sp, #20
 800221e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002222:	bf00      	nop
 8002224:	080022e6 	.word	0x080022e6
 8002228:	2000022c 	.word	0x2000022c
 800222c:	20000234 	.word	0x20000234
 8002230:	20000228 	.word	0x20000228
 8002234:	20000230 	.word	0x20000230

08002238 <__errno>:
 8002238:	4b01      	ldr	r3, [pc, #4]	; (8002240 <__errno+0x8>)
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	20000070 	.word	0x20000070

08002244 <_init>:
 8002244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002246:	bf00      	nop
 8002248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800224a:	bc08      	pop	{r3}
 800224c:	469e      	mov	lr, r3
 800224e:	4770      	bx	lr

08002250 <_fini>:
 8002250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002252:	bf00      	nop
 8002254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002256:	bc08      	pop	{r3}
 8002258:	469e      	mov	lr, r3
 800225a:	4770      	bx	lr

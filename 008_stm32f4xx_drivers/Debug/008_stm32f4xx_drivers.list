
008_stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cb4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e78  08000e78  00020420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e78  08000e78  00020420  2**0
                  CONTENTS
  4 .ARM          00000000  08000e78  08000e78  00020420  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e78  08000e78  00020420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e78  08000e78  00010e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e7c  08000e7c  00010e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000420  20000000  08000e80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000420  080012a0  00020420  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  080012a0  00020460  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020420  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002044a  2**0
                  CONTENTS, READONLY
 13 .debug_info   000017d3  00000000  00000000  0002048d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005c7  00000000  00000000  00021c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000198  00000000  00000000  00022228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000126  00000000  00000000  000223c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002848  00000000  00000000  000224e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001ebb  00000000  00000000  00024d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a702  00000000  00000000  00026be9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000584  00000000  00000000  000312ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00031870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000420 	.word	0x20000420
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000e60 	.word	0x08000e60

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000424 	.word	0x20000424
 8000200:	08000e60 	.word	0x08000e60

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <GPIO_PeriClockControl>:
 * @return            -  void
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi){
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	460b      	mov	r3, r1
 800021e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){ // Enable
 8000220:	78fb      	ldrb	r3, [r7, #3]
 8000222:	2b01      	cmp	r3, #1
 8000224:	d157      	bne.n	80002d6 <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA){
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a59      	ldr	r2, [pc, #356]	; (8000390 <GPIO_PeriClockControl+0x17c>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800022e:	4b59      	ldr	r3, [pc, #356]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000232:	4a58      	ldr	r2, [pc, #352]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000234:	f043 0301 	orr.w	r3, r3, #1
 8000238:	6313      	str	r3, [r2, #48]	; 0x30
		}else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}

}
 800023a:	e0a3      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB){
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a56      	ldr	r2, [pc, #344]	; (8000398 <GPIO_PeriClockControl+0x184>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000244:	4b53      	ldr	r3, [pc, #332]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a52      	ldr	r2, [pc, #328]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800024a:	f043 0302 	orr.w	r3, r3, #2
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000250:	e098      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC){
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a51      	ldr	r2, [pc, #324]	; (800039c <GPIO_PeriClockControl+0x188>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800025a:	4b4e      	ldr	r3, [pc, #312]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025e:	4a4d      	ldr	r2, [pc, #308]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000260:	f043 0304 	orr.w	r3, r3, #4
 8000264:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000266:	e08d      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOD){
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a4d      	ldr	r2, [pc, #308]	; (80003a0 <GPIO_PeriClockControl+0x18c>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d106      	bne.n	800027e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000270:	4b48      	ldr	r3, [pc, #288]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000274:	4a47      	ldr	r2, [pc, #284]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000276:	f043 0308 	orr.w	r3, r3, #8
 800027a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800027c:	e082      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE){
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a48      	ldr	r2, [pc, #288]	; (80003a4 <GPIO_PeriClockControl+0x190>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000286:	4b43      	ldr	r3, [pc, #268]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028a:	4a42      	ldr	r2, [pc, #264]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800028c:	f043 0310 	orr.w	r3, r3, #16
 8000290:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000292:	e077      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF){
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a44      	ldr	r2, [pc, #272]	; (80003a8 <GPIO_PeriClockControl+0x194>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d106      	bne.n	80002aa <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800029c:	4b3d      	ldr	r3, [pc, #244]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a3c      	ldr	r2, [pc, #240]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002a2:	f043 0320 	orr.w	r3, r3, #32
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a8:	e06c      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOG){
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a3f      	ldr	r2, [pc, #252]	; (80003ac <GPIO_PeriClockControl+0x198>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d106      	bne.n	80002c0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80002b2:	4b38      	ldr	r3, [pc, #224]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	4a37      	ldr	r2, [pc, #220]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002be:	e061      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOH){
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a3b      	ldr	r2, [pc, #236]	; (80003b0 <GPIO_PeriClockControl+0x19c>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d15d      	bne.n	8000384 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 80002c8:	4b32      	ldr	r3, [pc, #200]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002cc:	4a31      	ldr	r2, [pc, #196]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002d4:	e056      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA){
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a2d      	ldr	r2, [pc, #180]	; (8000390 <GPIO_PeriClockControl+0x17c>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d106      	bne.n	80002ec <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 80002de:	4b2d      	ldr	r3, [pc, #180]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e2:	4a2c      	ldr	r2, [pc, #176]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002e4:	f023 0301 	bic.w	r3, r3, #1
 80002e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ea:	e04b      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB){
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a2a      	ldr	r2, [pc, #168]	; (8000398 <GPIO_PeriClockControl+0x184>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d106      	bne.n	8000302 <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 80002f4:	4b27      	ldr	r3, [pc, #156]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f8:	4a26      	ldr	r2, [pc, #152]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002fa:	f023 0302 	bic.w	r3, r3, #2
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000300:	e040      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC){
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a25      	ldr	r2, [pc, #148]	; (800039c <GPIO_PeriClockControl+0x188>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d106      	bne.n	8000318 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 800030a:	4b22      	ldr	r3, [pc, #136]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800030c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030e:	4a21      	ldr	r2, [pc, #132]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000310:	f023 0304 	bic.w	r3, r3, #4
 8000314:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000316:	e035      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOD){
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a21      	ldr	r2, [pc, #132]	; (80003a0 <GPIO_PeriClockControl+0x18c>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d106      	bne.n	800032e <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 8000320:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000324:	4a1b      	ldr	r2, [pc, #108]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000326:	f023 0308 	bic.w	r3, r3, #8
 800032a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800032c:	e02a      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE){
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a1c      	ldr	r2, [pc, #112]	; (80003a4 <GPIO_PeriClockControl+0x190>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d106      	bne.n	8000344 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 8000336:	4b17      	ldr	r3, [pc, #92]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033a:	4a16      	ldr	r2, [pc, #88]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800033c:	f023 0310 	bic.w	r3, r3, #16
 8000340:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000342:	e01f      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF){
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a18      	ldr	r2, [pc, #96]	; (80003a8 <GPIO_PeriClockControl+0x194>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d106      	bne.n	800035a <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000350:	4a10      	ldr	r2, [pc, #64]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000352:	f023 0320 	bic.w	r3, r3, #32
 8000356:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000358:	e014      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOG){
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a13      	ldr	r2, [pc, #76]	; (80003ac <GPIO_PeriClockControl+0x198>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d106      	bne.n	8000370 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8000362:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000366:	4a0b      	ldr	r2, [pc, #44]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000368:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800036c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036e:	e009      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOH){
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a0f      	ldr	r2, [pc, #60]	; (80003b0 <GPIO_PeriClockControl+0x19c>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d105      	bne.n	8000384 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037c:	4a05      	ldr	r2, [pc, #20]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800037e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000382:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	bc80      	pop	{r7}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40020000 	.word	0x40020000
 8000394:	40023800 	.word	0x40023800
 8000398:	40020400 	.word	0x40020400
 800039c:	40020800 	.word	0x40020800
 80003a0:	40020c00 	.word	0x40020c00
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40021400 	.word	0x40021400
 80003ac:	40021800 	.word	0x40021800
 80003b0:	40021c00 	.word	0x40021c00

080003b4 <GPIO_Init>:


/*
 * Initialize and De-Initialize
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]

	// Enable Peripheral Clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2101      	movs	r1, #1
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff ff26 	bl	8000214 <GPIO_PeriClockControl>

	uint32_t temp = 0; // Temporary Register
 80003c8:	2300      	movs	r3, #0
 80003ca:	60fb      	str	r3, [r7, #12]

	// 1. Configure Mode of GPIO Pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	795b      	ldrb	r3, [r3, #5]
 80003d0:	2b03      	cmp	r3, #3
 80003d2:	d821      	bhi.n	8000418 <GPIO_Init+0x64>
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	795b      	ldrb	r3, [r3, #5]
 80003d8:	461a      	mov	r2, r3
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	791b      	ldrb	r3, [r3, #4]
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	fa02 f303 	lsl.w	r3, r2, r3
 80003e4:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	791b      	ldrb	r3, [r3, #4]
 80003f0:	4619      	mov	r1, r3
 80003f2:	2303      	movs	r3, #3
 80003f4:	408b      	lsls	r3, r1
 80003f6:	43db      	mvns	r3, r3
 80003f8:	4619      	mov	r1, r3
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	400a      	ands	r2, r1
 8000400:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // Set
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	6819      	ldr	r1, [r3, #0]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	68fa      	ldr	r2, [r7, #12]
 800040e:	430a      	orrs	r2, r1
 8000410:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	e0b8      	b.n	800058a <GPIO_Init+0x1d6>
	}else{
		// TODO: Interrupt Mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	795b      	ldrb	r3, [r3, #5]
 800041c:	2b04      	cmp	r3, #4
 800041e:	d117      	bne.n	8000450 <GPIO_Init+0x9c>
			// Configure the Falling Trigger Selection Register
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000420:	4b43      	ldr	r3, [pc, #268]	; (8000530 <GPIO_Init+0x17c>)
 8000422:	68db      	ldr	r3, [r3, #12]
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	7912      	ldrb	r2, [r2, #4]
 8000428:	4611      	mov	r1, r2
 800042a:	2201      	movs	r2, #1
 800042c:	408a      	lsls	r2, r1
 800042e:	4611      	mov	r1, r2
 8000430:	4a3f      	ldr	r2, [pc, #252]	; (8000530 <GPIO_Init+0x17c>)
 8000432:	430b      	orrs	r3, r1
 8000434:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear RTSR
 8000436:	4b3e      	ldr	r3, [pc, #248]	; (8000530 <GPIO_Init+0x17c>)
 8000438:	689b      	ldr	r3, [r3, #8]
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	7912      	ldrb	r2, [r2, #4]
 800043e:	4611      	mov	r1, r2
 8000440:	2201      	movs	r2, #1
 8000442:	408a      	lsls	r2, r1
 8000444:	43d2      	mvns	r2, r2
 8000446:	4611      	mov	r1, r2
 8000448:	4a39      	ldr	r2, [pc, #228]	; (8000530 <GPIO_Init+0x17c>)
 800044a:	400b      	ands	r3, r1
 800044c:	6093      	str	r3, [r2, #8]
 800044e:	e035      	b.n	80004bc <GPIO_Init+0x108>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	795b      	ldrb	r3, [r3, #5]
 8000454:	2b05      	cmp	r3, #5
 8000456:	d117      	bne.n	8000488 <GPIO_Init+0xd4>
			// Configure the Rising Trigger Selection Register
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000458:	4b35      	ldr	r3, [pc, #212]	; (8000530 <GPIO_Init+0x17c>)
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	687a      	ldr	r2, [r7, #4]
 800045e:	7912      	ldrb	r2, [r2, #4]
 8000460:	4611      	mov	r1, r2
 8000462:	2201      	movs	r2, #1
 8000464:	408a      	lsls	r2, r1
 8000466:	4611      	mov	r1, r2
 8000468:	4a31      	ldr	r2, [pc, #196]	; (8000530 <GPIO_Init+0x17c>)
 800046a:	430b      	orrs	r3, r1
 800046c:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear FTSR
 800046e:	4b30      	ldr	r3, [pc, #192]	; (8000530 <GPIO_Init+0x17c>)
 8000470:	68db      	ldr	r3, [r3, #12]
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	7912      	ldrb	r2, [r2, #4]
 8000476:	4611      	mov	r1, r2
 8000478:	2201      	movs	r2, #1
 800047a:	408a      	lsls	r2, r1
 800047c:	43d2      	mvns	r2, r2
 800047e:	4611      	mov	r1, r2
 8000480:	4a2b      	ldr	r2, [pc, #172]	; (8000530 <GPIO_Init+0x17c>)
 8000482:	400b      	ands	r3, r1
 8000484:	60d3      	str	r3, [r2, #12]
 8000486:	e019      	b.n	80004bc <GPIO_Init+0x108>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	795b      	ldrb	r3, [r3, #5]
 800048c:	2b06      	cmp	r3, #6
 800048e:	d115      	bne.n	80004bc <GPIO_Init+0x108>
			// Configure Both Falling and Rising
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000490:	4b27      	ldr	r3, [pc, #156]	; (8000530 <GPIO_Init+0x17c>)
 8000492:	68db      	ldr	r3, [r3, #12]
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	7912      	ldrb	r2, [r2, #4]
 8000498:	4611      	mov	r1, r2
 800049a:	2201      	movs	r2, #1
 800049c:	408a      	lsls	r2, r1
 800049e:	4611      	mov	r1, r2
 80004a0:	4a23      	ldr	r2, [pc, #140]	; (8000530 <GPIO_Init+0x17c>)
 80004a2:	430b      	orrs	r3, r1
 80004a4:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a6:	4b22      	ldr	r3, [pc, #136]	; (8000530 <GPIO_Init+0x17c>)
 80004a8:	689b      	ldr	r3, [r3, #8]
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	7912      	ldrb	r2, [r2, #4]
 80004ae:	4611      	mov	r1, r2
 80004b0:	2201      	movs	r2, #1
 80004b2:	408a      	lsls	r2, r1
 80004b4:	4611      	mov	r1, r2
 80004b6:	4a1e      	ldr	r2, [pc, #120]	; (8000530 <GPIO_Init+0x17c>)
 80004b8:	430b      	orrs	r3, r1
 80004ba:	6093      	str	r3, [r2, #8]
		}

		// Configure the GPIO port Selection in SYSCFG_EXTICR
		uint8_t ExtiCR_Number = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	791b      	ldrb	r3, [r3, #4]
 80004c0:	089b      	lsrs	r3, r3, #2
 80004c2:	72fb      	strb	r3, [r7, #11]
		uint8_t ExtiCR_ShiftOffset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	791b      	ldrb	r3, [r3, #4]
 80004c8:	f003 0303 	and.w	r3, r3, #3
 80004cc:	72bb      	strb	r3, [r7, #10]
		uint8_t portcode = GPIO_BASEADDR_TO_PORTCODE(pGPIOHandle->pGPIOx);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a18      	ldr	r2, [pc, #96]	; (8000534 <GPIO_Init+0x180>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d03b      	beq.n	8000550 <GPIO_Init+0x19c>
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a16      	ldr	r2, [pc, #88]	; (8000538 <GPIO_Init+0x184>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d024      	beq.n	800052c <GPIO_Init+0x178>
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a15      	ldr	r2, [pc, #84]	; (800053c <GPIO_Init+0x188>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d01d      	beq.n	8000528 <GPIO_Init+0x174>
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a13      	ldr	r2, [pc, #76]	; (8000540 <GPIO_Init+0x18c>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d016      	beq.n	8000524 <GPIO_Init+0x170>
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a12      	ldr	r2, [pc, #72]	; (8000544 <GPIO_Init+0x190>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d00f      	beq.n	8000520 <GPIO_Init+0x16c>
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a10      	ldr	r2, [pc, #64]	; (8000548 <GPIO_Init+0x194>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d008      	beq.n	800051c <GPIO_Init+0x168>
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a0f      	ldr	r2, [pc, #60]	; (800054c <GPIO_Init+0x198>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d101      	bne.n	8000518 <GPIO_Init+0x164>
 8000514:	2306      	movs	r3, #6
 8000516:	e01c      	b.n	8000552 <GPIO_Init+0x19e>
 8000518:	2300      	movs	r3, #0
 800051a:	e01a      	b.n	8000552 <GPIO_Init+0x19e>
 800051c:	2305      	movs	r3, #5
 800051e:	e018      	b.n	8000552 <GPIO_Init+0x19e>
 8000520:	2304      	movs	r3, #4
 8000522:	e016      	b.n	8000552 <GPIO_Init+0x19e>
 8000524:	2303      	movs	r3, #3
 8000526:	e014      	b.n	8000552 <GPIO_Init+0x19e>
 8000528:	2302      	movs	r3, #2
 800052a:	e012      	b.n	8000552 <GPIO_Init+0x19e>
 800052c:	2301      	movs	r3, #1
 800052e:	e010      	b.n	8000552 <GPIO_Init+0x19e>
 8000530:	40013c00 	.word	0x40013c00
 8000534:	40020000 	.word	0x40020000
 8000538:	40020400 	.word	0x40020400
 800053c:	40020800 	.word	0x40020800
 8000540:	40020c00 	.word	0x40020c00
 8000544:	40021000 	.word	0x40021000
 8000548:	40021400 	.word	0x40021400
 800054c:	40021800 	.word	0x40021800
 8000550:	2300      	movs	r3, #0
 8000552:	727b      	strb	r3, [r7, #9]
		SYSCFG_PCLK_EN();
 8000554:	4b6a      	ldr	r3, [pc, #424]	; (8000700 <GPIO_Init+0x34c>)
 8000556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000558:	4a69      	ldr	r2, [pc, #420]	; (8000700 <GPIO_Init+0x34c>)
 800055a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[ExtiCR_Number] = portcode << (ExtiCR_ShiftOffset * 4);
 8000560:	7a7a      	ldrb	r2, [r7, #9]
 8000562:	7abb      	ldrb	r3, [r7, #10]
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	fa02 f103 	lsl.w	r1, r2, r3
 800056a:	4a66      	ldr	r2, [pc, #408]	; (8000704 <GPIO_Init+0x350>)
 800056c:	7afb      	ldrb	r3, [r7, #11]
 800056e:	3302      	adds	r3, #2
 8000570:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000574:	4b64      	ldr	r3, [pc, #400]	; (8000708 <GPIO_Init+0x354>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	7912      	ldrb	r2, [r2, #4]
 800057c:	4611      	mov	r1, r2
 800057e:	2201      	movs	r2, #1
 8000580:	408a      	lsls	r2, r1
 8000582:	4611      	mov	r1, r2
 8000584:	4a60      	ldr	r2, [pc, #384]	; (8000708 <GPIO_Init+0x354>)
 8000586:	430b      	orrs	r3, r1
 8000588:	6013      	str	r3, [r2, #0]
	}

	// 2. Configure Speed
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	799b      	ldrb	r3, [r3, #6]
 800058e:	461a      	mov	r2, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	791b      	ldrb	r3, [r3, #4]
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	fa02 f303 	lsl.w	r3, r2, r3
 800059a:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	689a      	ldr	r2, [r3, #8]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	791b      	ldrb	r3, [r3, #4]
 80005a6:	4619      	mov	r1, r3
 80005a8:	2303      	movs	r3, #3
 80005aa:	408b      	lsls	r3, r1
 80005ac:	43db      	mvns	r3, r3
 80005ae:	4619      	mov	r1, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	400a      	ands	r2, r1
 80005b6:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	6899      	ldr	r1, [r3, #8]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	68fa      	ldr	r2, [r7, #12]
 80005c4:	430a      	orrs	r2, r1
 80005c6:	609a      	str	r2, [r3, #8]
	temp = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]

	// 3. Configure Pull-up Pull-down Settings
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	79db      	ldrb	r3, [r3, #7]
 80005d0:	461a      	mov	r2, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	791b      	ldrb	r3, [r3, #4]
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	fa02 f303 	lsl.w	r3, r2, r3
 80005dc:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	68da      	ldr	r2, [r3, #12]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	791b      	ldrb	r3, [r3, #4]
 80005e8:	4619      	mov	r1, r3
 80005ea:	2303      	movs	r3, #3
 80005ec:	408b      	lsls	r3, r1
 80005ee:	43db      	mvns	r3, r3
 80005f0:	4619      	mov	r1, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	400a      	ands	r2, r1
 80005f8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	68d9      	ldr	r1, [r3, #12]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	68fa      	ldr	r2, [r7, #12]
 8000606:	430a      	orrs	r2, r1
 8000608:	60da      	str	r2, [r3, #12]
	temp = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]

	// 4. Configure the Output Type
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	7a1b      	ldrb	r3, [r3, #8]
 8000612:	461a      	mov	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	791b      	ldrb	r3, [r3, #4]
 8000618:	fa02 f303 	lsl.w	r3, r2, r3
 800061c:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	685a      	ldr	r2, [r3, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	791b      	ldrb	r3, [r3, #4]
 8000628:	4619      	mov	r1, r3
 800062a:	2301      	movs	r3, #1
 800062c:	408b      	lsls	r3, r1
 800062e:	43db      	mvns	r3, r3
 8000630:	4619      	mov	r1, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	400a      	ands	r2, r1
 8000638:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	6859      	ldr	r1, [r3, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	68fa      	ldr	r2, [r7, #12]
 8000646:	430a      	orrs	r2, r1
 8000648:	605a      	str	r2, [r3, #4]
	temp = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]

	// 5. Configure Alternate Functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFUN){
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	795b      	ldrb	r3, [r3, #5]
 8000652:	2b02      	cmp	r3, #2
 8000654:	d150      	bne.n	80006f8 <GPIO_Init+0x344>
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= GPIO_PIN_NO_7){
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	791b      	ldrb	r3, [r3, #4]
 800065a:	2b07      	cmp	r3, #7
 800065c:	d826      	bhi.n	80006ac <GPIO_Init+0x2f8>
				// AFRL Registers
				temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	7a5b      	ldrb	r3, [r3, #9]
 8000662:	461a      	mov	r2, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	791b      	ldrb	r3, [r3, #4]
 8000668:	f003 0307 	and.w	r3, r3, #7
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	fa02 f303 	lsl.w	r3, r2, r3
 8000672:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->AFRL &= ~(0xF << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8))); // Clear
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	6a1a      	ldr	r2, [r3, #32]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	791b      	ldrb	r3, [r3, #4]
 800067e:	f003 0307 	and.w	r3, r3, #7
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	210f      	movs	r1, #15
 8000686:	fa01 f303 	lsl.w	r3, r1, r3
 800068a:	43db      	mvns	r3, r3
 800068c:	4619      	mov	r1, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	400a      	ands	r2, r1
 8000694:	621a      	str	r2, [r3, #32]
				pGPIOHandle->pGPIOx->AFRL |= temp;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	6a19      	ldr	r1, [r3, #32]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	430a      	orrs	r2, r1
 80006a4:	621a      	str	r2, [r3, #32]
				temp = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->AFRH |= temp;
				temp = 0;
			}
	}

}
 80006aa:	e025      	b.n	80006f8 <GPIO_Init+0x344>
				temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	7a5b      	ldrb	r3, [r3, #9]
 80006b0:	461a      	mov	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	791b      	ldrb	r3, [r3, #4]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	fa02 f303 	lsl.w	r3, r2, r3
 80006c0:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->AFRH &= ~(0xF << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8))); // Clear
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	791b      	ldrb	r3, [r3, #4]
 80006cc:	f003 0307 	and.w	r3, r3, #7
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	210f      	movs	r1, #15
 80006d4:	fa01 f303 	lsl.w	r3, r1, r3
 80006d8:	43db      	mvns	r3, r3
 80006da:	4619      	mov	r1, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	400a      	ands	r2, r1
 80006e2:	625a      	str	r2, [r3, #36]	; 0x24
				pGPIOHandle->pGPIOx->AFRH |= temp;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	68fa      	ldr	r2, [r7, #12]
 80006f0:	430a      	orrs	r2, r1
 80006f2:	625a      	str	r2, [r3, #36]	; 0x24
				temp = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
}
 80006f8:	bf00      	nop
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40013800 	.word	0x40013800
 8000708:	40013c00 	.word	0x40013c00

0800070c <GPIO_ReadFromInputPin>:


/*
 * Data Read and Write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	691a      	ldr	r2, [r3, #16]
 800071c:	78fb      	ldrb	r3, [r7, #3]
 800071e:	fa22 f303 	lsr.w	r3, r2, r3
 8000722:	b2db      	uxtb	r3, r3
 8000724:	f003 0301 	and.w	r3, r3, #1
 8000728:	73fb      	strb	r3, [r7, #15]
	return value;
 800072a:	7bfb      	ldrb	r3, [r7, #15]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3714      	adds	r7, #20
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr

08000736 <RCC_GetPLLOutputClock>:
#include "stm32f446xx_rcc_driver.h"



// Not implemented, just a placeholder
uint32_t RCC_GetPLLOutputClock(void){
 8000736:	b480      	push	{r7}
 8000738:	b083      	sub	sp, #12
 800073a:	af00      	add	r7, sp, #0
	uint32_t temp = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
	return temp;
 8000740:	687b      	ldr	r3, [r7, #4]
}
 8000742:	4618      	mov	r0, r3
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <RCC_GetPCLK1Value>:

uint16_t AHB_PreScaler[8] = {2, 4, 8, 16, 64, 128, 512};
uint16_t APB1_PreScaler[4] = {2, 4, 8, 16};
uint16_t APB2_PreScaler[4] = {2, 4, 8, 16};

uint32_t RCC_GetPCLK1Value(void){
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, ahbp, apb1p;
	clksrc = (RCC->CFGR >> 2) & 0x3;
 8000752:	4b26      	ldr	r3, [pc, #152]	; (80007ec <RCC_GetPCLK1Value+0xa0>)
 8000754:	689b      	ldr	r3, [r3, #8]
 8000756:	089b      	lsrs	r3, r3, #2
 8000758:	b2db      	uxtb	r3, r3
 800075a:	f003 0303 	and.w	r3, r3, #3
 800075e:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0){
 8000760:	7a7b      	ldrb	r3, [r7, #9]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d102      	bne.n	800076c <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 8000766:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <RCC_GetPCLK1Value+0xa4>)
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	e00b      	b.n	8000784 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1){
 800076c:	7a7b      	ldrb	r3, [r7, #9]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d102      	bne.n	8000778 <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 8000772:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <RCC_GetPCLK1Value+0xa8>)
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	e005      	b.n	8000784 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 2){
 8000778:	7a7b      	ldrb	r3, [r7, #9]
 800077a:	2b02      	cmp	r3, #2
 800077c:	d102      	bne.n	8000784 <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 800077e:	f7ff ffda 	bl	8000736 <RCC_GetPLLOutputClock>
 8000782:	60f8      	str	r0, [r7, #12]
	}

	// AHB Pre-scaler
	temp = (RCC->CFGR >> 4) & 0xF;
 8000784:	4b19      	ldr	r3, [pc, #100]	; (80007ec <RCC_GetPCLK1Value+0xa0>)
 8000786:	689b      	ldr	r3, [r3, #8]
 8000788:	091b      	lsrs	r3, r3, #4
 800078a:	b2db      	uxtb	r3, r3
 800078c:	f003 030f 	and.w	r3, r3, #15
 8000790:	723b      	strb	r3, [r7, #8]
	if(temp < 8){
 8000792:	7a3b      	ldrb	r3, [r7, #8]
 8000794:	2b07      	cmp	r3, #7
 8000796:	d802      	bhi.n	800079e <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 8000798:	2301      	movs	r3, #1
 800079a:	72fb      	strb	r3, [r7, #11]
 800079c:	e005      	b.n	80007aa <RCC_GetPCLK1Value+0x5e>
	}else{
		ahbp = AHB_PreScaler[temp-8];
 800079e:	7a3b      	ldrb	r3, [r7, #8]
 80007a0:	3b08      	subs	r3, #8
 80007a2:	4a15      	ldr	r2, [pc, #84]	; (80007f8 <RCC_GetPCLK1Value+0xac>)
 80007a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007a8:	72fb      	strb	r3, [r7, #11]
	}

	// APB1 Pre-scaler
	temp = (RCC->CFGR >> 10) & 0x7;
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <RCC_GetPCLK1Value+0xa0>)
 80007ac:	689b      	ldr	r3, [r3, #8]
 80007ae:	0a9b      	lsrs	r3, r3, #10
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	723b      	strb	r3, [r7, #8]
	if(temp < 8){
 80007b8:	7a3b      	ldrb	r3, [r7, #8]
 80007ba:	2b07      	cmp	r3, #7
 80007bc:	d802      	bhi.n	80007c4 <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 80007be:	2301      	movs	r3, #1
 80007c0:	72bb      	strb	r3, [r7, #10]
 80007c2:	e005      	b.n	80007d0 <RCC_GetPCLK1Value+0x84>
	}else{
		apb1p = APB1_PreScaler[temp-4];
 80007c4:	7a3b      	ldrb	r3, [r7, #8]
 80007c6:	3b04      	subs	r3, #4
 80007c8:	4a0c      	ldr	r2, [pc, #48]	; (80007fc <RCC_GetPCLK1Value+0xb0>)
 80007ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007ce:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1p;
 80007d0:	7afb      	ldrb	r3, [r7, #11]
 80007d2:	68fa      	ldr	r2, [r7, #12]
 80007d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80007d8:	7abb      	ldrb	r3, [r7, #10]
 80007da:	fbb2 f3f3 	udiv	r3, r2, r3
 80007de:	607b      	str	r3, [r7, #4]

	return pclk1;
 80007e0:	687b      	ldr	r3, [r7, #4]
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800
 80007f0:	00f42400 	.word	0x00f42400
 80007f4:	007a1200 	.word	0x007a1200
 80007f8:	20000000 	.word	0x20000000
 80007fc:	20000010 	.word	0x20000010

08000800 <RCC_GetPCLK2Value>:


uint32_t RCC_GetPCLK2Value(void){
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
	uint32_t pclk2, SystemClk;

	uint8_t clksrc, temp, ahbp, apb2p;
	clksrc = (RCC->CFGR >> 2) & 0x3;
 8000806:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <RCC_GetPCLK2Value+0xa0>)
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	089b      	lsrs	r3, r3, #2
 800080c:	b2db      	uxtb	r3, r3
 800080e:	f003 0303 	and.w	r3, r3, #3
 8000812:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0){
 8000814:	7a7b      	ldrb	r3, [r7, #9]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d102      	bne.n	8000820 <RCC_GetPCLK2Value+0x20>
		SystemClk = 16000000;
 800081a:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <RCC_GetPCLK2Value+0xa4>)
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	e00b      	b.n	8000838 <RCC_GetPCLK2Value+0x38>
	}else if(clksrc == 1){
 8000820:	7a7b      	ldrb	r3, [r7, #9]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d102      	bne.n	800082c <RCC_GetPCLK2Value+0x2c>
		SystemClk = 8000000;
 8000826:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <RCC_GetPCLK2Value+0xa8>)
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	e005      	b.n	8000838 <RCC_GetPCLK2Value+0x38>
	}else if(clksrc == 2){
 800082c:	7a7b      	ldrb	r3, [r7, #9]
 800082e:	2b02      	cmp	r3, #2
 8000830:	d102      	bne.n	8000838 <RCC_GetPCLK2Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 8000832:	f7ff ff80 	bl	8000736 <RCC_GetPLLOutputClock>
 8000836:	60f8      	str	r0, [r7, #12]
	}

	// AHB Pre-scaler
	temp = (RCC->CFGR >> 4) & 0xF;
 8000838:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <RCC_GetPCLK2Value+0xa0>)
 800083a:	689b      	ldr	r3, [r3, #8]
 800083c:	091b      	lsrs	r3, r3, #4
 800083e:	b2db      	uxtb	r3, r3
 8000840:	f003 030f 	and.w	r3, r3, #15
 8000844:	723b      	strb	r3, [r7, #8]
	if(temp < 0x08){
 8000846:	7a3b      	ldrb	r3, [r7, #8]
 8000848:	2b07      	cmp	r3, #7
 800084a:	d802      	bhi.n	8000852 <RCC_GetPCLK2Value+0x52>
		ahbp = 1;
 800084c:	2301      	movs	r3, #1
 800084e:	72fb      	strb	r3, [r7, #11]
 8000850:	e005      	b.n	800085e <RCC_GetPCLK2Value+0x5e>
	}else{
		ahbp = AHB_PreScaler[temp-8];
 8000852:	7a3b      	ldrb	r3, [r7, #8]
 8000854:	3b08      	subs	r3, #8
 8000856:	4a15      	ldr	r2, [pc, #84]	; (80008ac <RCC_GetPCLK2Value+0xac>)
 8000858:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800085c:	72fb      	strb	r3, [r7, #11]
	}

	// APB2 Pre-scaler
	temp = (RCC->CFGR >> 13) & 0x7;
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <RCC_GetPCLK2Value+0xa0>)
 8000860:	689b      	ldr	r3, [r3, #8]
 8000862:	0b5b      	lsrs	r3, r3, #13
 8000864:	b2db      	uxtb	r3, r3
 8000866:	f003 0307 	and.w	r3, r3, #7
 800086a:	723b      	strb	r3, [r7, #8]
	if(temp < 0x04){
 800086c:	7a3b      	ldrb	r3, [r7, #8]
 800086e:	2b03      	cmp	r3, #3
 8000870:	d802      	bhi.n	8000878 <RCC_GetPCLK2Value+0x78>
		apb2p = 1;
 8000872:	2301      	movs	r3, #1
 8000874:	72bb      	strb	r3, [r7, #10]
 8000876:	e005      	b.n	8000884 <RCC_GetPCLK2Value+0x84>
	}else{
		apb2p = APB2_PreScaler[temp-4];
 8000878:	7a3b      	ldrb	r3, [r7, #8]
 800087a:	3b04      	subs	r3, #4
 800087c:	4a0c      	ldr	r2, [pc, #48]	; (80008b0 <RCC_GetPCLK2Value+0xb0>)
 800087e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000882:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClk / ahbp) / apb2p;
 8000884:	7afb      	ldrb	r3, [r7, #11]
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	fbb2 f2f3 	udiv	r2, r2, r3
 800088c:	7abb      	ldrb	r3, [r7, #10]
 800088e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000892:	607b      	str	r3, [r7, #4]

	return pclk2;
 8000894:	687b      	ldr	r3, [r7, #4]
}
 8000896:	4618      	mov	r0, r3
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800
 80008a4:	00f42400 	.word	0x00f42400
 80008a8:	007a1200 	.word	0x007a1200
 80008ac:	20000000 	.word	0x20000000
 80008b0:	20000018 	.word	0x20000018

080008b4 <USART_PeriClockControl>:
#include "stm32f446xx_usart_driver.h"



// USART Peripheral Clock Control
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi){
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	460b      	mov	r3, r1
 80008be:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 80008c0:	78fb      	ldrb	r3, [r7, #3]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d12b      	bne.n	800091e <USART_PeriClockControl+0x6a>
		// Enable
		if(pUSARTx == USART1){
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4a2d      	ldr	r2, [pc, #180]	; (8000980 <USART_PeriClockControl+0xcc>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d106      	bne.n	80008dc <USART_PeriClockControl+0x28>
			USART1_PCLK_EN();
 80008ce:	4b2d      	ldr	r3, [pc, #180]	; (8000984 <USART_PeriClockControl+0xd0>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	4a2c      	ldr	r2, [pc, #176]	; (8000984 <USART_PeriClockControl+0xd0>)
 80008d4:	f043 0310 	orr.w	r3, r3, #16
 80008d8:	6453      	str	r3, [r2, #68]	; 0x44
			USART3_PCLK_DI();
		}else if(pUSARTx == USART6){
			USART6_PCLK_DI();
		}
	}
}
 80008da:	e04b      	b.n	8000974 <USART_PeriClockControl+0xc0>
		}else if(pUSARTx == USART2){
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a2a      	ldr	r2, [pc, #168]	; (8000988 <USART_PeriClockControl+0xd4>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d106      	bne.n	80008f2 <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 80008e4:	4b27      	ldr	r3, [pc, #156]	; (8000984 <USART_PeriClockControl+0xd0>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e8:	4a26      	ldr	r2, [pc, #152]	; (8000984 <USART_PeriClockControl+0xd0>)
 80008ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ee:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008f0:	e040      	b.n	8000974 <USART_PeriClockControl+0xc0>
		}else if(pUSARTx == USART3){
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4a25      	ldr	r2, [pc, #148]	; (800098c <USART_PeriClockControl+0xd8>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d106      	bne.n	8000908 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 80008fa:	4b22      	ldr	r3, [pc, #136]	; (8000984 <USART_PeriClockControl+0xd0>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	4a21      	ldr	r2, [pc, #132]	; (8000984 <USART_PeriClockControl+0xd0>)
 8000900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000904:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000906:	e035      	b.n	8000974 <USART_PeriClockControl+0xc0>
		}else if(pUSARTx == USART6){
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4a21      	ldr	r2, [pc, #132]	; (8000990 <USART_PeriClockControl+0xdc>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d131      	bne.n	8000974 <USART_PeriClockControl+0xc0>
			USART6_PCLK_EN();
 8000910:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <USART_PeriClockControl+0xd0>)
 8000912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000914:	4a1b      	ldr	r2, [pc, #108]	; (8000984 <USART_PeriClockControl+0xd0>)
 8000916:	f043 0320 	orr.w	r3, r3, #32
 800091a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800091c:	e02a      	b.n	8000974 <USART_PeriClockControl+0xc0>
		if(pUSARTx == USART1){
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4a17      	ldr	r2, [pc, #92]	; (8000980 <USART_PeriClockControl+0xcc>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d106      	bne.n	8000934 <USART_PeriClockControl+0x80>
			USART1_PCLK_DI();
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <USART_PeriClockControl+0xd0>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	4a16      	ldr	r2, [pc, #88]	; (8000984 <USART_PeriClockControl+0xd0>)
 800092c:	f023 0310 	bic.w	r3, r3, #16
 8000930:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000932:	e01f      	b.n	8000974 <USART_PeriClockControl+0xc0>
		}else if(pUSARTx == USART2){
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4a14      	ldr	r2, [pc, #80]	; (8000988 <USART_PeriClockControl+0xd4>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d106      	bne.n	800094a <USART_PeriClockControl+0x96>
			USART2_PCLK_DI();
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <USART_PeriClockControl+0xd0>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000940:	4a10      	ldr	r2, [pc, #64]	; (8000984 <USART_PeriClockControl+0xd0>)
 8000942:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000946:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000948:	e014      	b.n	8000974 <USART_PeriClockControl+0xc0>
		}else if(pUSARTx == USART3){
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a0f      	ldr	r2, [pc, #60]	; (800098c <USART_PeriClockControl+0xd8>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d106      	bne.n	8000960 <USART_PeriClockControl+0xac>
			USART3_PCLK_DI();
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <USART_PeriClockControl+0xd0>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	4a0b      	ldr	r2, [pc, #44]	; (8000984 <USART_PeriClockControl+0xd0>)
 8000958:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800095e:	e009      	b.n	8000974 <USART_PeriClockControl+0xc0>
		}else if(pUSARTx == USART6){
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4a0b      	ldr	r2, [pc, #44]	; (8000990 <USART_PeriClockControl+0xdc>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d105      	bne.n	8000974 <USART_PeriClockControl+0xc0>
			USART6_PCLK_DI();
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <USART_PeriClockControl+0xd0>)
 800096a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096c:	4a05      	ldr	r2, [pc, #20]	; (8000984 <USART_PeriClockControl+0xd0>)
 800096e:	f023 0320 	bic.w	r3, r3, #32
 8000972:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40011000 	.word	0x40011000
 8000984:	40023800 	.word	0x40023800
 8000988:	40004400 	.word	0x40004400
 800098c:	40004800 	.word	0x40004800
 8000990:	40011400 	.word	0x40011400

08000994 <USART_Init>:


// USART Initialization
void USART_Init(USART_Handle_t *pUSARTHandle){
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]


	//Temporary variable
	uint32_t tempreg=0;
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]

	/**** Configuration of CR1 ****/

	//Implement the code to enable the Clock for given USART peripheral
	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2101      	movs	r1, #1
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff ff84 	bl	80008b4 <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	791b      	ldrb	r3, [r3, #4]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d104      	bne.n	80009be <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f043 0304 	orr.w	r3, r3, #4
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	e010      	b.n	80009e0 <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	791b      	ldrb	r3, [r3, #4]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d104      	bne.n	80009d0 <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	f043 0308 	orr.w	r3, r3, #8
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	e007      	b.n	80009e0 <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	791b      	ldrb	r3, [r3, #4]
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	d103      	bne.n	80009e0 <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_TE) | ( 1 << USART_CR1_RE) );
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f043 030c 	orr.w	r3, r3, #12
 80009de:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	7b5b      	ldrb	r3, [r3, #13]
 80009e4:	031b      	lsls	r3, r3, #12
 80009e6:	461a      	mov	r2, r3
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	7b9b      	ldrb	r3, [r3, #14]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d104      	bne.n	8000a00 <USART_Init+0x6c>
	{
		//Implement the code to enable the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	e00b      	b.n	8000a18 <USART_Init+0x84>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	7b9b      	ldrb	r3, [r3, #14]
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d107      	bne.n	8000a18 <USART_Init+0x84>
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a0e:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a16:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	68fa      	ldr	r2, [r7, #12]
 8000a1e:	60da      	str	r2, [r3, #12]

	/**** Configuration of CR2 ****/

	tempreg=0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NumOfStopBits << USART_CR2_STOP;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	7b1b      	ldrb	r3, [r3, #12]
 8000a28:	031b      	lsls	r3, r3, #12
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	68fa      	ldr	r2, [r7, #12]
 8000a38:	611a      	str	r2, [r3, #16]

	/**** Configuration of CR3 ****/

	tempreg=0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	7bdb      	ldrb	r3, [r3, #15]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d104      	bne.n	8000a50 <USART_Init+0xbc>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	e010      	b.n	8000a72 <USART_Init+0xde>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	7bdb      	ldrb	r3, [r3, #15]
 8000a54:	2b02      	cmp	r3, #2
 8000a56:	d104      	bne.n	8000a62 <USART_Init+0xce>
	{
		//Implement the code to enable RTS flow control
		tempreg |= (1 << USART_CR3_RTSE);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	e007      	b.n	8000a72 <USART_Init+0xde>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	7bdb      	ldrb	r3, [r3, #15]
 8000a66:	2b03      	cmp	r3, #3
 8000a68:	d103      	bne.n	8000a72 <USART_Init+0xde>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ((1 << USART_CR3_CTSE) | (1 << USART_CR3_RTSE));
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000a70:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	615a      	str	r2, [r3, #20]

 /**** Configuration of BRR(Baud rate register) ****/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	4619      	mov	r1, r3
 8000a84:	4610      	mov	r0, r2
 8000a86:	f000 f805 	bl	8000a94 <USART_SetBaudRate>
}
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <USART_SetBaudRate>:
}


// USART Set Baud Rate
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

  uint32_t tempreg=0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1 || pUSARTx == USART6)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a30      	ldr	r2, [pc, #192]	; (8000b68 <USART_SetBaudRate+0xd4>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d003      	beq.n	8000ab2 <USART_SetBaudRate+0x1e>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a2f      	ldr	r2, [pc, #188]	; (8000b6c <USART_SetBaudRate+0xd8>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d103      	bne.n	8000aba <USART_SetBaudRate+0x26>
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 8000ab2:	f7ff fea5 	bl	8000800 <RCC_GetPCLK2Value>
 8000ab6:	61f8      	str	r0, [r7, #28]
 8000ab8:	e002      	b.n	8000ac0 <USART_SetBaudRate+0x2c>
  }else
  {
	   PCLKx = RCC_GetPCLK1Value();
 8000aba:	f7ff fe47 	bl	800074c <RCC_GetPCLK1Value>
 8000abe:	61f8      	str	r0, [r7, #28]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d00b      	beq.n	8000ae4 <USART_SetBaudRate+0x50>
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8000acc:	69fa      	ldr	r2, [r7, #28]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	4413      	add	r3, r2
 8000ad4:	009a      	lsls	r2, r3, #2
 8000ad6:	441a      	add	r2, r3
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae0:	61bb      	str	r3, [r7, #24]
 8000ae2:	e008      	b.n	8000af6 <USART_SetBaudRate+0x62>
  }else
  {
	   //over sampling by 16
	   usartdiv = ((100 * PCLKx) / (16 * BaudRate));
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	2264      	movs	r2, #100	; 0x64
 8000ae8:	fb03 f202 	mul.w	r2, r3, r2
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	011b      	lsls	r3, r3, #4
 8000af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af4:	61bb      	str	r3, [r7, #24]
  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	4a1d      	ldr	r2, [pc, #116]	; (8000b70 <USART_SetBaudRate+0xdc>)
 8000afa:	fba2 2303 	umull	r2, r3, r2, r3
 8000afe:	095b      	lsrs	r3, r3, #5
 8000b00:	60fb      	str	r3, [r7, #12]

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  tempreg |= M_part << 4;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	011b      	lsls	r3, r3, #4
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	2264      	movs	r2, #100	; 0x64
 8000b10:	fb02 f303 	mul.w	r3, r2, r3
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	617b      	str	r3, [r7, #20]

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	68db      	ldr	r3, [r3, #12]
 8000b1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d00a      	beq.n	8000b3c <USART_SetBaudRate+0xa8>
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	3332      	adds	r3, #50	; 0x32
 8000b2c:	4a10      	ldr	r2, [pc, #64]	; (8000b70 <USART_SetBaudRate+0xdc>)
 8000b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b32:	095b      	lsrs	r3, r3, #5
 8000b34:	f003 0307 	and.w	r3, r3, #7
 8000b38:	617b      	str	r3, [r7, #20]
 8000b3a:	e009      	b.n	8000b50 <USART_SetBaudRate+0xbc>

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	011b      	lsls	r3, r3, #4
 8000b40:	3332      	adds	r3, #50	; 0x32
 8000b42:	4a0b      	ldr	r2, [pc, #44]	; (8000b70 <USART_SetBaudRate+0xdc>)
 8000b44:	fba2 2303 	umull	r2, r3, r2, r3
 8000b48:	095b      	lsrs	r3, r3, #5
 8000b4a:	f003 030f 	and.w	r3, r3, #15
 8000b4e:	617b      	str	r3, [r7, #20]

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  tempreg |= F_part;
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]

  //copy the value of tempreg in to BRR register
  pUSARTx->BRR = tempreg;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	609a      	str	r2, [r3, #8]
}
 8000b5e:	bf00      	nop
 8000b60:	3720      	adds	r7, #32
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40011000 	.word	0x40011000
 8000b6c:	40011400 	.word	0x40011400
 8000b70:	51eb851f 	.word	0x51eb851f

08000b74 <USART_SendData>:


/*
 * Data Send and Receive
 */
void USART_SendData(USART_Handle_t *pUSARTHandle,uint8_t *pTxBuffer, uint32_t Len){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	e031      	b.n	8000bea <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TXE));
 8000b86:	bf00      	nop
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2180      	movs	r1, #128	; 0x80
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 f859 	bl	8000c46 <USART_GetFlagStatus>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d0f6      	beq.n	8000b88 <USART_SendData+0x14>

		 //Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	7b5b      	ldrb	r3, [r3, #13]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d118      	bne.n	8000bd4 <USART_SendData+0x60>
		{
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	461a      	mov	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000bb4:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	7b9b      	ldrb	r3, [r3, #14]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d106      	bne.n	8000bcc <USART_SendData+0x58>
			{
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	e00b      	b.n	8000be4 <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	e007      	b.n	8000be4 <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	781a      	ldrb	r2, [r3, #0]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	3301      	adds	r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	3301      	adds	r3, #1
 8000be8:	617b      	str	r3, [r7, #20]
 8000bea:	697a      	ldr	r2, [r7, #20]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d3c9      	bcc.n	8000b86 <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TC));
 8000bf2:	bf00      	nop
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2140      	movs	r1, #64	; 0x40
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 f823 	bl	8000c46 <USART_GetFlagStatus>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d0f6      	beq.n	8000bf4 <USART_SendData+0x80>
}
 8000c06:	bf00      	nop
 8000c08:	bf00      	nop
 8000c0a:	3718      	adds	r7, #24
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <USART_PeripheralControl>:


/*
 * Other Peripheral Control APIs
 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi){
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000c1c:	78fb      	ldrb	r3, [r7, #3]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d106      	bne.n	8000c30 <USART_PeripheralControl+0x20>
		// Enable
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	60da      	str	r2, [r3, #12]
	}else{
		// Disable
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
	}
}
 8000c2e:	e005      	b.n	8000c3c <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	60da      	str	r2, [r3, #12]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr

08000c46 <USART_GetFlagStatus>:


uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx , uint32_t FlagName){
 8000c46:	b480      	push	{r7}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
 8000c4e:	6039      	str	r1, [r7, #0]
	if(pUSARTx->SR & FlagName){
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	4013      	ands	r3, r2
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <USART_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e000      	b.n	8000c62 <USART_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <delay>:
// Receive Buffer
//uint8_t msg[] = "015_UART_TX Testing\n\r";
char msg[1024] = "015_UART_TX Testing\n\r";


void delay(void){
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<500000/2; i++){
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	e002      	b.n	8000c7e <delay+0x12>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <delay+0x28>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d9f8      	bls.n	8000c78 <delay+0xc>

	}
}
 8000c86:	bf00      	nop
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	0003d08f 	.word	0x0003d08f

08000c98 <USART6_GPIOInits>:

void USART6_GPIOInits(void){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	; 0x28
 8000c9c:	af00      	add	r7, sp, #0

	GPIO_Handle_t USARTPins;

	// Common Settings between Pins
	USARTPins.pGPIOx = GPIOC;
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <USART6_GPIOInits+0x64>)
 8000ca0:	61fb      	str	r3, [r7, #28]
	USARTPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFUN;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	USARTPins.GPIO_PinConfig.GPIO_PinAltFunMode = 8;
 8000ca8:	2308      	movs	r3, #8
 8000caa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	USARTPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
//	USARTPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
	USARTPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	USARTPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22


	// TX  -->  PC6
	GPIO_Handle_t USART_TX_Pin = USARTPins;
 8000cc0:	f107 0310 	add.w	r3, r7, #16
 8000cc4:	f107 021c 	add.w	r2, r7, #28
 8000cc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	USART_TX_Pin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000cce:	2306      	movs	r3, #6
 8000cd0:	753b      	strb	r3, [r7, #20]
	GPIO_Init(&USART_TX_Pin);
 8000cd2:	f107 0310 	add.w	r3, r7, #16
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fb6c 	bl	80003b4 <GPIO_Init>

	// RX  -->  PC7
	GPIO_Handle_t USART_RX_Pin = USARTPins;
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	f107 021c 	add.w	r2, r7, #28
 8000ce2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ce4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	USART_RX_Pin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000ce8:	2307      	movs	r3, #7
 8000cea:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USART_RX_Pin);
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fb60 	bl	80003b4 <GPIO_Init>
//	// CTS -->  PA0
//	GPIO_Handle_t USART_CTS_Pin = USARTPins;
//	USART_CTS_Pin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
//	GPIO_Init(&USART_CTS_Pin);

}
 8000cf4:	bf00      	nop
 8000cf6:	3728      	adds	r7, #40	; 0x28
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40020800 	.word	0x40020800

08000d00 <USART6_Inits>:


void USART6_Inits(void){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0

	usart6_handle.pUSARTx = USART6;
 8000d04:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <USART6_Inits+0x3c>)
 8000d06:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <USART6_Inits+0x40>)
 8000d08:	601a      	str	r2, [r3, #0]
	usart6_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <USART6_Inits+0x3c>)
 8000d0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d10:	609a      	str	r2, [r3, #8]
	usart6_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000d12:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <USART6_Inits+0x3c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	73da      	strb	r2, [r3, #15]
	usart6_handle.USART_Config.USART_Mode = USART_MODE_ONLY_TX;
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <USART6_Inits+0x3c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	711a      	strb	r2, [r3, #4]
	usart6_handle.USART_Config.USART_NumOfStopBits = USART_STOPBITS_1;
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <USART6_Inits+0x3c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	731a      	strb	r2, [r3, #12]
	usart6_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <USART6_Inits+0x3c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	739a      	strb	r2, [r3, #14]
	usart6_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000d2a:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <USART6_Inits+0x3c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	735a      	strb	r2, [r3, #13]


	USART_Init(&usart6_handle);
 8000d30:	4802      	ldr	r0, [pc, #8]	; (8000d3c <USART6_Inits+0x3c>)
 8000d32:	f7ff fe2f 	bl	8000994 <USART_Init>

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	2000043c 	.word	0x2000043c
 8000d40:	40011400 	.word	0x40011400

08000d44 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioButton;
	// Configure the Button
	GpioButton.pGPIOx = GPIOC;
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <GPIO_ButtonInit+0x2c>)
 8000d4c:	607b      	str	r3, [r7, #4]
	GpioButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000d4e:	230d      	movs	r3, #13
 8000d50:	723b      	strb	r3, [r7, #8]
	GpioButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 8000d52:	2300      	movs	r3, #0
 8000d54:	727b      	strb	r3, [r7, #9]
	GpioButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000d56:	2300      	movs	r3, #0
 8000d58:	72fb      	strb	r3, [r7, #11]
	GpioButton.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(&GpioButton);
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fb27 	bl	80003b4 <GPIO_Init>
}
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40020800 	.word	0x40020800

08000d74 <main>:



int main(void){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0


	// GPIO Button
	GPIO_ButtonInit();
 8000d78:	f7ff ffe4 	bl	8000d44 <GPIO_ButtonInit>

	// Initialize the GPIO pins
	USART6_GPIOInits();
 8000d7c:	f7ff ff8c 	bl	8000c98 <USART6_GPIOInits>

	// Initialize the USART2 Peripheral
	USART6_Inits();
 8000d80:	f7ff ffbe 	bl	8000d00 <USART6_Inits>

	// Enable the USART6 Peripheral
	USART_PeripheralControl(USART6, ENABLE);
 8000d84:	2101      	movs	r1, #1
 8000d86:	480b      	ldr	r0, [pc, #44]	; (8000db4 <main+0x40>)
 8000d88:	f7ff ff42 	bl	8000c10 <USART_PeripheralControl>


	while(1){
		// Wait for button press
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) != BUTTON_PRESSED);
 8000d8c:	bf00      	nop
 8000d8e:	210d      	movs	r1, #13
 8000d90:	4809      	ldr	r0, [pc, #36]	; (8000db8 <main+0x44>)
 8000d92:	f7ff fcbb 	bl	800070c <GPIO_ReadFromInputPin>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d1f8      	bne.n	8000d8e <main+0x1a>
		// For the De-bouncing of the Button
		delay();
 8000d9c:	f7ff ff66 	bl	8000c6c <delay>

		// Send data
		USART_SendData(&usart6_handle, (uint8_t*)msg, strlen(msg));
 8000da0:	4806      	ldr	r0, [pc, #24]	; (8000dbc <main+0x48>)
 8000da2:	f7ff fa2f 	bl	8000204 <strlen>
 8000da6:	4603      	mov	r3, r0
 8000da8:	461a      	mov	r2, r3
 8000daa:	4904      	ldr	r1, [pc, #16]	; (8000dbc <main+0x48>)
 8000dac:	4804      	ldr	r0, [pc, #16]	; (8000dc0 <main+0x4c>)
 8000dae:	f7ff fee1 	bl	8000b74 <USART_SendData>
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) != BUTTON_PRESSED);
 8000db2:	e7eb      	b.n	8000d8c <main+0x18>
 8000db4:	40011400 	.word	0x40011400
 8000db8:	40020800 	.word	0x40020800
 8000dbc:	20000020 	.word	0x20000020
 8000dc0:	2000043c 	.word	0x2000043c

08000dc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dc4:	480d      	ldr	r0, [pc, #52]	; (8000dfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dc6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dc8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dcc:	480c      	ldr	r0, [pc, #48]	; (8000e00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dce:	490d      	ldr	r1, [pc, #52]	; (8000e04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	; (8000e08 <LoopForever+0xe>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd4:	e002      	b.n	8000ddc <LoopCopyDataInit>

08000dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dda:	3304      	adds	r3, #4

08000ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de0:	d3f9      	bcc.n	8000dd6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000de4:	4c0a      	ldr	r4, [pc, #40]	; (8000e10 <LoopForever+0x16>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de8:	e001      	b.n	8000dee <LoopFillZerobss>

08000dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dec:	3204      	adds	r2, #4

08000dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df0:	d3fb      	bcc.n	8000dea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000df2:	f000 f811 	bl	8000e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000df6:	f7ff ffbd 	bl	8000d74 <main>

08000dfa <LoopForever>:

LoopForever:
  b LoopForever
 8000dfa:	e7fe      	b.n	8000dfa <LoopForever>
  ldr   r0, =_estack
 8000dfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e04:	20000420 	.word	0x20000420
  ldr r2, =_sidata
 8000e08:	08000e80 	.word	0x08000e80
  ldr r2, =_sbss
 8000e0c:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 8000e10:	20000460 	.word	0x20000460

08000e14 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC_IRQHandler>
	...

08000e18 <__libc_init_array>:
 8000e18:	b570      	push	{r4, r5, r6, lr}
 8000e1a:	4d0d      	ldr	r5, [pc, #52]	; (8000e50 <__libc_init_array+0x38>)
 8000e1c:	4c0d      	ldr	r4, [pc, #52]	; (8000e54 <__libc_init_array+0x3c>)
 8000e1e:	1b64      	subs	r4, r4, r5
 8000e20:	10a4      	asrs	r4, r4, #2
 8000e22:	2600      	movs	r6, #0
 8000e24:	42a6      	cmp	r6, r4
 8000e26:	d109      	bne.n	8000e3c <__libc_init_array+0x24>
 8000e28:	4d0b      	ldr	r5, [pc, #44]	; (8000e58 <__libc_init_array+0x40>)
 8000e2a:	4c0c      	ldr	r4, [pc, #48]	; (8000e5c <__libc_init_array+0x44>)
 8000e2c:	f000 f818 	bl	8000e60 <_init>
 8000e30:	1b64      	subs	r4, r4, r5
 8000e32:	10a4      	asrs	r4, r4, #2
 8000e34:	2600      	movs	r6, #0
 8000e36:	42a6      	cmp	r6, r4
 8000e38:	d105      	bne.n	8000e46 <__libc_init_array+0x2e>
 8000e3a:	bd70      	pop	{r4, r5, r6, pc}
 8000e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e40:	4798      	blx	r3
 8000e42:	3601      	adds	r6, #1
 8000e44:	e7ee      	b.n	8000e24 <__libc_init_array+0xc>
 8000e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e4a:	4798      	blx	r3
 8000e4c:	3601      	adds	r6, #1
 8000e4e:	e7f2      	b.n	8000e36 <__libc_init_array+0x1e>
 8000e50:	08000e78 	.word	0x08000e78
 8000e54:	08000e78 	.word	0x08000e78
 8000e58:	08000e78 	.word	0x08000e78
 8000e5c:	08000e7c 	.word	0x08000e7c

08000e60 <_init>:
 8000e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e62:	bf00      	nop
 8000e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e66:	bc08      	pop	{r3}
 8000e68:	469e      	mov	lr, r3
 8000e6a:	4770      	bx	lr

08000e6c <_fini>:
 8000e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e6e:	bf00      	nop
 8000e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e72:	bc08      	pop	{r3}
 8000e74:	469e      	mov	lr, r3
 8000e76:	4770      	bx	lr


008_stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000db8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08000f7c  08000f7c  00010f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fa8  08000fa8  00010fb0  2**0
                  CONTENTS
  4 .ARM          00000000  08000fa8  08000fa8  00010fb0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fa8  08000fb0  00010fb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fa8  08000fa8  00010fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fac  08000fac  00010fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010fb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000fb0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000fb0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010fb0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010fda  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001370  00000000  00000000  0001101d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000439  00000000  00000000  0001238d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000158  00000000  00000000  000127c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f7  00000000  00000000  00012920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000021f2  00000000  00000000  00012a17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000178a  00000000  00000000  00014c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000094c7  00000000  00000000  00016393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000004c8  00000000  00000000  0001f85c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0001fd24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000f64 	.word	0x08000f64

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000f64 	.word	0x08000f64

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <GPIO_PeriClockControl>:
 * @return            -  void
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi){
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	460b      	mov	r3, r1
 800021e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){ // Enable
 8000220:	78fb      	ldrb	r3, [r7, #3]
 8000222:	2b01      	cmp	r3, #1
 8000224:	d157      	bne.n	80002d6 <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA){
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a59      	ldr	r2, [pc, #356]	; (8000390 <GPIO_PeriClockControl+0x17c>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800022e:	4b59      	ldr	r3, [pc, #356]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000232:	4a58      	ldr	r2, [pc, #352]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000234:	f043 0301 	orr.w	r3, r3, #1
 8000238:	6313      	str	r3, [r2, #48]	; 0x30
		}else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}

}
 800023a:	e0a3      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB){
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a56      	ldr	r2, [pc, #344]	; (8000398 <GPIO_PeriClockControl+0x184>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000244:	4b53      	ldr	r3, [pc, #332]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a52      	ldr	r2, [pc, #328]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800024a:	f043 0302 	orr.w	r3, r3, #2
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000250:	e098      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC){
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a51      	ldr	r2, [pc, #324]	; (800039c <GPIO_PeriClockControl+0x188>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800025a:	4b4e      	ldr	r3, [pc, #312]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025e:	4a4d      	ldr	r2, [pc, #308]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000260:	f043 0304 	orr.w	r3, r3, #4
 8000264:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000266:	e08d      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOD){
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a4d      	ldr	r2, [pc, #308]	; (80003a0 <GPIO_PeriClockControl+0x18c>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d106      	bne.n	800027e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000270:	4b48      	ldr	r3, [pc, #288]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000274:	4a47      	ldr	r2, [pc, #284]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000276:	f043 0308 	orr.w	r3, r3, #8
 800027a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800027c:	e082      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE){
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a48      	ldr	r2, [pc, #288]	; (80003a4 <GPIO_PeriClockControl+0x190>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000286:	4b43      	ldr	r3, [pc, #268]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028a:	4a42      	ldr	r2, [pc, #264]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800028c:	f043 0310 	orr.w	r3, r3, #16
 8000290:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000292:	e077      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF){
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a44      	ldr	r2, [pc, #272]	; (80003a8 <GPIO_PeriClockControl+0x194>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d106      	bne.n	80002aa <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800029c:	4b3d      	ldr	r3, [pc, #244]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a3c      	ldr	r2, [pc, #240]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002a2:	f043 0320 	orr.w	r3, r3, #32
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a8:	e06c      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOG){
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a3f      	ldr	r2, [pc, #252]	; (80003ac <GPIO_PeriClockControl+0x198>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d106      	bne.n	80002c0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80002b2:	4b38      	ldr	r3, [pc, #224]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	4a37      	ldr	r2, [pc, #220]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002be:	e061      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOH){
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a3b      	ldr	r2, [pc, #236]	; (80003b0 <GPIO_PeriClockControl+0x19c>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d15d      	bne.n	8000384 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 80002c8:	4b32      	ldr	r3, [pc, #200]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002cc:	4a31      	ldr	r2, [pc, #196]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002d4:	e056      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA){
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a2d      	ldr	r2, [pc, #180]	; (8000390 <GPIO_PeriClockControl+0x17c>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d106      	bne.n	80002ec <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 80002de:	4b2d      	ldr	r3, [pc, #180]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e2:	4a2c      	ldr	r2, [pc, #176]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002e4:	f023 0301 	bic.w	r3, r3, #1
 80002e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ea:	e04b      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB){
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a2a      	ldr	r2, [pc, #168]	; (8000398 <GPIO_PeriClockControl+0x184>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d106      	bne.n	8000302 <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 80002f4:	4b27      	ldr	r3, [pc, #156]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f8:	4a26      	ldr	r2, [pc, #152]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002fa:	f023 0302 	bic.w	r3, r3, #2
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000300:	e040      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC){
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a25      	ldr	r2, [pc, #148]	; (800039c <GPIO_PeriClockControl+0x188>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d106      	bne.n	8000318 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 800030a:	4b22      	ldr	r3, [pc, #136]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800030c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030e:	4a21      	ldr	r2, [pc, #132]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000310:	f023 0304 	bic.w	r3, r3, #4
 8000314:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000316:	e035      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOD){
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a21      	ldr	r2, [pc, #132]	; (80003a0 <GPIO_PeriClockControl+0x18c>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d106      	bne.n	800032e <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 8000320:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000324:	4a1b      	ldr	r2, [pc, #108]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000326:	f023 0308 	bic.w	r3, r3, #8
 800032a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800032c:	e02a      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE){
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a1c      	ldr	r2, [pc, #112]	; (80003a4 <GPIO_PeriClockControl+0x190>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d106      	bne.n	8000344 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 8000336:	4b17      	ldr	r3, [pc, #92]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033a:	4a16      	ldr	r2, [pc, #88]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800033c:	f023 0310 	bic.w	r3, r3, #16
 8000340:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000342:	e01f      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF){
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a18      	ldr	r2, [pc, #96]	; (80003a8 <GPIO_PeriClockControl+0x194>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d106      	bne.n	800035a <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000350:	4a10      	ldr	r2, [pc, #64]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000352:	f023 0320 	bic.w	r3, r3, #32
 8000356:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000358:	e014      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOG){
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a13      	ldr	r2, [pc, #76]	; (80003ac <GPIO_PeriClockControl+0x198>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d106      	bne.n	8000370 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8000362:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000366:	4a0b      	ldr	r2, [pc, #44]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000368:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800036c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036e:	e009      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOH){
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a0f      	ldr	r2, [pc, #60]	; (80003b0 <GPIO_PeriClockControl+0x19c>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d105      	bne.n	8000384 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037c:	4a05      	ldr	r2, [pc, #20]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800037e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000382:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	bc80      	pop	{r7}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40020000 	.word	0x40020000
 8000394:	40023800 	.word	0x40023800
 8000398:	40020400 	.word	0x40020400
 800039c:	40020800 	.word	0x40020800
 80003a0:	40020c00 	.word	0x40020c00
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40021400 	.word	0x40021400
 80003ac:	40021800 	.word	0x40021800
 80003b0:	40021c00 	.word	0x40021c00

080003b4 <GPIO_Init>:


/*
 * Initialize and De-Initialize
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]

	// Enable Peripheral Clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2101      	movs	r1, #1
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff ff26 	bl	8000214 <GPIO_PeriClockControl>

	uint32_t temp = 0; // Temporary Register
 80003c8:	2300      	movs	r3, #0
 80003ca:	60fb      	str	r3, [r7, #12]

	// 1. Configure Mode of GPIO Pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	795b      	ldrb	r3, [r3, #5]
 80003d0:	2b03      	cmp	r3, #3
 80003d2:	d821      	bhi.n	8000418 <GPIO_Init+0x64>
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	795b      	ldrb	r3, [r3, #5]
 80003d8:	461a      	mov	r2, r3
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	791b      	ldrb	r3, [r3, #4]
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	fa02 f303 	lsl.w	r3, r2, r3
 80003e4:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	791b      	ldrb	r3, [r3, #4]
 80003f0:	4619      	mov	r1, r3
 80003f2:	2303      	movs	r3, #3
 80003f4:	408b      	lsls	r3, r1
 80003f6:	43db      	mvns	r3, r3
 80003f8:	4619      	mov	r1, r3
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	400a      	ands	r2, r1
 8000400:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // Set
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	6819      	ldr	r1, [r3, #0]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	68fa      	ldr	r2, [r7, #12]
 800040e:	430a      	orrs	r2, r1
 8000410:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	e0b8      	b.n	800058a <GPIO_Init+0x1d6>
	}else{
		// TODO: Interrupt Mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	795b      	ldrb	r3, [r3, #5]
 800041c:	2b04      	cmp	r3, #4
 800041e:	d117      	bne.n	8000450 <GPIO_Init+0x9c>
			// Configure the Falling Trigger Selection Register
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000420:	4b43      	ldr	r3, [pc, #268]	; (8000530 <GPIO_Init+0x17c>)
 8000422:	68db      	ldr	r3, [r3, #12]
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	7912      	ldrb	r2, [r2, #4]
 8000428:	4611      	mov	r1, r2
 800042a:	2201      	movs	r2, #1
 800042c:	408a      	lsls	r2, r1
 800042e:	4611      	mov	r1, r2
 8000430:	4a3f      	ldr	r2, [pc, #252]	; (8000530 <GPIO_Init+0x17c>)
 8000432:	430b      	orrs	r3, r1
 8000434:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear RTSR
 8000436:	4b3e      	ldr	r3, [pc, #248]	; (8000530 <GPIO_Init+0x17c>)
 8000438:	689b      	ldr	r3, [r3, #8]
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	7912      	ldrb	r2, [r2, #4]
 800043e:	4611      	mov	r1, r2
 8000440:	2201      	movs	r2, #1
 8000442:	408a      	lsls	r2, r1
 8000444:	43d2      	mvns	r2, r2
 8000446:	4611      	mov	r1, r2
 8000448:	4a39      	ldr	r2, [pc, #228]	; (8000530 <GPIO_Init+0x17c>)
 800044a:	400b      	ands	r3, r1
 800044c:	6093      	str	r3, [r2, #8]
 800044e:	e035      	b.n	80004bc <GPIO_Init+0x108>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	795b      	ldrb	r3, [r3, #5]
 8000454:	2b05      	cmp	r3, #5
 8000456:	d117      	bne.n	8000488 <GPIO_Init+0xd4>
			// Configure the Rising Trigger Selection Register
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000458:	4b35      	ldr	r3, [pc, #212]	; (8000530 <GPIO_Init+0x17c>)
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	687a      	ldr	r2, [r7, #4]
 800045e:	7912      	ldrb	r2, [r2, #4]
 8000460:	4611      	mov	r1, r2
 8000462:	2201      	movs	r2, #1
 8000464:	408a      	lsls	r2, r1
 8000466:	4611      	mov	r1, r2
 8000468:	4a31      	ldr	r2, [pc, #196]	; (8000530 <GPIO_Init+0x17c>)
 800046a:	430b      	orrs	r3, r1
 800046c:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear FTSR
 800046e:	4b30      	ldr	r3, [pc, #192]	; (8000530 <GPIO_Init+0x17c>)
 8000470:	68db      	ldr	r3, [r3, #12]
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	7912      	ldrb	r2, [r2, #4]
 8000476:	4611      	mov	r1, r2
 8000478:	2201      	movs	r2, #1
 800047a:	408a      	lsls	r2, r1
 800047c:	43d2      	mvns	r2, r2
 800047e:	4611      	mov	r1, r2
 8000480:	4a2b      	ldr	r2, [pc, #172]	; (8000530 <GPIO_Init+0x17c>)
 8000482:	400b      	ands	r3, r1
 8000484:	60d3      	str	r3, [r2, #12]
 8000486:	e019      	b.n	80004bc <GPIO_Init+0x108>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	795b      	ldrb	r3, [r3, #5]
 800048c:	2b06      	cmp	r3, #6
 800048e:	d115      	bne.n	80004bc <GPIO_Init+0x108>
			// Configure Both Falling and Rising
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000490:	4b27      	ldr	r3, [pc, #156]	; (8000530 <GPIO_Init+0x17c>)
 8000492:	68db      	ldr	r3, [r3, #12]
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	7912      	ldrb	r2, [r2, #4]
 8000498:	4611      	mov	r1, r2
 800049a:	2201      	movs	r2, #1
 800049c:	408a      	lsls	r2, r1
 800049e:	4611      	mov	r1, r2
 80004a0:	4a23      	ldr	r2, [pc, #140]	; (8000530 <GPIO_Init+0x17c>)
 80004a2:	430b      	orrs	r3, r1
 80004a4:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a6:	4b22      	ldr	r3, [pc, #136]	; (8000530 <GPIO_Init+0x17c>)
 80004a8:	689b      	ldr	r3, [r3, #8]
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	7912      	ldrb	r2, [r2, #4]
 80004ae:	4611      	mov	r1, r2
 80004b0:	2201      	movs	r2, #1
 80004b2:	408a      	lsls	r2, r1
 80004b4:	4611      	mov	r1, r2
 80004b6:	4a1e      	ldr	r2, [pc, #120]	; (8000530 <GPIO_Init+0x17c>)
 80004b8:	430b      	orrs	r3, r1
 80004ba:	6093      	str	r3, [r2, #8]
		}

		// Configure the GPIO port Selection in SYSCFG_EXTICR
		uint8_t ExtiCR_Number = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	791b      	ldrb	r3, [r3, #4]
 80004c0:	089b      	lsrs	r3, r3, #2
 80004c2:	72fb      	strb	r3, [r7, #11]
		uint8_t ExtiCR_ShiftOffset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	791b      	ldrb	r3, [r3, #4]
 80004c8:	f003 0303 	and.w	r3, r3, #3
 80004cc:	72bb      	strb	r3, [r7, #10]
		uint8_t portcode = GPIO_BASEADDR_TO_PORTCODE(pGPIOHandle->pGPIOx);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a18      	ldr	r2, [pc, #96]	; (8000534 <GPIO_Init+0x180>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d03b      	beq.n	8000550 <GPIO_Init+0x19c>
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a16      	ldr	r2, [pc, #88]	; (8000538 <GPIO_Init+0x184>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d024      	beq.n	800052c <GPIO_Init+0x178>
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a15      	ldr	r2, [pc, #84]	; (800053c <GPIO_Init+0x188>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d01d      	beq.n	8000528 <GPIO_Init+0x174>
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a13      	ldr	r2, [pc, #76]	; (8000540 <GPIO_Init+0x18c>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d016      	beq.n	8000524 <GPIO_Init+0x170>
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a12      	ldr	r2, [pc, #72]	; (8000544 <GPIO_Init+0x190>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d00f      	beq.n	8000520 <GPIO_Init+0x16c>
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a10      	ldr	r2, [pc, #64]	; (8000548 <GPIO_Init+0x194>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d008      	beq.n	800051c <GPIO_Init+0x168>
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a0f      	ldr	r2, [pc, #60]	; (800054c <GPIO_Init+0x198>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d101      	bne.n	8000518 <GPIO_Init+0x164>
 8000514:	2306      	movs	r3, #6
 8000516:	e01c      	b.n	8000552 <GPIO_Init+0x19e>
 8000518:	2300      	movs	r3, #0
 800051a:	e01a      	b.n	8000552 <GPIO_Init+0x19e>
 800051c:	2305      	movs	r3, #5
 800051e:	e018      	b.n	8000552 <GPIO_Init+0x19e>
 8000520:	2304      	movs	r3, #4
 8000522:	e016      	b.n	8000552 <GPIO_Init+0x19e>
 8000524:	2303      	movs	r3, #3
 8000526:	e014      	b.n	8000552 <GPIO_Init+0x19e>
 8000528:	2302      	movs	r3, #2
 800052a:	e012      	b.n	8000552 <GPIO_Init+0x19e>
 800052c:	2301      	movs	r3, #1
 800052e:	e010      	b.n	8000552 <GPIO_Init+0x19e>
 8000530:	40013c00 	.word	0x40013c00
 8000534:	40020000 	.word	0x40020000
 8000538:	40020400 	.word	0x40020400
 800053c:	40020800 	.word	0x40020800
 8000540:	40020c00 	.word	0x40020c00
 8000544:	40021000 	.word	0x40021000
 8000548:	40021400 	.word	0x40021400
 800054c:	40021800 	.word	0x40021800
 8000550:	2300      	movs	r3, #0
 8000552:	727b      	strb	r3, [r7, #9]
		SYSCFG_PCLK_EN();
 8000554:	4b6a      	ldr	r3, [pc, #424]	; (8000700 <GPIO_Init+0x34c>)
 8000556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000558:	4a69      	ldr	r2, [pc, #420]	; (8000700 <GPIO_Init+0x34c>)
 800055a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[ExtiCR_Number] = portcode << (ExtiCR_ShiftOffset * 4);
 8000560:	7a7a      	ldrb	r2, [r7, #9]
 8000562:	7abb      	ldrb	r3, [r7, #10]
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	fa02 f103 	lsl.w	r1, r2, r3
 800056a:	4a66      	ldr	r2, [pc, #408]	; (8000704 <GPIO_Init+0x350>)
 800056c:	7afb      	ldrb	r3, [r7, #11]
 800056e:	3302      	adds	r3, #2
 8000570:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000574:	4b64      	ldr	r3, [pc, #400]	; (8000708 <GPIO_Init+0x354>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	7912      	ldrb	r2, [r2, #4]
 800057c:	4611      	mov	r1, r2
 800057e:	2201      	movs	r2, #1
 8000580:	408a      	lsls	r2, r1
 8000582:	4611      	mov	r1, r2
 8000584:	4a60      	ldr	r2, [pc, #384]	; (8000708 <GPIO_Init+0x354>)
 8000586:	430b      	orrs	r3, r1
 8000588:	6013      	str	r3, [r2, #0]
	}

	// 2. Configure Speed
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	799b      	ldrb	r3, [r3, #6]
 800058e:	461a      	mov	r2, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	791b      	ldrb	r3, [r3, #4]
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	fa02 f303 	lsl.w	r3, r2, r3
 800059a:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	689a      	ldr	r2, [r3, #8]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	791b      	ldrb	r3, [r3, #4]
 80005a6:	4619      	mov	r1, r3
 80005a8:	2303      	movs	r3, #3
 80005aa:	408b      	lsls	r3, r1
 80005ac:	43db      	mvns	r3, r3
 80005ae:	4619      	mov	r1, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	400a      	ands	r2, r1
 80005b6:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	6899      	ldr	r1, [r3, #8]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	68fa      	ldr	r2, [r7, #12]
 80005c4:	430a      	orrs	r2, r1
 80005c6:	609a      	str	r2, [r3, #8]
	temp = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]

	// 3. Configure Pull-up Pull-down Settings
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	79db      	ldrb	r3, [r3, #7]
 80005d0:	461a      	mov	r2, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	791b      	ldrb	r3, [r3, #4]
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	fa02 f303 	lsl.w	r3, r2, r3
 80005dc:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	68da      	ldr	r2, [r3, #12]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	791b      	ldrb	r3, [r3, #4]
 80005e8:	4619      	mov	r1, r3
 80005ea:	2303      	movs	r3, #3
 80005ec:	408b      	lsls	r3, r1
 80005ee:	43db      	mvns	r3, r3
 80005f0:	4619      	mov	r1, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	400a      	ands	r2, r1
 80005f8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	68d9      	ldr	r1, [r3, #12]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	68fa      	ldr	r2, [r7, #12]
 8000606:	430a      	orrs	r2, r1
 8000608:	60da      	str	r2, [r3, #12]
	temp = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]

	// 4. Configure the Output Type
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	7a1b      	ldrb	r3, [r3, #8]
 8000612:	461a      	mov	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	791b      	ldrb	r3, [r3, #4]
 8000618:	fa02 f303 	lsl.w	r3, r2, r3
 800061c:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	685a      	ldr	r2, [r3, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	791b      	ldrb	r3, [r3, #4]
 8000628:	4619      	mov	r1, r3
 800062a:	2301      	movs	r3, #1
 800062c:	408b      	lsls	r3, r1
 800062e:	43db      	mvns	r3, r3
 8000630:	4619      	mov	r1, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	400a      	ands	r2, r1
 8000638:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	6859      	ldr	r1, [r3, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	68fa      	ldr	r2, [r7, #12]
 8000646:	430a      	orrs	r2, r1
 8000648:	605a      	str	r2, [r3, #4]
	temp = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]

	// 5. Configure Alternate Functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFUN){
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	795b      	ldrb	r3, [r3, #5]
 8000652:	2b02      	cmp	r3, #2
 8000654:	d150      	bne.n	80006f8 <GPIO_Init+0x344>
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= GPIO_PIN_NO_7){
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	791b      	ldrb	r3, [r3, #4]
 800065a:	2b07      	cmp	r3, #7
 800065c:	d826      	bhi.n	80006ac <GPIO_Init+0x2f8>
				// AFRL Registers
				temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	7a5b      	ldrb	r3, [r3, #9]
 8000662:	461a      	mov	r2, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	791b      	ldrb	r3, [r3, #4]
 8000668:	f003 0307 	and.w	r3, r3, #7
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	fa02 f303 	lsl.w	r3, r2, r3
 8000672:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->AFRL &= ~(0xF << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8))); // Clear
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	6a1a      	ldr	r2, [r3, #32]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	791b      	ldrb	r3, [r3, #4]
 800067e:	f003 0307 	and.w	r3, r3, #7
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	210f      	movs	r1, #15
 8000686:	fa01 f303 	lsl.w	r3, r1, r3
 800068a:	43db      	mvns	r3, r3
 800068c:	4619      	mov	r1, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	400a      	ands	r2, r1
 8000694:	621a      	str	r2, [r3, #32]
				pGPIOHandle->pGPIOx->AFRL |= temp;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	6a19      	ldr	r1, [r3, #32]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	430a      	orrs	r2, r1
 80006a4:	621a      	str	r2, [r3, #32]
				temp = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->AFRH |= temp;
				temp = 0;
			}
	}

}
 80006aa:	e025      	b.n	80006f8 <GPIO_Init+0x344>
				temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	7a5b      	ldrb	r3, [r3, #9]
 80006b0:	461a      	mov	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	791b      	ldrb	r3, [r3, #4]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	fa02 f303 	lsl.w	r3, r2, r3
 80006c0:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->AFRH &= ~(0xF << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8))); // Clear
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	791b      	ldrb	r3, [r3, #4]
 80006cc:	f003 0307 	and.w	r3, r3, #7
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	210f      	movs	r1, #15
 80006d4:	fa01 f303 	lsl.w	r3, r1, r3
 80006d8:	43db      	mvns	r3, r3
 80006da:	4619      	mov	r1, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	400a      	ands	r2, r1
 80006e2:	625a      	str	r2, [r3, #36]	; 0x24
				pGPIOHandle->pGPIOx->AFRH |= temp;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	68fa      	ldr	r2, [r7, #12]
 80006f0:	430a      	orrs	r2, r1
 80006f2:	625a      	str	r2, [r3, #36]	; 0x24
				temp = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
}
 80006f8:	bf00      	nop
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40013800 	.word	0x40013800
 8000708:	40013c00 	.word	0x40013c00

0800070c <GPIO_ReadFromInputPin>:


/*
 * Data Read and Write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	691a      	ldr	r2, [r3, #16]
 800071c:	78fb      	ldrb	r3, [r7, #3]
 800071e:	fa22 f303 	lsr.w	r3, r2, r3
 8000722:	b2db      	uxtb	r3, r3
 8000724:	f003 0301 	and.w	r3, r3, #1
 8000728:	73fb      	strb	r3, [r7, #15]
	return value;
 800072a:	7bfb      	ldrb	r3, [r7, #15]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3714      	adds	r7, #20
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr
	...

08000738 <SPI_PeriClockControl>:

#include "stm32f446xx_spi_driver.h"


// Peripheral Clock Setup
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	460b      	mov	r3, r1
 8000742:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000744:	78fb      	ldrb	r3, [r7, #3]
 8000746:	2b01      	cmp	r3, #1
 8000748:	d120      	bne.n	800078c <SPI_PeriClockControl+0x54>
		// Enable
		if(pSPIx == SPI1){
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4a22      	ldr	r2, [pc, #136]	; (80007d8 <SPI_PeriClockControl+0xa0>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d106      	bne.n	8000760 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 8000752:	4b22      	ldr	r3, [pc, #136]	; (80007dc <SPI_PeriClockControl+0xa4>)
 8000754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000756:	4a21      	ldr	r2, [pc, #132]	; (80007dc <SPI_PeriClockControl+0xa4>)
 8000758:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800075c:	6453      	str	r3, [r2, #68]	; 0x44
			SPI2_PCLK_DI();
		}else if(pSPIx == SPI3){
			SPI3_PCLK_DI();
		}
	}
}
 800075e:	e035      	b.n	80007cc <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI2){
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a1f      	ldr	r2, [pc, #124]	; (80007e0 <SPI_PeriClockControl+0xa8>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d106      	bne.n	8000776 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000768:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <SPI_PeriClockControl+0xa4>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076c:	4a1b      	ldr	r2, [pc, #108]	; (80007dc <SPI_PeriClockControl+0xa4>)
 800076e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000772:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000774:	e02a      	b.n	80007cc <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI3){
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4a1a      	ldr	r2, [pc, #104]	; (80007e4 <SPI_PeriClockControl+0xac>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d126      	bne.n	80007cc <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 800077e:	4b17      	ldr	r3, [pc, #92]	; (80007dc <SPI_PeriClockControl+0xa4>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	4a16      	ldr	r2, [pc, #88]	; (80007dc <SPI_PeriClockControl+0xa4>)
 8000784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000788:	6413      	str	r3, [r2, #64]	; 0x40
}
 800078a:	e01f      	b.n	80007cc <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1){
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <SPI_PeriClockControl+0xa0>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d106      	bne.n	80007a2 <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <SPI_PeriClockControl+0xa4>)
 8000796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000798:	4a10      	ldr	r2, [pc, #64]	; (80007dc <SPI_PeriClockControl+0xa4>)
 800079a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800079e:	6453      	str	r3, [r2, #68]	; 0x44
}
 80007a0:	e014      	b.n	80007cc <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI2){
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4a0e      	ldr	r2, [pc, #56]	; (80007e0 <SPI_PeriClockControl+0xa8>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d106      	bne.n	80007b8 <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <SPI_PeriClockControl+0xa4>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ae:	4a0b      	ldr	r2, [pc, #44]	; (80007dc <SPI_PeriClockControl+0xa4>)
 80007b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80007b4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007b6:	e009      	b.n	80007cc <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI3){
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4a0a      	ldr	r2, [pc, #40]	; (80007e4 <SPI_PeriClockControl+0xac>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d105      	bne.n	80007cc <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <SPI_PeriClockControl+0xa4>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	4a05      	ldr	r2, [pc, #20]	; (80007dc <SPI_PeriClockControl+0xa4>)
 80007c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80007ca:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007cc:	bf00      	nop
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40013000 	.word	0x40013000
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40003800 	.word	0x40003800
 80007e4:	40003c00 	.word	0x40003c00

080007e8 <SPI_Init>:


// Initialize and De-Initialize
void SPI_Init(SPI_Handle_t *pSPI_Handle){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	// Enable Peripheral Clock
	SPI_PeriClockControl(pSPI_Handle->pSPIx, ENABLE);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2101      	movs	r1, #1
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ff9e 	bl	8000738 <SPI_PeriClockControl>

	// Configure the SPI_CR1 Register
	uint32_t tempreg = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]

	// 1. Device Mode
	tempreg |= pSPI_Handle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	791b      	ldrb	r3, [r3, #4]
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	461a      	mov	r2, r3
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	4313      	orrs	r3, r2
 800080c:	60fb      	str	r3, [r7, #12]

	// 2. BusConfig
	if(pSPI_Handle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FULL_DUPLEX){
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	795b      	ldrb	r3, [r3, #5]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d104      	bne.n	8000820 <SPI_Init+0x38>
		// BIDI mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	e014      	b.n	800084a <SPI_Init+0x62>

	}else if(pSPI_Handle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HALF_DUPLEX){
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	795b      	ldrb	r3, [r3, #5]
 8000824:	2b02      	cmp	r3, #2
 8000826:	d104      	bne.n	8000832 <SPI_Init+0x4a>
		// BIDI mode should be set
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	e00b      	b.n	800084a <SPI_Init+0x62>

	}else if(pSPI_Handle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	795b      	ldrb	r3, [r3, #5]
 8000836:	2b03      	cmp	r3, #3
 8000838:	d107      	bne.n	800084a <SPI_Init+0x62>
		// BIDI mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000840:	60fb      	str	r3, [r7, #12]
		// RXONLY bit must be set
		tempreg |= (1 << SPI_CR1_RXONLY);
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000848:	60fb      	str	r3, [r7, #12]
	}

	// 3. SclkSpeed (Baud Rate)
	tempreg |= pSPI_Handle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	799b      	ldrb	r3, [r3, #6]
 800084e:	00db      	lsls	r3, r3, #3
 8000850:	461a      	mov	r2, r3
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	4313      	orrs	r3, r2
 8000856:	60fb      	str	r3, [r7, #12]

	// 4. DFF (Data Frame Configuration)
	tempreg |= pSPI_Handle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	79db      	ldrb	r3, [r3, #7]
 800085c:	02db      	lsls	r3, r3, #11
 800085e:	461a      	mov	r2, r3
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	4313      	orrs	r3, r2
 8000864:	60fb      	str	r3, [r7, #12]

	// 5. CPOL (Polarity)
	tempreg |= pSPI_Handle->SPIConfig.SPI_DFF << SPI_CR1_CPOL;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	79db      	ldrb	r3, [r3, #7]
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	461a      	mov	r2, r3
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	4313      	orrs	r3, r2
 8000872:	60fb      	str	r3, [r7, #12]

	// 6. CPHA (Phase)
	tempreg |= pSPI_Handle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	7a5b      	ldrb	r3, [r3, #9]
 8000878:	461a      	mov	r2, r3
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	4313      	orrs	r3, r2
 800087e:	60fb      	str	r3, [r7, #12]

	// 7. SSM
	tempreg |= pSPI_Handle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	7a9b      	ldrb	r3, [r3, #10]
 8000884:	025b      	lsls	r3, r3, #9
 8000886:	461a      	mov	r2, r3
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	4313      	orrs	r3, r2
 800088c:	60fb      	str	r3, [r7, #12]

	pSPI_Handle->pSPIx->CR1 = tempreg;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	601a      	str	r2, [r3, #0]


}
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <SPI_GetFlagStatus>:
	}

}


uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 800089e:	b480      	push	{r7}
 80008a0:	b083      	sub	sp, #12
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
 80008a6:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName){
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	689a      	ldr	r2, [r3, #8]
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	4013      	ands	r3, r2
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 80008b4:	2301      	movs	r3, #1
 80008b6:	e000      	b.n	80008ba <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr

080008c4 <SPI_SendData>:


// Data Send and Receive
// This is a blocking call
// Polling for the TXE Flag to be Set
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Length){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
	while(Length > 0){
 80008d0:	e027      	b.n	8000922 <SPI_SendData+0x5e>
		// Wait until TX Buffer is empty
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 80008d2:	bf00      	nop
 80008d4:	2102      	movs	r1, #2
 80008d6:	68f8      	ldr	r0, [r7, #12]
 80008d8:	f7ff ffe1 	bl	800089e <SPI_GetFlagStatus>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d0f8      	beq.n	80008d4 <SPI_SendData+0x10>

		// Check if 8bit or 16bit
		if((pSPIx->CR1 & (1 << SPI_CR1_DFF))){
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d00e      	beq.n	800090c <SPI_SendData+0x48>
			// 16bit
			// Load DR with 2 byte of data
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	881b      	ldrh	r3, [r3, #0]
 80008f2:	461a      	mov	r2, r3
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	60da      	str	r2, [r3, #12]
			// Increment Buffer Address
			(uint16_t*)pTxBuffer++;
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	3301      	adds	r3, #1
 80008fc:	60bb      	str	r3, [r7, #8]
			// Length--
			Length--;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	3b01      	subs	r3, #1
 8000902:	607b      	str	r3, [r7, #4]
			Length--;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	3b01      	subs	r3, #1
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	e00a      	b.n	8000922 <SPI_SendData+0x5e>
		}else{
			// 8bit
			pSPIx->DR = *pTxBuffer;
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	60da      	str	r2, [r3, #12]
			pTxBuffer++;
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	3301      	adds	r3, #1
 800091a:	60bb      	str	r3, [r7, #8]
			Length--;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3b01      	subs	r3, #1
 8000920:	607b      	str	r3, [r7, #4]
	while(Length > 0){
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d1d4      	bne.n	80008d2 <SPI_SendData+0xe>
		}
	}

}
 8000928:	bf00      	nop
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <SPI_ReceiveData>:

void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Length){
 8000932:	b580      	push	{r7, lr}
 8000934:	b084      	sub	sp, #16
 8000936:	af00      	add	r7, sp, #0
 8000938:	60f8      	str	r0, [r7, #12]
 800093a:	60b9      	str	r1, [r7, #8]
 800093c:	607a      	str	r2, [r7, #4]
	while(Length > 0){
 800093e:	e027      	b.n	8000990 <SPI_ReceiveData+0x5e>
		// Wait until RX Buffer is empty
		while(SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET);
 8000940:	bf00      	nop
 8000942:	2101      	movs	r1, #1
 8000944:	68f8      	ldr	r0, [r7, #12]
 8000946:	f7ff ffaa 	bl	800089e <SPI_GetFlagStatus>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d0f8      	beq.n	8000942 <SPI_ReceiveData+0x10>

		// Check if 8bit or 16bit
		if((pSPIx->CR1 & (1 << SPI_CR1_DFF))){
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000958:	2b00      	cmp	r3, #0
 800095a:	d00e      	beq.n	800097a <SPI_ReceiveData+0x48>
			// 16bit
			// Load data from DR to RxBuffer Address
			*((uint16_t*)pRxBuffer) = pSPIx->DR;
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	b29a      	uxth	r2, r3
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	801a      	strh	r2, [r3, #0]
			// Increment Buffer Address
			(uint16_t*)pRxBuffer++;
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	3301      	adds	r3, #1
 800096a:	60bb      	str	r3, [r7, #8]
			// Length--
			Length--;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3b01      	subs	r3, #1
 8000970:	607b      	str	r3, [r7, #4]
			Length--;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3b01      	subs	r3, #1
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	e00a      	b.n	8000990 <SPI_ReceiveData+0x5e>
		}else{
			// 8bit
			*pRxBuffer = pSPIx->DR;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	68db      	ldr	r3, [r3, #12]
 800097e:	b2da      	uxtb	r2, r3
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	701a      	strb	r2, [r3, #0]
			pRxBuffer++;
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	3301      	adds	r3, #1
 8000988:	60bb      	str	r3, [r7, #8]
			Length--;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	3b01      	subs	r3, #1
 800098e:	607b      	str	r3, [r7, #4]
	while(Length > 0){
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d1d4      	bne.n	8000940 <SPI_ReceiveData+0xe>
		}
	}

}
 8000996:	bf00      	nop
 8000998:	bf00      	nop
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <SPI_PeripheralControl>:

void SPI_IRQHandling(SPI_Handle_t *pHandle){

}

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	460b      	mov	r3, r1
 80009aa:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 80009ac:	78fb      	ldrb	r3, [r7, #3]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d106      	bne.n	80009c0 <SPI_PeripheralControl+0x20>
		// Enable
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	601a      	str	r2, [r3, #0]
	}else{
		// Disable
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 80009be:	e005      	b.n	80009cc <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	601a      	str	r2, [r3, #0]
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr

080009d6 <SPI_SSOEConfig>:
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}


void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 80009d6:	b480      	push	{r7}
 80009d8:	b083      	sub	sp, #12
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
 80009de:	460b      	mov	r3, r1
 80009e0:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 80009e2:	78fb      	ldrb	r3, [r7, #3]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d106      	bne.n	80009f6 <SPI_SSOEConfig+0x20>
		// Enable
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	f043 0204 	orr.w	r2, r3, #4
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	605a      	str	r2, [r3, #4]
	}else{
		// Disable
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 80009f4:	e005      	b.n	8000a02 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	f023 0204 	bic.w	r2, r3, #4
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	605a      	str	r2, [r3, #4]
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <delay>:
#define LED_ON		1
#define LED_OFF		0



void delay(void){
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<500000/2; i++){
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	e002      	b.n	8000a1e <delay+0x12>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <delay+0x28>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d9f8      	bls.n	8000a18 <delay+0xc>

	}
}
 8000a26:	bf00      	nop
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	0003d08f 	.word	0x0003d08f

08000a38 <SPI2_GPIOInits>:

void SPI2_GPIOInits(void){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b090      	sub	sp, #64	; 0x40
 8000a3c:	af00      	add	r7, sp, #0

	GPIO_Handle_t SPIPins;

	// Common Settings between Pins
	SPIPins.pGPIOx = GPIOB;
 8000a3e:	4b26      	ldr	r3, [pc, #152]	; (8000ad8 <SPI2_GPIOInits+0xa0>)
 8000a40:	637b      	str	r3, [r7, #52]	; 0x34
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFUN;
 8000a42:	2302      	movs	r3, #2
 8000a44:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000a48:	2305      	movs	r3, #5
 8000a4a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000a54:	2300      	movs	r3, #0
 8000a56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	// MISO
	GPIO_Handle_t SPI_MISO_Pin = SPIPins;
 8000a60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a64:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000a68:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	SPI_MISO_Pin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000a6e:	230e      	movs	r3, #14
 8000a70:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	GPIO_Init(&SPI_MISO_Pin);
 8000a74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fc9b 	bl	80003b4 <GPIO_Init>

	// MOSI
	GPIO_Handle_t SPI_MOSI_Pin = SPIPins;
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000a86:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	SPI_MOSI_Pin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000a8c:	230f      	movs	r3, #15
 8000a8e:	f887 3020 	strb.w	r3, [r7, #32]
	GPIO_Init(&SPI_MOSI_Pin);
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff fc8c 	bl	80003b4 <GPIO_Init>

	// SCLK
	GPIO_Handle_t SPI_SCLK_Pin = SPIPins;
 8000a9c:	f107 0310 	add.w	r3, r7, #16
 8000aa0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000aa4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000aa6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	SPI_SCLK_Pin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000aaa:	230d      	movs	r3, #13
 8000aac:	753b      	strb	r3, [r7, #20]
	GPIO_Init(&SPI_SCLK_Pin);
 8000aae:	f107 0310 	add.w	r3, r7, #16
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fc7e 	bl	80003b4 <GPIO_Init>

	// NSS
	GPIO_Handle_t SPI_NSS_Pin = SPIPins;
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000abe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ac0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	SPI_NSS_Pin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000ac4:	230c      	movs	r3, #12
 8000ac6:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_NSS_Pin);
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fc72 	bl	80003b4 <GPIO_Init>

}
 8000ad0:	bf00      	nop
 8000ad2:	3740      	adds	r7, #64	; 0x40
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40020400 	.word	0x40020400

08000adc <SPI2_Inits>:


void SPI2_Inits(void){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2Handle;

	SPI2Handle.pSPIx = SPI2;
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <SPI2_Inits+0x38>)
 8000ae4:	607b      	str	r3, [r7, #4]

	SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FULL_DUPLEX;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000aea:	2301      	movs	r3, #1
 8000aec:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8; // Generates sclk of 2MHz
 8000aee:	2302      	movs	r3, #2
 8000af0:	72bb      	strb	r3, [r7, #10]
	SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000af2:	2300      	movs	r3, #0
 8000af4:	72fb      	strb	r3, [r7, #11]
	SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	733b      	strb	r3, [r7, #12]
	SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	737b      	strb	r3, [r7, #13]
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_DI; // Hardware slave management
 8000afe:	2300      	movs	r3, #0
 8000b00:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2Handle);
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fe6f 	bl	80007e8 <SPI_Init>

}
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40003800 	.word	0x40003800

08000b18 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioButton;
	// Configure the Button
	GpioButton.pGPIOx = GPIOC;
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <GPIO_ButtonInit+0x2c>)
 8000b20:	607b      	str	r3, [r7, #4]
	GpioButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000b22:	230d      	movs	r3, #13
 8000b24:	723b      	strb	r3, [r7, #8]
	GpioButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 8000b26:	2300      	movs	r3, #0
 8000b28:	727b      	strb	r3, [r7, #9]
	GpioButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	72fb      	strb	r3, [r7, #11]
	GpioButton.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(&GpioButton);
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fc3d 	bl	80003b4 <GPIO_Init>
}
 8000b3a:	bf00      	nop
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40020800 	.word	0x40020800

08000b48 <SPI_VerifyResponse>:


uint8_t SPI_VerifyResponse(uint8_t ackbyte){
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
	if(ackbyte == ACKBYTE){
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	2bf5      	cmp	r3, #245	; 0xf5
 8000b56:	d101      	bne.n	8000b5c <SPI_VerifyResponse+0x14>
		// ack
		return 1;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e000      	b.n	8000b5e <SPI_VerifyResponse+0x16>
	}
	// nack
	return 0;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr

08000b68 <main>:

int main(void){
 8000b68:	b5b0      	push	{r4, r5, r7, lr}
 8000b6a:	b092      	sub	sp, #72	; 0x48
 8000b6c:	af00      	add	r7, sp, #0

	// GPIO Button
	GPIO_ButtonInit();
 8000b6e:	f7ff ffd3 	bl	8000b18 <GPIO_ButtonInit>

	// Initialize the GPIO pins
	SPI2_GPIOInits();
 8000b72:	f7ff ff61 	bl	8000a38 <SPI2_GPIOInits>

	// Initialize the SPI2 Peripheral
	SPI2_Inits();
 8000b76:	f7ff ffb1 	bl	8000adc <SPI2_Inits>

	// SSOE 1 Enables the NSS Output
	SPI_SSOEConfig(SPI2, ENABLE);
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	48cf      	ldr	r0, [pc, #828]	; (8000ebc <main+0x354>)
 8000b7e:	f7ff ff2a 	bl	80009d6 <SPI_SSOEConfig>


	uint8_t dummy_write = 0xff;
 8000b82:	23ff      	movs	r3, #255	; 0xff
 8000b84:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	while(1){


		// Wait for button press
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) != BUTTON_PRESSED);
 8000b88:	bf00      	nop
 8000b8a:	210d      	movs	r1, #13
 8000b8c:	48cc      	ldr	r0, [pc, #816]	; (8000ec0 <main+0x358>)
 8000b8e:	f7ff fdbd 	bl	800070c <GPIO_ReadFromInputPin>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1f8      	bne.n	8000b8a <main+0x22>
		// For the De-bouncing of the Button
		delay();
 8000b98:	f7ff ff38 	bl	8000a0c <delay>

		// Enable the SPI2 Peripheral
		SPI_PeripheralControl(SPI2, ENABLE);
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	48c7      	ldr	r0, [pc, #796]	; (8000ebc <main+0x354>)
 8000ba0:	f7ff fefe 	bl	80009a0 <SPI_PeripheralControl>

		// Execute CMD_LED_CTRL <pin no(1)> <value(1)>
		uint8_t command_code = COMMAND_LED_CTRL;
 8000ba4:	2350      	movs	r3, #80	; 0x50
 8000ba6:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
		uint8_t ackbyte;
		uint8_t args[2];
		// Send Data
		SPI_SendData(SPI2, &command_code, 1);
 8000baa:	f107 0341 	add.w	r3, r7, #65	; 0x41
 8000bae:	2201      	movs	r2, #1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	48c2      	ldr	r0, [pc, #776]	; (8000ebc <main+0x354>)
 8000bb4:	f7ff fe86 	bl	80008c4 <SPI_SendData>
		SPI_ReceiveData(SPI2, &dummy_read, 1); // Dummy Read to clear the RXNE
 8000bb8:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	48be      	ldr	r0, [pc, #760]	; (8000ebc <main+0x354>)
 8000bc2:	f7ff feb6 	bl	8000932 <SPI_ReceiveData>
		// Receive Data
		SPI_SendData(SPI2, &dummy_write, 1); // Send dummy byte to fetch the response from the slave
 8000bc6:	f107 0343 	add.w	r3, r7, #67	; 0x43
 8000bca:	2201      	movs	r2, #1
 8000bcc:	4619      	mov	r1, r3
 8000bce:	48bb      	ldr	r0, [pc, #748]	; (8000ebc <main+0x354>)
 8000bd0:	f7ff fe78 	bl	80008c4 <SPI_SendData>
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000bd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bd8:	2201      	movs	r2, #1
 8000bda:	4619      	mov	r1, r3
 8000bdc:	48b7      	ldr	r0, [pc, #732]	; (8000ebc <main+0x354>)
 8000bde:	f7ff fea8 	bl	8000932 <SPI_ReceiveData>
		if( SPI_VerifyResponse(ackbyte) ){
 8000be2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff ffae 	bl	8000b48 <SPI_VerifyResponse>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d00c      	beq.n	8000c0c <main+0xa4>
			// Send Arguments
			args[0] = LED_PIN;
 8000bf2:	2309      	movs	r3, #9
 8000bf4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			args[1] = LED_ON;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			SPI_SendData(SPI2, args, 2);
 8000bfe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c02:	2202      	movs	r2, #2
 8000c04:	4619      	mov	r1, r3
 8000c06:	48ad      	ldr	r0, [pc, #692]	; (8000ebc <main+0x354>)
 8000c08:	f7ff fe5c 	bl	80008c4 <SPI_SendData>
		}


		// Wait for button press
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) != BUTTON_PRESSED);
 8000c0c:	bf00      	nop
 8000c0e:	210d      	movs	r1, #13
 8000c10:	48ab      	ldr	r0, [pc, #684]	; (8000ec0 <main+0x358>)
 8000c12:	f7ff fd7b 	bl	800070c <GPIO_ReadFromInputPin>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d1f8      	bne.n	8000c0e <main+0xa6>
		// For the De-bouncing of the Button
		delay();
 8000c1c:	f7ff fef6 	bl	8000a0c <delay>


		// Execute CMD_SENSOR_READ <analog pin number(1)>
		command_code = COMMAND_SENSOR_READ;
 8000c20:	2351      	movs	r3, #81	; 0x51
 8000c22:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
		// Send Data
		SPI_SendData(SPI2, &command_code, 1);
 8000c26:	f107 0341 	add.w	r3, r7, #65	; 0x41
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	48a3      	ldr	r0, [pc, #652]	; (8000ebc <main+0x354>)
 8000c30:	f7ff fe48 	bl	80008c4 <SPI_SendData>
		SPI_ReceiveData(SPI2, &dummy_read, 1); // Dummy Read to clear the RXNE
 8000c34:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8000c38:	2201      	movs	r2, #1
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	489f      	ldr	r0, [pc, #636]	; (8000ebc <main+0x354>)
 8000c3e:	f7ff fe78 	bl	8000932 <SPI_ReceiveData>
		// Receive Data
		SPI_SendData(SPI2, &dummy_write, 1); // Send dummy byte to fetch the response from the slave
 8000c42:	f107 0343 	add.w	r3, r7, #67	; 0x43
 8000c46:	2201      	movs	r2, #1
 8000c48:	4619      	mov	r1, r3
 8000c4a:	489c      	ldr	r0, [pc, #624]	; (8000ebc <main+0x354>)
 8000c4c:	f7ff fe3a 	bl	80008c4 <SPI_SendData>
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000c50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c54:	2201      	movs	r2, #1
 8000c56:	4619      	mov	r1, r3
 8000c58:	4898      	ldr	r0, [pc, #608]	; (8000ebc <main+0x354>)
 8000c5a:	f7ff fe6a 	bl	8000932 <SPI_ReceiveData>
		if( SPI_VerifyResponse(ackbyte) ){
 8000c5e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ff70 	bl	8000b48 <SPI_VerifyResponse>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d020      	beq.n	8000cb0 <main+0x148>
			// Send Arguments
			args[0] = ANALOG_PIN0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			SPI_SendData(SPI2, args, 1);
 8000c74:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c78:	2201      	movs	r2, #1
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	488f      	ldr	r0, [pc, #572]	; (8000ebc <main+0x354>)
 8000c7e:	f7ff fe21 	bl	80008c4 <SPI_SendData>
			SPI_ReceiveData(SPI2, &dummy_read, 1); // Dummy Read to clear the RXNE
 8000c82:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8000c86:	2201      	movs	r2, #1
 8000c88:	4619      	mov	r1, r3
 8000c8a:	488c      	ldr	r0, [pc, #560]	; (8000ebc <main+0x354>)
 8000c8c:	f7ff fe51 	bl	8000932 <SPI_ReceiveData>
			delay();
 8000c90:	f7ff febc 	bl	8000a0c <delay>
			// Receive Data
			SPI_SendData(SPI2, &dummy_write, 1); // Send dummy byte to fetch the response from the slave
 8000c94:	f107 0343 	add.w	r3, r7, #67	; 0x43
 8000c98:	2201      	movs	r2, #1
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4887      	ldr	r0, [pc, #540]	; (8000ebc <main+0x354>)
 8000c9e:	f7ff fe11 	bl	80008c4 <SPI_SendData>
			uint8_t analog_read;
			SPI_ReceiveData(SPI2, &analog_read, 1);
 8000ca2:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4884      	ldr	r0, [pc, #528]	; (8000ebc <main+0x354>)
 8000cac:	f7ff fe41 	bl	8000932 <SPI_ReceiveData>
		}


		// Wait for button press
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) != BUTTON_PRESSED);
 8000cb0:	bf00      	nop
 8000cb2:	210d      	movs	r1, #13
 8000cb4:	4882      	ldr	r0, [pc, #520]	; (8000ec0 <main+0x358>)
 8000cb6:	f7ff fd29 	bl	800070c <GPIO_ReadFromInputPin>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d1f8      	bne.n	8000cb2 <main+0x14a>
		// For the De-bouncing of the Button
		delay();
 8000cc0:	f7ff fea4 	bl	8000a0c <delay>

		//-----------------------------------------
		// Execute CMD_LED_READ <pin no(1)>
		command_code = COMMAND_LED_READ;
 8000cc4:	2352      	movs	r3, #82	; 0x52
 8000cc6:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
		// Send Data
		SPI_SendData(SPI2, &command_code, 1);
 8000cca:	f107 0341 	add.w	r3, r7, #65	; 0x41
 8000cce:	2201      	movs	r2, #1
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	487a      	ldr	r0, [pc, #488]	; (8000ebc <main+0x354>)
 8000cd4:	f7ff fdf6 	bl	80008c4 <SPI_SendData>
		SPI_ReceiveData(SPI2, &dummy_read, 1); // Dummy Read to clear the RXNE
 8000cd8:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8000cdc:	2201      	movs	r2, #1
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4876      	ldr	r0, [pc, #472]	; (8000ebc <main+0x354>)
 8000ce2:	f7ff fe26 	bl	8000932 <SPI_ReceiveData>
		// Receive Data
		SPI_SendData(SPI2, &dummy_write, 1); // Send dummy byte to fetch the response from the slave
 8000ce6:	f107 0343 	add.w	r3, r7, #67	; 0x43
 8000cea:	2201      	movs	r2, #1
 8000cec:	4619      	mov	r1, r3
 8000cee:	4873      	ldr	r0, [pc, #460]	; (8000ebc <main+0x354>)
 8000cf0:	f7ff fde8 	bl	80008c4 <SPI_SendData>
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000cf4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	486f      	ldr	r0, [pc, #444]	; (8000ebc <main+0x354>)
 8000cfe:	f7ff fe18 	bl	8000932 <SPI_ReceiveData>
		if( SPI_VerifyResponse(ackbyte) ){
 8000d02:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff ff1e 	bl	8000b48 <SPI_VerifyResponse>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d020      	beq.n	8000d54 <main+0x1ec>
			// Send Arguments
			args[0] = LED_PIN;
 8000d12:	2309      	movs	r3, #9
 8000d14:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			SPI_SendData(SPI2, args, 1);
 8000d18:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4866      	ldr	r0, [pc, #408]	; (8000ebc <main+0x354>)
 8000d22:	f7ff fdcf 	bl	80008c4 <SPI_SendData>
			SPI_ReceiveData(SPI2, &dummy_read, 1); // Dummy Read to clear the RXNE
 8000d26:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4863      	ldr	r0, [pc, #396]	; (8000ebc <main+0x354>)
 8000d30:	f7ff fdff 	bl	8000932 <SPI_ReceiveData>
			delay();
 8000d34:	f7ff fe6a 	bl	8000a0c <delay>
			// Receive Data
			SPI_SendData(SPI2, &dummy_write, 1); // Send dummy byte to fetch the response from the slave
 8000d38:	f107 0343 	add.w	r3, r7, #67	; 0x43
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	4619      	mov	r1, r3
 8000d40:	485e      	ldr	r0, [pc, #376]	; (8000ebc <main+0x354>)
 8000d42:	f7ff fdbf 	bl	80008c4 <SPI_SendData>
			uint8_t led_read;
			SPI_ReceiveData(SPI2, &led_read, 1);
 8000d46:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	485b      	ldr	r0, [pc, #364]	; (8000ebc <main+0x354>)
 8000d50:	f7ff fdef 	bl	8000932 <SPI_ReceiveData>
		}


		// Wait for button press
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) != BUTTON_PRESSED);
 8000d54:	bf00      	nop
 8000d56:	210d      	movs	r1, #13
 8000d58:	4859      	ldr	r0, [pc, #356]	; (8000ec0 <main+0x358>)
 8000d5a:	f7ff fcd7 	bl	800070c <GPIO_ReadFromInputPin>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d1f8      	bne.n	8000d56 <main+0x1ee>
		// For the De-bouncing of the Button
		delay();
 8000d64:	f7ff fe52 	bl	8000a0c <delay>


		// Execute CMD_PRINT <length(2)> <message(length)>
		command_code = COMMAND_PRINT;
 8000d68:	2353      	movs	r3, #83	; 0x53
 8000d6a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
		// Send Data
		SPI_SendData(SPI2, &command_code, 1);
 8000d6e:	f107 0341 	add.w	r3, r7, #65	; 0x41
 8000d72:	2201      	movs	r2, #1
 8000d74:	4619      	mov	r1, r3
 8000d76:	4851      	ldr	r0, [pc, #324]	; (8000ebc <main+0x354>)
 8000d78:	f7ff fda4 	bl	80008c4 <SPI_SendData>
		SPI_ReceiveData(SPI2, &dummy_read, 1); // Dummy Read to clear the RXNE
 8000d7c:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8000d80:	2201      	movs	r2, #1
 8000d82:	4619      	mov	r1, r3
 8000d84:	484d      	ldr	r0, [pc, #308]	; (8000ebc <main+0x354>)
 8000d86:	f7ff fdd4 	bl	8000932 <SPI_ReceiveData>
		// Receive Data
		SPI_SendData(SPI2, &dummy_write, 1); // Send dummy byte to fetch the response from the slave
 8000d8a:	f107 0343 	add.w	r3, r7, #67	; 0x43
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4619      	mov	r1, r3
 8000d92:	484a      	ldr	r0, [pc, #296]	; (8000ebc <main+0x354>)
 8000d94:	f7ff fd96 	bl	80008c4 <SPI_SendData>
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000d98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4846      	ldr	r0, [pc, #280]	; (8000ebc <main+0x354>)
 8000da2:	f7ff fdc6 	bl	8000932 <SPI_ReceiveData>
		if( SPI_VerifyResponse(ackbyte) ){
 8000da6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fecc 	bl	8000b48 <SPI_VerifyResponse>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d02a      	beq.n	8000e0c <main+0x2a4>
			// Send Arguments
			char secret_message[] = "This is a Secrete Message for the Arduino";
 8000db6:	4b43      	ldr	r3, [pc, #268]	; (8000ec4 <main+0x35c>)
 8000db8:	1d3c      	adds	r4, r7, #4
 8000dba:	461d      	mov	r5, r3
 8000dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dc8:	c403      	stmia	r4!, {r0, r1}
 8000dca:	8022      	strh	r2, [r4, #0]
			args[0] = strlen(secret_message);
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fa18 	bl	8000204 <strlen>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			SPI_SendData(SPI2, args, 1);
 8000ddc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000de0:	2201      	movs	r2, #1
 8000de2:	4619      	mov	r1, r3
 8000de4:	4835      	ldr	r0, [pc, #212]	; (8000ebc <main+0x354>)
 8000de6:	f7ff fd6d 	bl	80008c4 <SPI_SendData>
			SPI_ReceiveData(SPI2, &dummy_read, 1); // Dummy Read to clear the RXNE
 8000dea:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8000dee:	2201      	movs	r2, #1
 8000df0:	4619      	mov	r1, r3
 8000df2:	4832      	ldr	r0, [pc, #200]	; (8000ebc <main+0x354>)
 8000df4:	f7ff fd9d 	bl	8000932 <SPI_ReceiveData>
			SPI_SendData(SPI2, (uint8_t*)secret_message, strlen(secret_message));
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fa02 	bl	8000204 <strlen>
 8000e00:	4602      	mov	r2, r0
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	4619      	mov	r1, r3
 8000e06:	482d      	ldr	r0, [pc, #180]	; (8000ebc <main+0x354>)
 8000e08:	f7ff fd5c 	bl	80008c4 <SPI_SendData>
		}


		// Wait for button press
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) != BUTTON_PRESSED);
 8000e0c:	bf00      	nop
 8000e0e:	210d      	movs	r1, #13
 8000e10:	482b      	ldr	r0, [pc, #172]	; (8000ec0 <main+0x358>)
 8000e12:	f7ff fc7b 	bl	800070c <GPIO_ReadFromInputPin>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1f8      	bne.n	8000e0e <main+0x2a6>
		// For the De-bouncing of the Button
		delay();
 8000e1c:	f7ff fdf6 	bl	8000a0c <delay>


		// Execute CMD_ID_READ
		command_code = COMMAND_ID_READ;
 8000e20:	2354      	movs	r3, #84	; 0x54
 8000e22:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
		// Send Data
		SPI_SendData(SPI2, &command_code, 1);
 8000e26:	f107 0341 	add.w	r3, r7, #65	; 0x41
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4823      	ldr	r0, [pc, #140]	; (8000ebc <main+0x354>)
 8000e30:	f7ff fd48 	bl	80008c4 <SPI_SendData>
		SPI_ReceiveData(SPI2, &dummy_read, 1); // Dummy Read to clear the RXNE
 8000e34:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8000e38:	2201      	movs	r2, #1
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	481f      	ldr	r0, [pc, #124]	; (8000ebc <main+0x354>)
 8000e3e:	f7ff fd78 	bl	8000932 <SPI_ReceiveData>
		// Receive Data
		SPI_SendData(SPI2, &dummy_write, 1); // Send dummy byte to fetch the response from the slave
 8000e42:	f107 0343 	add.w	r3, r7, #67	; 0x43
 8000e46:	2201      	movs	r2, #1
 8000e48:	4619      	mov	r1, r3
 8000e4a:	481c      	ldr	r0, [pc, #112]	; (8000ebc <main+0x354>)
 8000e4c:	f7ff fd3a 	bl	80008c4 <SPI_SendData>
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000e50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e54:	2201      	movs	r2, #1
 8000e56:	4619      	mov	r1, r3
 8000e58:	4818      	ldr	r0, [pc, #96]	; (8000ebc <main+0x354>)
 8000e5a:	f7ff fd6a 	bl	8000932 <SPI_ReceiveData>
		if( SPI_VerifyResponse(ackbyte) ){
 8000e5e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fe70 	bl	8000b48 <SPI_VerifyResponse>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d018      	beq.n	8000ea0 <main+0x338>
			uint8_t board_id[10];
			for(int i=0; i<10; i++){
 8000e6e:	2300      	movs	r3, #0
 8000e70:	647b      	str	r3, [r7, #68]	; 0x44
 8000e72:	e012      	b.n	8000e9a <main+0x332>
				// Receive A Byte
				SPI_SendData(SPI2, &dummy_write, 1); // Send dummy byte to fetch the response from the slave
 8000e74:	f107 0343 	add.w	r3, r7, #67	; 0x43
 8000e78:	2201      	movs	r2, #1
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480f      	ldr	r0, [pc, #60]	; (8000ebc <main+0x354>)
 8000e7e:	f7ff fd21 	bl	80008c4 <SPI_SendData>
				SPI_ReceiveData(SPI2, &board_id[i], 1);
 8000e82:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e88:	4413      	add	r3, r2
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	480b      	ldr	r0, [pc, #44]	; (8000ebc <main+0x354>)
 8000e90:	f7ff fd4f 	bl	8000932 <SPI_ReceiveData>
			for(int i=0; i<10; i++){
 8000e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e96:	3301      	adds	r3, #1
 8000e98:	647b      	str	r3, [r7, #68]	; 0x44
 8000e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e9c:	2b09      	cmp	r3, #9
 8000e9e:	dde9      	ble.n	8000e74 <main+0x30c>




		// Wait until SPI is not Busy
		while(SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG));
 8000ea0:	bf00      	nop
 8000ea2:	2180      	movs	r1, #128	; 0x80
 8000ea4:	4805      	ldr	r0, [pc, #20]	; (8000ebc <main+0x354>)
 8000ea6:	f7ff fcfa 	bl	800089e <SPI_GetFlagStatus>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1f8      	bne.n	8000ea2 <main+0x33a>
		// Disable the SPI2 Peripheral
		SPI_PeripheralControl(SPI2, DISABLE);
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4802      	ldr	r0, [pc, #8]	; (8000ebc <main+0x354>)
 8000eb4:	f7ff fd74 	bl	80009a0 <SPI_PeripheralControl>
	while(1){
 8000eb8:	e666      	b.n	8000b88 <main+0x20>
 8000eba:	bf00      	nop
 8000ebc:	40003800 	.word	0x40003800
 8000ec0:	40020800 	.word	0x40020800
 8000ec4:	08000f7c 	.word	0x08000f7c

08000ec8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ec8:	480d      	ldr	r0, [pc, #52]	; (8000f00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ecc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ed0:	480c      	ldr	r0, [pc, #48]	; (8000f04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ed2:	490d      	ldr	r1, [pc, #52]	; (8000f08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	; (8000f0c <LoopForever+0xe>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed8:	e002      	b.n	8000ee0 <LoopCopyDataInit>

08000eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ede:	3304      	adds	r3, #4

08000ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee4:	d3f9      	bcc.n	8000eda <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ee8:	4c0a      	ldr	r4, [pc, #40]	; (8000f14 <LoopForever+0x16>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eec:	e001      	b.n	8000ef2 <LoopFillZerobss>

08000eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef0:	3204      	adds	r2, #4

08000ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef4:	d3fb      	bcc.n	8000eee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ef6:	f000 f811 	bl	8000f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000efa:	f7ff fe35 	bl	8000b68 <main>

08000efe <LoopForever>:

LoopForever:
  b LoopForever
 8000efe:	e7fe      	b.n	8000efe <LoopForever>
  ldr   r0, =_estack
 8000f00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f08:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000f0c:	08000fb0 	.word	0x08000fb0
  ldr r2, =_sbss
 8000f10:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000f14:	2000001c 	.word	0x2000001c

08000f18 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC_IRQHandler>
	...

08000f1c <__libc_init_array>:
 8000f1c:	b570      	push	{r4, r5, r6, lr}
 8000f1e:	4d0d      	ldr	r5, [pc, #52]	; (8000f54 <__libc_init_array+0x38>)
 8000f20:	4c0d      	ldr	r4, [pc, #52]	; (8000f58 <__libc_init_array+0x3c>)
 8000f22:	1b64      	subs	r4, r4, r5
 8000f24:	10a4      	asrs	r4, r4, #2
 8000f26:	2600      	movs	r6, #0
 8000f28:	42a6      	cmp	r6, r4
 8000f2a:	d109      	bne.n	8000f40 <__libc_init_array+0x24>
 8000f2c:	4d0b      	ldr	r5, [pc, #44]	; (8000f5c <__libc_init_array+0x40>)
 8000f2e:	4c0c      	ldr	r4, [pc, #48]	; (8000f60 <__libc_init_array+0x44>)
 8000f30:	f000 f818 	bl	8000f64 <_init>
 8000f34:	1b64      	subs	r4, r4, r5
 8000f36:	10a4      	asrs	r4, r4, #2
 8000f38:	2600      	movs	r6, #0
 8000f3a:	42a6      	cmp	r6, r4
 8000f3c:	d105      	bne.n	8000f4a <__libc_init_array+0x2e>
 8000f3e:	bd70      	pop	{r4, r5, r6, pc}
 8000f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f44:	4798      	blx	r3
 8000f46:	3601      	adds	r6, #1
 8000f48:	e7ee      	b.n	8000f28 <__libc_init_array+0xc>
 8000f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f4e:	4798      	blx	r3
 8000f50:	3601      	adds	r6, #1
 8000f52:	e7f2      	b.n	8000f3a <__libc_init_array+0x1e>
 8000f54:	08000fa8 	.word	0x08000fa8
 8000f58:	08000fa8 	.word	0x08000fa8
 8000f5c:	08000fa8 	.word	0x08000fa8
 8000f60:	08000fac 	.word	0x08000fac

08000f64 <_init>:
 8000f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f66:	bf00      	nop
 8000f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f6a:	bc08      	pop	{r3}
 8000f6c:	469e      	mov	lr, r3
 8000f6e:	4770      	bx	lr

08000f70 <_fini>:
 8000f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f72:	bf00      	nop
 8000f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f76:	bc08      	pop	{r3}
 8000f78:	469e      	mov	lr, r3
 8000f7a:	4770      	bx	lr

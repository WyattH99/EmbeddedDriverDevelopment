
008_stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001244  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001408  08001408  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001408  08001408  000201b0  2**0
                  CONTENTS
  4 .ARM          00000000  08001408  08001408  000201b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001408  08001408  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001408  08001408  00011408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800140c  0800140c  0001140c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b0  20000000  08001410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  200001b0  080015c0  000201b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  080015c0  00020204  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201da  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001854  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005a6  00000000  00000000  00021a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e8  00000000  00000000  00022018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000016b  00000000  00000000  00022200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002589  00000000  00000000  0002236b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001e66  00000000  00000000  000248f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009ee7  00000000  00000000  0002675a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000074c  00000000  00000000  00030644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00030d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200001b0 	.word	0x200001b0
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080013f0 	.word	0x080013f0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200001b4 	.word	0x200001b4
 8000200:	080013f0 	.word	0x080013f0

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <GPIO_PeriClockControl>:
 * @return            -  void
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi){
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	460b      	mov	r3, r1
 800021e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){ // Enable
 8000220:	78fb      	ldrb	r3, [r7, #3]
 8000222:	2b01      	cmp	r3, #1
 8000224:	d157      	bne.n	80002d6 <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA){
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a59      	ldr	r2, [pc, #356]	; (8000390 <GPIO_PeriClockControl+0x17c>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800022e:	4b59      	ldr	r3, [pc, #356]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000232:	4a58      	ldr	r2, [pc, #352]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000234:	f043 0301 	orr.w	r3, r3, #1
 8000238:	6313      	str	r3, [r2, #48]	; 0x30
		}else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}

}
 800023a:	e0a3      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB){
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a56      	ldr	r2, [pc, #344]	; (8000398 <GPIO_PeriClockControl+0x184>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000244:	4b53      	ldr	r3, [pc, #332]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a52      	ldr	r2, [pc, #328]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800024a:	f043 0302 	orr.w	r3, r3, #2
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000250:	e098      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC){
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a51      	ldr	r2, [pc, #324]	; (800039c <GPIO_PeriClockControl+0x188>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800025a:	4b4e      	ldr	r3, [pc, #312]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025e:	4a4d      	ldr	r2, [pc, #308]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000260:	f043 0304 	orr.w	r3, r3, #4
 8000264:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000266:	e08d      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOD){
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a4d      	ldr	r2, [pc, #308]	; (80003a0 <GPIO_PeriClockControl+0x18c>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d106      	bne.n	800027e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000270:	4b48      	ldr	r3, [pc, #288]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000274:	4a47      	ldr	r2, [pc, #284]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000276:	f043 0308 	orr.w	r3, r3, #8
 800027a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800027c:	e082      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE){
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a48      	ldr	r2, [pc, #288]	; (80003a4 <GPIO_PeriClockControl+0x190>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000286:	4b43      	ldr	r3, [pc, #268]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028a:	4a42      	ldr	r2, [pc, #264]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800028c:	f043 0310 	orr.w	r3, r3, #16
 8000290:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000292:	e077      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF){
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a44      	ldr	r2, [pc, #272]	; (80003a8 <GPIO_PeriClockControl+0x194>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d106      	bne.n	80002aa <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800029c:	4b3d      	ldr	r3, [pc, #244]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a3c      	ldr	r2, [pc, #240]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002a2:	f043 0320 	orr.w	r3, r3, #32
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a8:	e06c      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOG){
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a3f      	ldr	r2, [pc, #252]	; (80003ac <GPIO_PeriClockControl+0x198>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d106      	bne.n	80002c0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80002b2:	4b38      	ldr	r3, [pc, #224]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	4a37      	ldr	r2, [pc, #220]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002be:	e061      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOH){
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a3b      	ldr	r2, [pc, #236]	; (80003b0 <GPIO_PeriClockControl+0x19c>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d15d      	bne.n	8000384 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 80002c8:	4b32      	ldr	r3, [pc, #200]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002cc:	4a31      	ldr	r2, [pc, #196]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002d4:	e056      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA){
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a2d      	ldr	r2, [pc, #180]	; (8000390 <GPIO_PeriClockControl+0x17c>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d106      	bne.n	80002ec <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 80002de:	4b2d      	ldr	r3, [pc, #180]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e2:	4a2c      	ldr	r2, [pc, #176]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002e4:	f023 0301 	bic.w	r3, r3, #1
 80002e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ea:	e04b      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB){
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a2a      	ldr	r2, [pc, #168]	; (8000398 <GPIO_PeriClockControl+0x184>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d106      	bne.n	8000302 <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 80002f4:	4b27      	ldr	r3, [pc, #156]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f8:	4a26      	ldr	r2, [pc, #152]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002fa:	f023 0302 	bic.w	r3, r3, #2
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000300:	e040      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC){
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a25      	ldr	r2, [pc, #148]	; (800039c <GPIO_PeriClockControl+0x188>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d106      	bne.n	8000318 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 800030a:	4b22      	ldr	r3, [pc, #136]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800030c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030e:	4a21      	ldr	r2, [pc, #132]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000310:	f023 0304 	bic.w	r3, r3, #4
 8000314:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000316:	e035      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOD){
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a21      	ldr	r2, [pc, #132]	; (80003a0 <GPIO_PeriClockControl+0x18c>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d106      	bne.n	800032e <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 8000320:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000324:	4a1b      	ldr	r2, [pc, #108]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000326:	f023 0308 	bic.w	r3, r3, #8
 800032a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800032c:	e02a      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE){
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a1c      	ldr	r2, [pc, #112]	; (80003a4 <GPIO_PeriClockControl+0x190>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d106      	bne.n	8000344 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 8000336:	4b17      	ldr	r3, [pc, #92]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033a:	4a16      	ldr	r2, [pc, #88]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800033c:	f023 0310 	bic.w	r3, r3, #16
 8000340:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000342:	e01f      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF){
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a18      	ldr	r2, [pc, #96]	; (80003a8 <GPIO_PeriClockControl+0x194>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d106      	bne.n	800035a <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000350:	4a10      	ldr	r2, [pc, #64]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000352:	f023 0320 	bic.w	r3, r3, #32
 8000356:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000358:	e014      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOG){
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a13      	ldr	r2, [pc, #76]	; (80003ac <GPIO_PeriClockControl+0x198>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d106      	bne.n	8000370 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8000362:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000366:	4a0b      	ldr	r2, [pc, #44]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000368:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800036c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036e:	e009      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOH){
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a0f      	ldr	r2, [pc, #60]	; (80003b0 <GPIO_PeriClockControl+0x19c>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d105      	bne.n	8000384 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037c:	4a05      	ldr	r2, [pc, #20]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800037e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000382:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	bc80      	pop	{r7}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40020000 	.word	0x40020000
 8000394:	40023800 	.word	0x40023800
 8000398:	40020400 	.word	0x40020400
 800039c:	40020800 	.word	0x40020800
 80003a0:	40020c00 	.word	0x40020c00
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40021400 	.word	0x40021400
 80003ac:	40021800 	.word	0x40021800
 80003b0:	40021c00 	.word	0x40021c00

080003b4 <GPIO_Init>:


/*
 * Initialize and De-Initialize
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]

	// Enable Peripheral Clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2101      	movs	r1, #1
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff ff26 	bl	8000214 <GPIO_PeriClockControl>

	uint32_t temp = 0; // Temporary Register
 80003c8:	2300      	movs	r3, #0
 80003ca:	60fb      	str	r3, [r7, #12]

	// 1. Configure Mode of GPIO Pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	795b      	ldrb	r3, [r3, #5]
 80003d0:	2b03      	cmp	r3, #3
 80003d2:	d821      	bhi.n	8000418 <GPIO_Init+0x64>
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	795b      	ldrb	r3, [r3, #5]
 80003d8:	461a      	mov	r2, r3
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	791b      	ldrb	r3, [r3, #4]
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	fa02 f303 	lsl.w	r3, r2, r3
 80003e4:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	791b      	ldrb	r3, [r3, #4]
 80003f0:	4619      	mov	r1, r3
 80003f2:	2303      	movs	r3, #3
 80003f4:	408b      	lsls	r3, r1
 80003f6:	43db      	mvns	r3, r3
 80003f8:	4619      	mov	r1, r3
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	400a      	ands	r2, r1
 8000400:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // Set
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	6819      	ldr	r1, [r3, #0]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	68fa      	ldr	r2, [r7, #12]
 800040e:	430a      	orrs	r2, r1
 8000410:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	e0b8      	b.n	800058a <GPIO_Init+0x1d6>
	}else{
		// TODO: Interrupt Mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	795b      	ldrb	r3, [r3, #5]
 800041c:	2b04      	cmp	r3, #4
 800041e:	d117      	bne.n	8000450 <GPIO_Init+0x9c>
			// Configure the Falling Trigger Selection Register
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000420:	4b43      	ldr	r3, [pc, #268]	; (8000530 <GPIO_Init+0x17c>)
 8000422:	68db      	ldr	r3, [r3, #12]
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	7912      	ldrb	r2, [r2, #4]
 8000428:	4611      	mov	r1, r2
 800042a:	2201      	movs	r2, #1
 800042c:	408a      	lsls	r2, r1
 800042e:	4611      	mov	r1, r2
 8000430:	4a3f      	ldr	r2, [pc, #252]	; (8000530 <GPIO_Init+0x17c>)
 8000432:	430b      	orrs	r3, r1
 8000434:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear RTSR
 8000436:	4b3e      	ldr	r3, [pc, #248]	; (8000530 <GPIO_Init+0x17c>)
 8000438:	689b      	ldr	r3, [r3, #8]
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	7912      	ldrb	r2, [r2, #4]
 800043e:	4611      	mov	r1, r2
 8000440:	2201      	movs	r2, #1
 8000442:	408a      	lsls	r2, r1
 8000444:	43d2      	mvns	r2, r2
 8000446:	4611      	mov	r1, r2
 8000448:	4a39      	ldr	r2, [pc, #228]	; (8000530 <GPIO_Init+0x17c>)
 800044a:	400b      	ands	r3, r1
 800044c:	6093      	str	r3, [r2, #8]
 800044e:	e035      	b.n	80004bc <GPIO_Init+0x108>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	795b      	ldrb	r3, [r3, #5]
 8000454:	2b05      	cmp	r3, #5
 8000456:	d117      	bne.n	8000488 <GPIO_Init+0xd4>
			// Configure the Rising Trigger Selection Register
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000458:	4b35      	ldr	r3, [pc, #212]	; (8000530 <GPIO_Init+0x17c>)
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	687a      	ldr	r2, [r7, #4]
 800045e:	7912      	ldrb	r2, [r2, #4]
 8000460:	4611      	mov	r1, r2
 8000462:	2201      	movs	r2, #1
 8000464:	408a      	lsls	r2, r1
 8000466:	4611      	mov	r1, r2
 8000468:	4a31      	ldr	r2, [pc, #196]	; (8000530 <GPIO_Init+0x17c>)
 800046a:	430b      	orrs	r3, r1
 800046c:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear FTSR
 800046e:	4b30      	ldr	r3, [pc, #192]	; (8000530 <GPIO_Init+0x17c>)
 8000470:	68db      	ldr	r3, [r3, #12]
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	7912      	ldrb	r2, [r2, #4]
 8000476:	4611      	mov	r1, r2
 8000478:	2201      	movs	r2, #1
 800047a:	408a      	lsls	r2, r1
 800047c:	43d2      	mvns	r2, r2
 800047e:	4611      	mov	r1, r2
 8000480:	4a2b      	ldr	r2, [pc, #172]	; (8000530 <GPIO_Init+0x17c>)
 8000482:	400b      	ands	r3, r1
 8000484:	60d3      	str	r3, [r2, #12]
 8000486:	e019      	b.n	80004bc <GPIO_Init+0x108>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	795b      	ldrb	r3, [r3, #5]
 800048c:	2b06      	cmp	r3, #6
 800048e:	d115      	bne.n	80004bc <GPIO_Init+0x108>
			// Configure Both Falling and Rising
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000490:	4b27      	ldr	r3, [pc, #156]	; (8000530 <GPIO_Init+0x17c>)
 8000492:	68db      	ldr	r3, [r3, #12]
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	7912      	ldrb	r2, [r2, #4]
 8000498:	4611      	mov	r1, r2
 800049a:	2201      	movs	r2, #1
 800049c:	408a      	lsls	r2, r1
 800049e:	4611      	mov	r1, r2
 80004a0:	4a23      	ldr	r2, [pc, #140]	; (8000530 <GPIO_Init+0x17c>)
 80004a2:	430b      	orrs	r3, r1
 80004a4:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a6:	4b22      	ldr	r3, [pc, #136]	; (8000530 <GPIO_Init+0x17c>)
 80004a8:	689b      	ldr	r3, [r3, #8]
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	7912      	ldrb	r2, [r2, #4]
 80004ae:	4611      	mov	r1, r2
 80004b0:	2201      	movs	r2, #1
 80004b2:	408a      	lsls	r2, r1
 80004b4:	4611      	mov	r1, r2
 80004b6:	4a1e      	ldr	r2, [pc, #120]	; (8000530 <GPIO_Init+0x17c>)
 80004b8:	430b      	orrs	r3, r1
 80004ba:	6093      	str	r3, [r2, #8]
		}

		// Configure the GPIO port Selection in SYSCFG_EXTICR
		uint8_t ExtiCR_Number = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	791b      	ldrb	r3, [r3, #4]
 80004c0:	089b      	lsrs	r3, r3, #2
 80004c2:	72fb      	strb	r3, [r7, #11]
		uint8_t ExtiCR_ShiftOffset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	791b      	ldrb	r3, [r3, #4]
 80004c8:	f003 0303 	and.w	r3, r3, #3
 80004cc:	72bb      	strb	r3, [r7, #10]
		uint8_t portcode = GPIO_BASEADDR_TO_PORTCODE(pGPIOHandle->pGPIOx);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a18      	ldr	r2, [pc, #96]	; (8000534 <GPIO_Init+0x180>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d03b      	beq.n	8000550 <GPIO_Init+0x19c>
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a16      	ldr	r2, [pc, #88]	; (8000538 <GPIO_Init+0x184>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d024      	beq.n	800052c <GPIO_Init+0x178>
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a15      	ldr	r2, [pc, #84]	; (800053c <GPIO_Init+0x188>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d01d      	beq.n	8000528 <GPIO_Init+0x174>
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a13      	ldr	r2, [pc, #76]	; (8000540 <GPIO_Init+0x18c>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d016      	beq.n	8000524 <GPIO_Init+0x170>
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a12      	ldr	r2, [pc, #72]	; (8000544 <GPIO_Init+0x190>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d00f      	beq.n	8000520 <GPIO_Init+0x16c>
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a10      	ldr	r2, [pc, #64]	; (8000548 <GPIO_Init+0x194>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d008      	beq.n	800051c <GPIO_Init+0x168>
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a0f      	ldr	r2, [pc, #60]	; (800054c <GPIO_Init+0x198>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d101      	bne.n	8000518 <GPIO_Init+0x164>
 8000514:	2306      	movs	r3, #6
 8000516:	e01c      	b.n	8000552 <GPIO_Init+0x19e>
 8000518:	2300      	movs	r3, #0
 800051a:	e01a      	b.n	8000552 <GPIO_Init+0x19e>
 800051c:	2305      	movs	r3, #5
 800051e:	e018      	b.n	8000552 <GPIO_Init+0x19e>
 8000520:	2304      	movs	r3, #4
 8000522:	e016      	b.n	8000552 <GPIO_Init+0x19e>
 8000524:	2303      	movs	r3, #3
 8000526:	e014      	b.n	8000552 <GPIO_Init+0x19e>
 8000528:	2302      	movs	r3, #2
 800052a:	e012      	b.n	8000552 <GPIO_Init+0x19e>
 800052c:	2301      	movs	r3, #1
 800052e:	e010      	b.n	8000552 <GPIO_Init+0x19e>
 8000530:	40013c00 	.word	0x40013c00
 8000534:	40020000 	.word	0x40020000
 8000538:	40020400 	.word	0x40020400
 800053c:	40020800 	.word	0x40020800
 8000540:	40020c00 	.word	0x40020c00
 8000544:	40021000 	.word	0x40021000
 8000548:	40021400 	.word	0x40021400
 800054c:	40021800 	.word	0x40021800
 8000550:	2300      	movs	r3, #0
 8000552:	727b      	strb	r3, [r7, #9]
		SYSCFG_PCLK_EN();
 8000554:	4b6a      	ldr	r3, [pc, #424]	; (8000700 <GPIO_Init+0x34c>)
 8000556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000558:	4a69      	ldr	r2, [pc, #420]	; (8000700 <GPIO_Init+0x34c>)
 800055a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[ExtiCR_Number] = portcode << (ExtiCR_ShiftOffset * 4);
 8000560:	7a7a      	ldrb	r2, [r7, #9]
 8000562:	7abb      	ldrb	r3, [r7, #10]
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	fa02 f103 	lsl.w	r1, r2, r3
 800056a:	4a66      	ldr	r2, [pc, #408]	; (8000704 <GPIO_Init+0x350>)
 800056c:	7afb      	ldrb	r3, [r7, #11]
 800056e:	3302      	adds	r3, #2
 8000570:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000574:	4b64      	ldr	r3, [pc, #400]	; (8000708 <GPIO_Init+0x354>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	7912      	ldrb	r2, [r2, #4]
 800057c:	4611      	mov	r1, r2
 800057e:	2201      	movs	r2, #1
 8000580:	408a      	lsls	r2, r1
 8000582:	4611      	mov	r1, r2
 8000584:	4a60      	ldr	r2, [pc, #384]	; (8000708 <GPIO_Init+0x354>)
 8000586:	430b      	orrs	r3, r1
 8000588:	6013      	str	r3, [r2, #0]
	}

	// 2. Configure Speed
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	799b      	ldrb	r3, [r3, #6]
 800058e:	461a      	mov	r2, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	791b      	ldrb	r3, [r3, #4]
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	fa02 f303 	lsl.w	r3, r2, r3
 800059a:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	689a      	ldr	r2, [r3, #8]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	791b      	ldrb	r3, [r3, #4]
 80005a6:	4619      	mov	r1, r3
 80005a8:	2303      	movs	r3, #3
 80005aa:	408b      	lsls	r3, r1
 80005ac:	43db      	mvns	r3, r3
 80005ae:	4619      	mov	r1, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	400a      	ands	r2, r1
 80005b6:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	6899      	ldr	r1, [r3, #8]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	68fa      	ldr	r2, [r7, #12]
 80005c4:	430a      	orrs	r2, r1
 80005c6:	609a      	str	r2, [r3, #8]
	temp = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]

	// 3. Configure Pull-up Pull-down Settings
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	79db      	ldrb	r3, [r3, #7]
 80005d0:	461a      	mov	r2, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	791b      	ldrb	r3, [r3, #4]
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	fa02 f303 	lsl.w	r3, r2, r3
 80005dc:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	68da      	ldr	r2, [r3, #12]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	791b      	ldrb	r3, [r3, #4]
 80005e8:	4619      	mov	r1, r3
 80005ea:	2303      	movs	r3, #3
 80005ec:	408b      	lsls	r3, r1
 80005ee:	43db      	mvns	r3, r3
 80005f0:	4619      	mov	r1, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	400a      	ands	r2, r1
 80005f8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	68d9      	ldr	r1, [r3, #12]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	68fa      	ldr	r2, [r7, #12]
 8000606:	430a      	orrs	r2, r1
 8000608:	60da      	str	r2, [r3, #12]
	temp = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]

	// 4. Configure the Output Type
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	7a1b      	ldrb	r3, [r3, #8]
 8000612:	461a      	mov	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	791b      	ldrb	r3, [r3, #4]
 8000618:	fa02 f303 	lsl.w	r3, r2, r3
 800061c:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	685a      	ldr	r2, [r3, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	791b      	ldrb	r3, [r3, #4]
 8000628:	4619      	mov	r1, r3
 800062a:	2301      	movs	r3, #1
 800062c:	408b      	lsls	r3, r1
 800062e:	43db      	mvns	r3, r3
 8000630:	4619      	mov	r1, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	400a      	ands	r2, r1
 8000638:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	6859      	ldr	r1, [r3, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	68fa      	ldr	r2, [r7, #12]
 8000646:	430a      	orrs	r2, r1
 8000648:	605a      	str	r2, [r3, #4]
	temp = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]

	// 5. Configure Alternate Functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFUN){
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	795b      	ldrb	r3, [r3, #5]
 8000652:	2b02      	cmp	r3, #2
 8000654:	d150      	bne.n	80006f8 <GPIO_Init+0x344>
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= GPIO_PIN_NO_7){
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	791b      	ldrb	r3, [r3, #4]
 800065a:	2b07      	cmp	r3, #7
 800065c:	d826      	bhi.n	80006ac <GPIO_Init+0x2f8>
				// AFRL Registers
				temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	7a5b      	ldrb	r3, [r3, #9]
 8000662:	461a      	mov	r2, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	791b      	ldrb	r3, [r3, #4]
 8000668:	f003 0307 	and.w	r3, r3, #7
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	fa02 f303 	lsl.w	r3, r2, r3
 8000672:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->AFRL &= ~(0xF << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8))); // Clear
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	6a1a      	ldr	r2, [r3, #32]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	791b      	ldrb	r3, [r3, #4]
 800067e:	f003 0307 	and.w	r3, r3, #7
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	210f      	movs	r1, #15
 8000686:	fa01 f303 	lsl.w	r3, r1, r3
 800068a:	43db      	mvns	r3, r3
 800068c:	4619      	mov	r1, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	400a      	ands	r2, r1
 8000694:	621a      	str	r2, [r3, #32]
				pGPIOHandle->pGPIOx->AFRL |= temp;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	6a19      	ldr	r1, [r3, #32]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	430a      	orrs	r2, r1
 80006a4:	621a      	str	r2, [r3, #32]
				temp = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->AFRH |= temp;
				temp = 0;
			}
	}

}
 80006aa:	e025      	b.n	80006f8 <GPIO_Init+0x344>
				temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	7a5b      	ldrb	r3, [r3, #9]
 80006b0:	461a      	mov	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	791b      	ldrb	r3, [r3, #4]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	fa02 f303 	lsl.w	r3, r2, r3
 80006c0:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->AFRH &= ~(0xF << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8))); // Clear
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	791b      	ldrb	r3, [r3, #4]
 80006cc:	f003 0307 	and.w	r3, r3, #7
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	210f      	movs	r1, #15
 80006d4:	fa01 f303 	lsl.w	r3, r1, r3
 80006d8:	43db      	mvns	r3, r3
 80006da:	4619      	mov	r1, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	400a      	ands	r2, r1
 80006e2:	625a      	str	r2, [r3, #36]	; 0x24
				pGPIOHandle->pGPIOx->AFRH |= temp;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	68fa      	ldr	r2, [r7, #12]
 80006f0:	430a      	orrs	r2, r1
 80006f2:	625a      	str	r2, [r3, #36]	; 0x24
				temp = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
}
 80006f8:	bf00      	nop
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40013800 	.word	0x40013800
 8000708:	40013c00 	.word	0x40013c00

0800070c <I2C_ExecuteAddressPhaseWrite>:
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
}

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000718:	78fb      	ldrb	r3, [r7, #3]
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 800071e:	78fb      	ldrb	r3, [r7, #3]
 8000720:	f023 0301 	bic.w	r3, r3, #1
 8000724:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000726:	78fa      	ldrb	r2, [r7, #3]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	611a      	str	r2, [r3, #16]
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr

08000736 <I2C_ExecuteAddressPhaseRead>:


static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000736:	b480      	push	{r7}
 8000738:	b083      	sub	sp, #12
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
 800073e:	460b      	mov	r3, r1
 8000740:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000742:	78fb      	ldrb	r3, [r7, #3]
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 8000748:	78fb      	ldrb	r3, [r7, #3]
 800074a:	f043 0301 	orr.w	r3, r3, #1
 800074e:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000750:	78fa      	ldrb	r2, [r7, #3]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	611a      	str	r2, [r3, #16]
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr

08000760 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle){
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	// Check for Device Mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	2b00      	cmp	r3, #0
 8000774:	d01f      	beq.n	80007b6 <I2C_ClearADDRFlag+0x56>
		// Master
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	7f1b      	ldrb	r3, [r3, #28]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d112      	bne.n	80007a4 <I2C_ClearADDRFlag+0x44>
			if(pI2CHandle->RxSize == 1){
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6a1b      	ldr	r3, [r3, #32]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d11f      	bne.n	80007c6 <I2C_ClearADDRFlag+0x66>
				// Disable the ACK
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f000 fc64 	bl	800105a <I2C_ManageAcking>

				// Clear the ADDR Flag (read SR1 and SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	695b      	ldr	r3, [r3, #20]
 8000798:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	60fb      	str	r3, [r7, #12]
		// Clear the ADDR Flag (read SR1 and SR2)
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}
}
 80007a2:	e010      	b.n	80007c6 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	60fb      	str	r3, [r7, #12]
}
 80007b4:	e007      	b.n	80007c6 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	695b      	ldr	r3, [r3, #20]
 80007bc:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	60fb      	str	r3, [r7, #12]
}
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <I2C_GenerateStopCondition>:

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 80007ce:	b480      	push	{r7}
 80007d0:	b083      	sub	sp, #12
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	601a      	str	r2, [r3, #0]
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <I2C_SlaveEnableDisableCallbackEvents>:


void I2C_SlaveEnableDisableCallbackEvents(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 80007f8:	78fb      	ldrb	r3, [r7, #3]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d112      	bne.n	8000824 <I2C_SlaveEnableDisableCallbackEvents+0x38>
		pI2Cx->CR2 |= (1 << I2C_CR2_ITEVTEN);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 |= (1 << I2C_CR2_ITBUFEN);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 |= (1 << I2C_CR2_ITERREN);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);

	}
}
 8000822:	e011      	b.n	8000848 <I2C_SlaveEnableDisableCallbackEvents+0x5c>
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	605a      	str	r2, [r3, #4]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr
	...

08000854 <I2C_PeriClockControl>:


// Peripheral Clock Setup
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	460b      	mov	r3, r1
 800085e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000860:	78fb      	ldrb	r3, [r7, #3]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d120      	bne.n	80008a8 <I2C_PeriClockControl+0x54>
		// Enable
		if(pI2Cx == I2C1){
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4a22      	ldr	r2, [pc, #136]	; (80008f4 <I2C_PeriClockControl+0xa0>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d106      	bne.n	800087c <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 800086e:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <I2C_PeriClockControl+0xa4>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	4a21      	ldr	r2, [pc, #132]	; (80008f8 <I2C_PeriClockControl+0xa4>)
 8000874:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000878:	6413      	str	r3, [r2, #64]	; 0x40
			I2C2_PCLK_DI();
		}else if(pI2Cx == I2C3){
			I2C3_PCLK_DI();
		}
	}
}
 800087a:	e035      	b.n	80008e8 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C2){
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a1f      	ldr	r2, [pc, #124]	; (80008fc <I2C_PeriClockControl+0xa8>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d106      	bne.n	8000892 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000884:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <I2C_PeriClockControl+0xa4>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000888:	4a1b      	ldr	r2, [pc, #108]	; (80008f8 <I2C_PeriClockControl+0xa4>)
 800088a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800088e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000890:	e02a      	b.n	80008e8 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C3){
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4a1a      	ldr	r2, [pc, #104]	; (8000900 <I2C_PeriClockControl+0xac>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d126      	bne.n	80008e8 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 800089a:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <I2C_PeriClockControl+0xa4>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	4a16      	ldr	r2, [pc, #88]	; (80008f8 <I2C_PeriClockControl+0xa4>)
 80008a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80008a4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008a6:	e01f      	b.n	80008e8 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1){
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <I2C_PeriClockControl+0xa0>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d106      	bne.n	80008be <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <I2C_PeriClockControl+0xa4>)
 80008b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b4:	4a10      	ldr	r2, [pc, #64]	; (80008f8 <I2C_PeriClockControl+0xa4>)
 80008b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80008ba:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008bc:	e014      	b.n	80008e8 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C2){
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <I2C_PeriClockControl+0xa8>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d106      	bne.n	80008d4 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <I2C_PeriClockControl+0xa4>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	4a0b      	ldr	r2, [pc, #44]	; (80008f8 <I2C_PeriClockControl+0xa4>)
 80008cc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80008d0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008d2:	e009      	b.n	80008e8 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C3){
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4a0a      	ldr	r2, [pc, #40]	; (8000900 <I2C_PeriClockControl+0xac>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d105      	bne.n	80008e8 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <I2C_PeriClockControl+0xa4>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e0:	4a05      	ldr	r2, [pc, #20]	; (80008f8 <I2C_PeriClockControl+0xa4>)
 80008e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80008e6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	40005400 	.word	0x40005400
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40005800 	.word	0x40005800
 8000900:	40005c00 	.word	0x40005c00

08000904 <I2C_PeripheralControl>:

// I2C Peripheral Control
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	460b      	mov	r3, r1
 800090e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000910:	78fb      	ldrb	r3, [r7, #3]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d106      	bne.n	8000924 <I2C_PeripheralControl+0x20>
		// Enable
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f043 0201 	orr.w	r2, r3, #1
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	601a      	str	r2, [r3, #0]
	}else{
		// Disable
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}

}
 8000922:	e005      	b.n	8000930 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f023 0201 	bic.w	r2, r3, #1
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	601a      	str	r2, [r3, #0]
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr

0800093a <RCC_GetPLLOutputClock>:

// Not implemented, just a placeholder
uint32_t RCC_GetPLLOutputClock(void){
 800093a:	b480      	push	{r7}
 800093c:	b083      	sub	sp, #12
 800093e:	af00      	add	r7, sp, #0
	uint32_t temp = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	607b      	str	r3, [r7, #4]
	return temp;
 8000944:	687b      	ldr	r3, [r7, #4]
}
 8000946:	4618      	mov	r0, r3
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr

08000950 <RCC_GetPCLK1Value>:

uint16_t AHB_PreScaler[8] = {2, 4, 8, 16, 64, 128, 512};
uint16_t APB1_PreScaler[4] = {2, 4, 8, 16};

uint32_t RCC_GetPCLK1Value(void){
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, ahbp, apb1p;
	clksrc = (RCC->CFGR >> 2) & 0x3;
 8000956:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <RCC_GetPCLK1Value+0xa0>)
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	089b      	lsrs	r3, r3, #2
 800095c:	b2db      	uxtb	r3, r3
 800095e:	f003 0303 	and.w	r3, r3, #3
 8000962:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0){
 8000964:	7a7b      	ldrb	r3, [r7, #9]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d102      	bne.n	8000970 <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 800096a:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <RCC_GetPCLK1Value+0xa4>)
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	e00b      	b.n	8000988 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1){
 8000970:	7a7b      	ldrb	r3, [r7, #9]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d102      	bne.n	800097c <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 8000976:	4b20      	ldr	r3, [pc, #128]	; (80009f8 <RCC_GetPCLK1Value+0xa8>)
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	e005      	b.n	8000988 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 2){
 800097c:	7a7b      	ldrb	r3, [r7, #9]
 800097e:	2b02      	cmp	r3, #2
 8000980:	d102      	bne.n	8000988 <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 8000982:	f7ff ffda 	bl	800093a <RCC_GetPLLOutputClock>
 8000986:	60f8      	str	r0, [r7, #12]
	}

	// AHB Pre-scaler
	temp = (RCC->CFGR >> 4) & 0xF;
 8000988:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <RCC_GetPCLK1Value+0xa0>)
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	091b      	lsrs	r3, r3, #4
 800098e:	b2db      	uxtb	r3, r3
 8000990:	f003 030f 	and.w	r3, r3, #15
 8000994:	723b      	strb	r3, [r7, #8]
	if(temp < 8){
 8000996:	7a3b      	ldrb	r3, [r7, #8]
 8000998:	2b07      	cmp	r3, #7
 800099a:	d802      	bhi.n	80009a2 <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 800099c:	2301      	movs	r3, #1
 800099e:	72fb      	strb	r3, [r7, #11]
 80009a0:	e005      	b.n	80009ae <RCC_GetPCLK1Value+0x5e>
	}else{
		ahbp = AHB_PreScaler[temp-8];
 80009a2:	7a3b      	ldrb	r3, [r7, #8]
 80009a4:	3b08      	subs	r3, #8
 80009a6:	4a15      	ldr	r2, [pc, #84]	; (80009fc <RCC_GetPCLK1Value+0xac>)
 80009a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009ac:	72fb      	strb	r3, [r7, #11]
	}

	// APB1 Pre-scaler
	temp = (RCC->CFGR >> 10) & 0x7;
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <RCC_GetPCLK1Value+0xa0>)
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	0a9b      	lsrs	r3, r3, #10
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	723b      	strb	r3, [r7, #8]
	if(temp < 8){
 80009bc:	7a3b      	ldrb	r3, [r7, #8]
 80009be:	2b07      	cmp	r3, #7
 80009c0:	d802      	bhi.n	80009c8 <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 80009c2:	2301      	movs	r3, #1
 80009c4:	72bb      	strb	r3, [r7, #10]
 80009c6:	e005      	b.n	80009d4 <RCC_GetPCLK1Value+0x84>
	}else{
		apb1p = APB1_PreScaler[temp-4];
 80009c8:	7a3b      	ldrb	r3, [r7, #8]
 80009ca:	3b04      	subs	r3, #4
 80009cc:	4a0c      	ldr	r2, [pc, #48]	; (8000a00 <RCC_GetPCLK1Value+0xb0>)
 80009ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009d2:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1p;
 80009d4:	7afb      	ldrb	r3, [r7, #11]
 80009d6:	68fa      	ldr	r2, [r7, #12]
 80009d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80009dc:	7abb      	ldrb	r3, [r7, #10]
 80009de:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e2:	607b      	str	r3, [r7, #4]

	return pclk1;
 80009e4:	687b      	ldr	r3, [r7, #4]
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	00f42400 	.word	0x00f42400
 80009f8:	007a1200 	.word	0x007a1200
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000010 	.word	0x20000010

08000a04 <I2C_Init>:

void I2C_Init(I2C_Handle_t *pI2C_Handle){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]

	// Enable the Clock for the I2Cx Peripheral
	I2C_PeriClockControl(pI2C_Handle->pI2Cx, ENABLE);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2101      	movs	r1, #1
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff ff1c 	bl	8000854 <I2C_PeriClockControl>

	// ACK Control Bit
	tempreg |= pI2C_Handle->I2C_Config.I2C_ACKControl << 10;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	7a5b      	ldrb	r3, [r3, #9]
 8000a20:	029b      	lsls	r3, r3, #10
 8000a22:	461a      	mov	r2, r3
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	60fb      	str	r3, [r7, #12]
	pI2C_Handle->pI2Cx->CR1 = tempreg;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	68fa      	ldr	r2, [r7, #12]
 8000a30:	601a      	str	r2, [r3, #0]

	// Configure the FREQ field of CR2
	tempreg = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
	tempreg |= (RCC_GetPCLK1Value() / 1000000U); // Divide by 1MHz to only get 16 instead of 16MHz
 8000a36:	f7ff ff8b 	bl	8000950 <RCC_GetPCLK1Value>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	4a4f      	ldr	r2, [pc, #316]	; (8000b7c <I2C_Init+0x178>)
 8000a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a42:	0c9b      	lsrs	r3, r3, #18
 8000a44:	68fa      	ldr	r2, [r7, #12]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	60fb      	str	r3, [r7, #12]
	pI2C_Handle->pI2Cx->CR2 = (tempreg & 0x3F);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000a54:	605a      	str	r2, [r3, #4]

	// Device Own Address
	tempreg = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2C_Handle->I2C_Config.I2C_DeviceAddress << 1;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	7a1b      	ldrb	r3, [r3, #8]
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	461a      	mov	r2, r3
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6e:	60fb      	str	r3, [r7, #12]
	pI2C_Handle->pI2Cx->OAR1 |= tempreg;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	6899      	ldr	r1, [r3, #8]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	609a      	str	r2, [r3, #8]

	// Clock Control Calculations
	uint16_t ccr_value = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
	if(pI2C_Handle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	4a3c      	ldr	r2, [pc, #240]	; (8000b80 <I2C_Init+0x17c>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d813      	bhi.n	8000aba <I2C_Init+0xb6>
		// Standard Mode
		tempreg &= ~(1 << 15);
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a98:	60fb      	str	r3, [r7, #12]
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2C_Handle->I2C_Config.I2C_SCLSpeed);
 8000a9a:	f7ff ff59 	bl	8000950 <RCC_GetPCLK1Value>
 8000a9e:	4602      	mov	r2, r0
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aaa:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000aac:	897b      	ldrh	r3, [r7, #10]
 8000aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	e02d      	b.n	8000b16 <I2C_Init+0x112>
	}else{
		// Fast Mode
		tempreg |= (1 << 15);
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ac0:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2C_Handle->I2C_Config.I2C_FMDutyCycle << 14);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	7a9b      	ldrb	r3, [r3, #10]
 8000ac6:	039b      	lsls	r3, r3, #14
 8000ac8:	461a      	mov	r2, r3
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	60fb      	str	r3, [r7, #12]
		if(pI2C_Handle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	7a9b      	ldrb	r3, [r3, #10]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d10b      	bne.n	8000af0 <I2C_Init+0xec>
			ccr_value = RCC_GetPCLK1Value() / (3 * pI2C_Handle->I2C_Config.I2C_SCLSpeed);
 8000ad8:	f7ff ff3a 	bl	8000950 <RCC_GetPCLK1Value>
 8000adc:	4601      	mov	r1, r0
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	685a      	ldr	r2, [r3, #4]
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	4413      	add	r3, r2
 8000ae8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000aec:	817b      	strh	r3, [r7, #10]
 8000aee:	e00c      	b.n	8000b0a <I2C_Init+0x106>
		}else{
			ccr_value = RCC_GetPCLK1Value() / (25 * pI2C_Handle->I2C_Config.I2C_SCLSpeed);
 8000af0:	f7ff ff2e 	bl	8000950 <RCC_GetPCLK1Value>
 8000af4:	4601      	mov	r1, r0
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	685a      	ldr	r2, [r3, #4]
 8000afa:	4613      	mov	r3, r2
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	4413      	add	r3, r2
 8000b00:	009a      	lsls	r2, r3, #2
 8000b02:	4413      	add	r3, r2
 8000b04:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b08:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000b0a:	897b      	ldrh	r3, [r7, #10]
 8000b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b10:	68fa      	ldr	r2, [r7, #12]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]
	}

	pI2C_Handle->pI2Cx->CCR |= tempreg;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	69d9      	ldr	r1, [r3, #28]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	68fa      	ldr	r2, [r7, #12]
 8000b22:	430a      	orrs	r2, r1
 8000b24:	61da      	str	r2, [r3, #28]

	// TRISE
	if(pI2C_Handle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	4a15      	ldr	r2, [pc, #84]	; (8000b80 <I2C_Init+0x17c>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d809      	bhi.n	8000b44 <I2C_Init+0x140>
		// Standard Mode
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000b30:	f7ff ff0e 	bl	8000950 <RCC_GetPCLK1Value>
 8000b34:	4603      	mov	r3, r0
 8000b36:	4a11      	ldr	r2, [pc, #68]	; (8000b7c <I2C_Init+0x178>)
 8000b38:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3c:	0c9b      	lsrs	r3, r3, #18
 8000b3e:	3301      	adds	r3, #1
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	e00d      	b.n	8000b60 <I2C_Init+0x15c>
	}else{
		// Fast Mode
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 8000b44:	f7ff ff04 	bl	8000950 <RCC_GetPCLK1Value>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000b4e:	fb02 f303 	mul.w	r3, r2, r3
 8000b52:	0a5b      	lsrs	r3, r3, #9
 8000b54:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <I2C_Init+0x180>)
 8000b56:	fba2 2303 	umull	r2, r3, r2, r3
 8000b5a:	09db      	lsrs	r3, r3, #7
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
	}

	pI2C_Handle->pI2Cx->TRISE |= (tempreg & 0x3F);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	6a19      	ldr	r1, [r3, #32]
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	430a      	orrs	r2, r1
 8000b72:	621a      	str	r2, [r3, #32]
}
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	431bde83 	.word	0x431bde83
 8000b80:	000186a0 	.word	0x000186a0
 8000b84:	00044b83 	.word	0x00044b83

08000b88 <I2C_IRQInterruptConfig>:
	return busystate;
}



void I2C_IRQInterruptConfig(uint8_t IRQNumber,uint8_t EnOrDi){
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	460a      	mov	r2, r1
 8000b92:	71fb      	strb	r3, [r7, #7]
 8000b94:	4613      	mov	r3, r2
 8000b96:	71bb      	strb	r3, [r7, #6]
	if(EnOrDi == ENABLE){
 8000b98:	79bb      	ldrb	r3, [r7, #6]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d133      	bne.n	8000c06 <I2C_IRQInterruptConfig+0x7e>
		// Enable
		if(IRQNumber <= 31){
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	2b1f      	cmp	r3, #31
 8000ba2:	d80a      	bhi.n	8000bba <I2C_IRQInterruptConfig+0x32>
			// Program ISER0 Register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000ba4:	4b34      	ldr	r3, [pc, #208]	; (8000c78 <I2C_IRQInterruptConfig+0xf0>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	79fa      	ldrb	r2, [r7, #7]
 8000baa:	2101      	movs	r1, #1
 8000bac:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb0:	4611      	mov	r1, r2
 8000bb2:	4a31      	ldr	r2, [pc, #196]	; (8000c78 <I2C_IRQInterruptConfig+0xf0>)
 8000bb4:	430b      	orrs	r3, r1
 8000bb6:	6013      	str	r3, [r2, #0]
		}else if(IRQNumber >= 64 && IRQNumber < 96){
			// Program ICER2 Register
			*NVIC_ICER2 |= (1 << (IRQNumber % 32));
		}
	}
}
 8000bb8:	e059      	b.n	8000c6e <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64){
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	2b1f      	cmp	r3, #31
 8000bbe:	d90f      	bls.n	8000be0 <I2C_IRQInterruptConfig+0x58>
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	2b3f      	cmp	r3, #63	; 0x3f
 8000bc4:	d80c      	bhi.n	8000be0 <I2C_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000bc6:	4b2d      	ldr	r3, [pc, #180]	; (8000c7c <I2C_IRQInterruptConfig+0xf4>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	79fa      	ldrb	r2, [r7, #7]
 8000bcc:	f002 021f 	and.w	r2, r2, #31
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd6:	4611      	mov	r1, r2
 8000bd8:	4a28      	ldr	r2, [pc, #160]	; (8000c7c <I2C_IRQInterruptConfig+0xf4>)
 8000bda:	430b      	orrs	r3, r1
 8000bdc:	6013      	str	r3, [r2, #0]
 8000bde:	e046      	b.n	8000c6e <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber >= 64 && IRQNumber < 96){
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	2b3f      	cmp	r3, #63	; 0x3f
 8000be4:	d943      	bls.n	8000c6e <I2C_IRQInterruptConfig+0xe6>
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	2b5f      	cmp	r3, #95	; 0x5f
 8000bea:	d840      	bhi.n	8000c6e <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 32));
 8000bec:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <I2C_IRQInterruptConfig+0xf8>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	79fa      	ldrb	r2, [r7, #7]
 8000bf2:	f002 021f 	and.w	r2, r2, #31
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4a20      	ldr	r2, [pc, #128]	; (8000c80 <I2C_IRQInterruptConfig+0xf8>)
 8000c00:	430b      	orrs	r3, r1
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	e033      	b.n	8000c6e <I2C_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31){
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	2b1f      	cmp	r3, #31
 8000c0a:	d80a      	bhi.n	8000c22 <I2C_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <I2C_IRQInterruptConfig+0xfc>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	79fa      	ldrb	r2, [r7, #7]
 8000c12:	2101      	movs	r1, #1
 8000c14:	fa01 f202 	lsl.w	r2, r1, r2
 8000c18:	4611      	mov	r1, r2
 8000c1a:	4a1a      	ldr	r2, [pc, #104]	; (8000c84 <I2C_IRQInterruptConfig+0xfc>)
 8000c1c:	430b      	orrs	r3, r1
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	e025      	b.n	8000c6e <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64){
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	2b1f      	cmp	r3, #31
 8000c26:	d90f      	bls.n	8000c48 <I2C_IRQInterruptConfig+0xc0>
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	2b3f      	cmp	r3, #63	; 0x3f
 8000c2c:	d80c      	bhi.n	8000c48 <I2C_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000c2e:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <I2C_IRQInterruptConfig+0x100>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	79fa      	ldrb	r2, [r7, #7]
 8000c34:	f002 021f 	and.w	r2, r2, #31
 8000c38:	2101      	movs	r1, #1
 8000c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4a11      	ldr	r2, [pc, #68]	; (8000c88 <I2C_IRQInterruptConfig+0x100>)
 8000c42:	430b      	orrs	r3, r1
 8000c44:	6013      	str	r3, [r2, #0]
 8000c46:	e012      	b.n	8000c6e <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber >= 64 && IRQNumber < 96){
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	2b3f      	cmp	r3, #63	; 0x3f
 8000c4c:	d90f      	bls.n	8000c6e <I2C_IRQInterruptConfig+0xe6>
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b5f      	cmp	r3, #95	; 0x5f
 8000c52:	d80c      	bhi.n	8000c6e <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 32));
 8000c54:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <I2C_IRQInterruptConfig+0x104>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	79fa      	ldrb	r2, [r7, #7]
 8000c5a:	f002 021f 	and.w	r2, r2, #31
 8000c5e:	2101      	movs	r1, #1
 8000c60:	fa01 f202 	lsl.w	r2, r1, r2
 8000c64:	4611      	mov	r1, r2
 8000c66:	4a09      	ldr	r2, [pc, #36]	; (8000c8c <I2C_IRQInterruptConfig+0x104>)
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	e7ff      	b.n	8000c6e <I2C_IRQInterruptConfig+0xe6>
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr
 8000c78:	e000e100 	.word	0xe000e100
 8000c7c:	e000e104 	.word	0xe000e104
 8000c80:	e000e108 	.word	0xe000e108
 8000c84:	e000e180 	.word	0xe000e180
 8000c88:	e000e184 	.word	0xe000e184
 8000c8c:	e000e188 	.word	0xe000e188

08000c90 <I2C_MasterHandleRXNEInterrupt>:
	uint8_t shift_amount = (8 * iprx_section) + (8 - NUM_PR_BITS_IMPLEMENTED);
	*(NVIC_IPR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount);
}


static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	// Receive Data
	if(pI2CHandle->RxSize == 1){
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6a1b      	ldr	r3, [r3, #32]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d10b      	bne.n	8000cb8 <I2C_MasterHandleRXNEInterrupt+0x28>
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	691a      	ldr	r2, [r3, #16]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	691b      	ldr	r3, [r3, #16]
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	701a      	strb	r2, [r3, #0]
		pI2CHandle->RxLength--;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	1e5a      	subs	r2, r3, #1
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	619a      	str	r2, [r3, #24]

	}
	if(pI2CHandle->RxSize > 1){
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6a1b      	ldr	r3, [r3, #32]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d91a      	bls.n	8000cf6 <I2C_MasterHandleRXNEInterrupt+0x66>
		if(pI2CHandle->RxLength == 2){
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d105      	bne.n	8000cd4 <I2C_MasterHandleRXNEInterrupt+0x44>
			I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f9c3 	bl	800105a <I2C_ManageAcking>
		}
		// Read DR
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	691a      	ldr	r2, [r3, #16]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	691b      	ldr	r3, [r3, #16]
 8000cde:	b2d2      	uxtb	r2, r2
 8000ce0:	701a      	strb	r2, [r3, #0]
		pI2CHandle->pRxBuffer++;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	691b      	ldr	r3, [r3, #16]
 8000ce6:	1c5a      	adds	r2, r3, #1
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLength--;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	1e5a      	subs	r2, r3, #1
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	619a      	str	r2, [r3, #24]
	}
	if(pI2CHandle->RxLength == 0){
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d110      	bne.n	8000d20 <I2C_MasterHandleRXNEInterrupt+0x90>
		// Close the I2C Data Reception and notify Application
		// 1. Generate the STOP
		if(pI2CHandle->Sr == I2C_DISABLE_SR){
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d104      	bne.n	8000d12 <I2C_MasterHandleRXNEInterrupt+0x82>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fd5e 	bl	80007ce <I2C_GenerateStopCondition>
		}

		// 2. Close the I2C Rx
		I2C_CloseReceiveData(pI2CHandle);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f000 f9bc 	bl	8001090 <I2C_CloseReceiveData>

		// 3. Notify the application
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_RX_COMPLETE);
 8000d18:	2101      	movs	r1, #1
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f000 faae 	bl	800127c <I2C_ApplicationEventCallback>
	}
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <I2C_MasterHandleTXEInterrupt>:


static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle){
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	if(pI2CHandle->TxLength > 0){
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	695b      	ldr	r3, [r3, #20]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d00f      	beq.n	8000d58 <I2C_MasterHandleTXEInterrupt+0x30>
		// 1. Load the data
		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	781a      	ldrb	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	611a      	str	r2, [r3, #16]

		// 2. Decrement the TxLength
		pI2CHandle->TxLength--;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	695b      	ldr	r3, [r3, #20]
 8000d48:	1e5a      	subs	r2, r3, #1
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	615a      	str	r2, [r3, #20]

		// 3. Increment the Buffer Address
		pI2CHandle->pTxBuffer++;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	1c5a      	adds	r2, r3, #1
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	60da      	str	r2, [r3, #12]
	}
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr

08000d62 <I2C_SlaveSendData>:


void I2C_SlaveSendData(I2C_RegDef_t *pI2C, uint8_t data){
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	70fb      	strb	r3, [r7, #3]
	pI2C->DR = data;
 8000d6e:	78fa      	ldrb	r2, [r7, #3]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	611a      	str	r2, [r3, #16]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr

08000d7e <I2C_SlaveReceiveData>:


uint8_t I2C_SlaveReceiveData(I2C_RegDef_t *pI2C){
 8000d7e:	b480      	push	{r7}
 8000d80:	b083      	sub	sp, #12
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
	return (uint8_t)pI2C->DR;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	691b      	ldr	r3, [r3, #16]
 8000d8a:	b2db      	uxtb	r3, r3
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr

08000d96 <I2C_EV_IRQHandling>:


void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle){
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
	// Interrupt handling for both master and slave mode of a device
	uint32_t temp1, temp2, temp3;

	temp1 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000da8:	617b      	str	r3, [r7, #20]
	temp2 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000db4:	613b      	str	r3, [r7, #16]

	// 1. Handle for Interrupt generated by SB event
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	695b      	ldr	r3, [r3, #20]
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	60fb      	str	r3, [r7, #12]
	if(temp1 && temp3){
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d01b      	beq.n	8000e00 <I2C_EV_IRQHandling+0x6a>
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d018      	beq.n	8000e00 <I2C_EV_IRQHandling+0x6a>
		// SB Flag is set
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	7f1b      	ldrb	r3, [r3, #28]
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d108      	bne.n	8000de8 <I2C_EV_IRQHandling+0x52>
			I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	7f5b      	ldrb	r3, [r3, #29]
 8000dde:	4619      	mov	r1, r3
 8000de0:	4610      	mov	r0, r2
 8000de2:	f7ff fc93 	bl	800070c <I2C_ExecuteAddressPhaseWrite>
 8000de6:	e00b      	b.n	8000e00 <I2C_EV_IRQHandling+0x6a>
		}else if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	7f1b      	ldrb	r3, [r3, #28]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d107      	bne.n	8000e00 <I2C_EV_IRQHandling+0x6a>
			I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	7f5b      	ldrb	r3, [r3, #29]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4610      	mov	r0, r2
 8000dfc:	f7ff fc9b 	bl	8000736 <I2C_ExecuteAddressPhaseRead>
		}
	}

	// 2. Handle for interrupt generated by ADDR event
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	695b      	ldr	r3, [r3, #20]
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	60fb      	str	r3, [r7, #12]
	if(temp1 && temp3){
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d005      	beq.n	8000e1e <I2C_EV_IRQHandling+0x88>
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d002      	beq.n	8000e1e <I2C_EV_IRQHandling+0x88>
		// ADDR Flag is set
		I2C_ClearADDRFlag(pI2CHandle);
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff fca1 	bl	8000760 <I2C_ClearADDRFlag>
	}

	// 3. Handle for interrupt generated by BTF (Byte Transfer Finished) event
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	695b      	ldr	r3, [r3, #20]
 8000e24:	f003 0304 	and.w	r3, r3, #4
 8000e28:	60fb      	str	r3, [r7, #12]
	if(temp1 && temp3){
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d022      	beq.n	8000e76 <I2C_EV_IRQHandling+0xe0>
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d01f      	beq.n	8000e76 <I2C_EV_IRQHandling+0xe0>
		// BTF Flag is set
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	7f1b      	ldrb	r3, [r3, #28]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d11b      	bne.n	8000e76 <I2C_EV_IRQHandling+0xe0>
			if(pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE)){
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	695b      	ldr	r3, [r3, #20]
 8000e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d014      	beq.n	8000e76 <I2C_EV_IRQHandling+0xe0>
				// BTF, and TXE are set and Length is 0
				if(pI2CHandle->TxLength == 0){
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d110      	bne.n	8000e76 <I2C_EV_IRQHandling+0xe0>
					// 1. Generate the STOP
					if(pI2CHandle->Sr == I2C_DISABLE_SR){
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d104      	bne.n	8000e68 <I2C_EV_IRQHandling+0xd2>
						I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fcb3 	bl	80007ce <I2C_GenerateStopCondition>
					}

					// 2. Reset all the member elements of the handle structure
					I2C_CloseSendData(pI2CHandle);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f000 f93f 	bl	80010ec <I2C_CloseSendData>

					//3. Notify the application about transmission complete
					I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_TX_COMPLETE);
 8000e6e:	2100      	movs	r1, #0
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f000 fa03 	bl	800127c <I2C_ApplicationEventCallback>
		}

	}

	// 4. Handle for interrupt generated by STOPF Event
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_STOPF);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	695b      	ldr	r3, [r3, #20]
 8000e7c:	f003 0310 	and.w	r3, r3, #16
 8000e80:	60fb      	str	r3, [r7, #12]
	if(temp1 && temp3){
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d00c      	beq.n	8000ea2 <I2C_EV_IRQHandling+0x10c>
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d009      	beq.n	8000ea2 <I2C_EV_IRQHandling+0x10c>
		// STOPF Flag is set
		// To Clear STOPF first read SR1 then write to CR1
		pI2CHandle->pI2Cx->CR1 |= 0x0000; // This will not effect any of the bits in CR1
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	6812      	ldr	r2, [r2, #0]
 8000e98:	601a      	str	r2, [r3, #0]
		// Notify the application that STOP was detected
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);
 8000e9a:	2102      	movs	r1, #2
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f000 f9ed 	bl	800127c <I2C_ApplicationEventCallback>
	}

	// 5. Handle for interrupt generated by TXE event
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	695b      	ldr	r3, [r3, #20]
 8000ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eac:	60fb      	str	r3, [r7, #12]
	if(temp1 && temp2 && temp3){
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d01f      	beq.n	8000ef4 <I2C_EV_IRQHandling+0x15e>
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d01c      	beq.n	8000ef4 <I2C_EV_IRQHandling+0x15e>
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d019      	beq.n	8000ef4 <I2C_EV_IRQHandling+0x15e>
		// TXE Flag is set
		// Check if Master
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d007      	beq.n	8000ede <I2C_EV_IRQHandling+0x148>
			// Send Data
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	7f1b      	ldrb	r3, [r3, #28]
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d10e      	bne.n	8000ef4 <I2C_EV_IRQHandling+0x15e>
				I2C_MasterHandleTXEInterrupt(pI2CHandle);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff ff26 	bl	8000d28 <I2C_MasterHandleTXEInterrupt>
 8000edc:	e00a      	b.n	8000ef4 <I2C_EV_IRQHandling+0x15e>
			}
		}else{
			// Slave
			// Check if Slave is in Transmit mode
			if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA)){
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d003      	beq.n	8000ef4 <I2C_EV_IRQHandling+0x15e>
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_REQ);
 8000eec:	2108      	movs	r1, #8
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 f9c4 	bl	800127c <I2C_ApplicationEventCallback>
		}

	}

	// 6. Handle for interrupt generated by RXNE event
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_RXNE);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000efe:	60fb      	str	r3, [r7, #12]
	if(temp1 && temp2 && temp3){
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d01f      	beq.n	8000f46 <I2C_EV_IRQHandling+0x1b0>
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d01c      	beq.n	8000f46 <I2C_EV_IRQHandling+0x1b0>
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d019      	beq.n	8000f46 <I2C_EV_IRQHandling+0x1b0>
		// RXNE Flag is set
		// Check if Master
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d007      	beq.n	8000f30 <I2C_EV_IRQHandling+0x19a>
			// Master
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	7f1b      	ldrb	r3, [r3, #28]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d10e      	bne.n	8000f46 <I2C_EV_IRQHandling+0x1b0>
				I2C_MasterHandleRXNEInterrupt(pI2CHandle);
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff feb1 	bl	8000c90 <I2C_MasterHandleRXNEInterrupt>
			if(!(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA))){
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
			}
		}
	}
}
 8000f2e:	e00a      	b.n	8000f46 <I2C_EV_IRQHandling+0x1b0>
			if(!(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA))){
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	f003 0304 	and.w	r3, r3, #4
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d103      	bne.n	8000f46 <I2C_EV_IRQHandling+0x1b0>
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
 8000f3e:	2109      	movs	r1, #9
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f000 f99b 	bl	800127c <I2C_ApplicationEventCallback>
}
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <I2C_ER_IRQHandling>:

void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle){
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b084      	sub	sp, #16
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]

	uint32_t temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (pI2CHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f60:	60fb      	str	r3, [r7, #12]


	// Check for Bus error
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1<< I2C_SR1_BERR);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	695b      	ldr	r3, [r3, #20]
 8000f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f6c:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2 )
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d00e      	beq.n	8000f92 <I2C_ER_IRQHandling+0x44>
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d00b      	beq.n	8000f92 <I2C_ER_IRQHandling+0x44>
	{
		//Implement the code to clear the buss error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	695a      	ldr	r2, [r3, #20]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f88:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
	   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_BERR);
 8000f8a:	2103      	movs	r1, #3
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f000 f975 	bl	800127c <I2C_ApplicationEventCallback>
	}

	// Check for arbitration lost error
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO );
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	695b      	ldr	r3, [r3, #20]
 8000f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f9c:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d00e      	beq.n	8000fc2 <I2C_ER_IRQHandling+0x74>
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d00b      	beq.n	8000fc2 <I2C_ER_IRQHandling+0x74>
	{
		//Implement the code to clear the arbitration lost error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	695a      	ldr	r2, [r3, #20]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000fb8:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
	   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_ARLO);
 8000fba:	2104      	movs	r1, #4
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f000 f95d 	bl	800127c <I2C_ApplicationEventCallback>
	}

	// Check for ACK failure  error
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_AF);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	695b      	ldr	r3, [r3, #20]
 8000fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fcc:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d00e      	beq.n	8000ff2 <I2C_ER_IRQHandling+0xa4>
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00b      	beq.n	8000ff2 <I2C_ER_IRQHandling+0xa4>
	{
	    //Implement the code to clear the ACK failure error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	695a      	ldr	r2, [r3, #20]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fe8:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
	   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_AF);
 8000fea:	2105      	movs	r1, #5
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f000 f945 	bl	800127c <I2C_ApplicationEventCallback>
	}

	// Check for Overrun/underrun error
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	695b      	ldr	r3, [r3, #20]
 8000ff8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ffc:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d00e      	beq.n	8001022 <I2C_ER_IRQHandling+0xd4>
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d00b      	beq.n	8001022 <I2C_ER_IRQHandling+0xd4>
	{
	    //Implement the code to clear the Overrun/underrun error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	695a      	ldr	r2, [r3, #20]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001018:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
	   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_OVR);
 800101a:	2106      	movs	r1, #6
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 f92d 	bl	800127c <I2C_ApplicationEventCallback>
	}

/***********************Check for Time out error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_TIMEOUT);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	695b      	ldr	r3, [r3, #20]
 8001028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102c:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d00e      	beq.n	8001052 <I2C_ER_IRQHandling+0x104>
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00b      	beq.n	8001052 <I2C_ER_IRQHandling+0x104>
	{
	    //Implement the code to clear the Time out error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	695a      	ldr	r2, [r3, #20]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001048:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
	   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_TIMEOUT);
 800104a:	2107      	movs	r1, #7
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f000 f915 	bl	800127c <I2C_ApplicationEventCallback>
	}

}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <I2C_ManageAcking>:


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	460b      	mov	r3, r1
 8001064:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == I2C_ACK_ENABLE){
 8001066:	78fb      	ldrb	r3, [r7, #3]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d106      	bne.n	800107a <I2C_ManageAcking+0x20>
		// Enable ACKing
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	601a      	str	r2, [r3, #0]
	}else{
		// Disable ACKing
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 8001078:	e005      	b.n	8001086 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	601a      	str	r2, [r3, #0]
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <I2C_CloseReceiveData>:
	}
	return FLAG_RESET;
}


void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle){
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	// Disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010a6:	605a      	str	r2, [r3, #4]

	// Disable ITEVTEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010b6:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLength = 0;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE){
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	7a5b      	ldrb	r3, [r3, #9]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d105      	bne.n	80010e4 <I2C_CloseReceiveData+0x54>
		I2C_ManageAcking(pI2CHandle->pI2Cx, ENABLE);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2101      	movs	r1, #1
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff ffbb 	bl	800105a <I2C_ManageAcking>
	}
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <I2C_CloseSendData>:

void I2C_CloseSendData(I2C_Handle_t *pI2CHandle){
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	// Disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001102:	605a      	str	r2, [r3, #4]

	// Disable ITEVTEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001112:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	60da      	str	r2, [r3, #12]
	pI2CHandle->TxLength = 0;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	615a      	str	r2, [r3, #20]

}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <I2C1_GPIOInits>:
	for(uint32_t i=0; i<500000/2; i++){

	}
}

void I2C1_GPIOInits(void){
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0

	GPIO_Handle_t I2CPins;

	// Common Settings between Pins
	I2CPins.pGPIOx = GPIOB;
 8001136:	4b17      	ldr	r3, [pc, #92]	; (8001194 <I2C1_GPIOInits+0x64>)
 8001138:	61fb      	str	r3, [r7, #28]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFUN;
 800113a:	2302      	movs	r3, #2
 800113c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8001140:	2304      	movs	r3, #4
 8001142:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8001146:	2301      	movs	r3, #1
 8001148:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD; // External Pull-UP Used
 800114c:	2300      	movs	r3, #0
 800114e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001152:	2302      	movs	r3, #2
 8001154:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22


	// SCL
	GPIO_Handle_t I2C_SCL_Pin = I2CPins;
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	f107 021c 	add.w	r2, r7, #28
 8001160:	ca07      	ldmia	r2, {r0, r1, r2}
 8001162:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	I2C_SCL_Pin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
 8001166:	2308      	movs	r3, #8
 8001168:	753b      	strb	r3, [r7, #20]
	GPIO_Init(&I2C_SCL_Pin);
 800116a:	f107 0310 	add.w	r3, r7, #16
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff f920 	bl	80003b4 <GPIO_Init>

	// SDA
	GPIO_Handle_t I2C_SDA_Pin = I2CPins;
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	f107 021c 	add.w	r2, r7, #28
 800117a:	ca07      	ldmia	r2, {r0, r1, r2}
 800117c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	I2C_SDA_Pin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 8001180:	2309      	movs	r3, #9
 8001182:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2C_SDA_Pin);
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff f914 	bl	80003b4 <GPIO_Init>

}
 800118c:	bf00      	nop
 800118e:	3728      	adds	r7, #40	; 0x28
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40020400 	.word	0x40020400

08001198 <I2C1_Inits>:


void I2C1_Inits(void){
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0

	I2C1Handle.pI2Cx = I2C1;
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <I2C1_Inits+0x2c>)
 800119e:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <I2C1_Inits+0x30>)
 80011a0:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <I2C1_Inits+0x2c>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <I2C1_Inits+0x2c>)
 80011aa:	2269      	movs	r2, #105	; 0x69
 80011ac:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 80011ae:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <I2C1_Inits+0x2c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <I2C1_Inits+0x2c>)
 80011b6:	4a05      	ldr	r2, [pc, #20]	; (80011cc <I2C1_Inits+0x34>)
 80011b8:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 80011ba:	4802      	ldr	r0, [pc, #8]	; (80011c4 <I2C1_Inits+0x2c>)
 80011bc:	f7ff fc22 	bl	8000a04 <I2C_Init>

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200001cc 	.word	0x200001cc
 80011c8:	40005400 	.word	0x40005400
 80011cc:	000186a0 	.word	0x000186a0

080011d0 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioButton;
	// Configure the Button
	GpioButton.pGPIOx = GPIOC;
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <GPIO_ButtonInit+0x2c>)
 80011d8:	607b      	str	r3, [r7, #4]
	GpioButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80011da:	230d      	movs	r3, #13
 80011dc:	723b      	strb	r3, [r7, #8]
	GpioButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 80011de:	2300      	movs	r3, #0
 80011e0:	727b      	strb	r3, [r7, #9]
	GpioButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80011e2:	2300      	movs	r3, #0
 80011e4:	72fb      	strb	r3, [r7, #11]
	GpioButton.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80011e6:	2302      	movs	r3, #2
 80011e8:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(&GpioButton);
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f8e1 	bl	80003b4 <GPIO_Init>
}
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40020800 	.word	0x40020800

08001200 <main>:



int main(void){
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0

	data_len = strlen((char*)Tx_buf);
 8001204:	4810      	ldr	r0, [pc, #64]	; (8001248 <main+0x48>)
 8001206:	f7fe fffd 	bl	8000204 <strlen>
 800120a:	4603      	mov	r3, r0
 800120c:	4a0f      	ldr	r2, [pc, #60]	; (800124c <main+0x4c>)
 800120e:	6013      	str	r3, [r2, #0]

	// GPIO Button
	GPIO_ButtonInit();
 8001210:	f7ff ffde 	bl	80011d0 <GPIO_ButtonInit>

	// Initialize the GPIO pins
	I2C1_GPIOInits();
 8001214:	f7ff ff8c 	bl	8001130 <I2C1_GPIOInits>

	// Initialize the I2C1 Peripheral
	I2C1_Inits();
 8001218:	f7ff ffbe 	bl	8001198 <I2C1_Inits>

	// I2C IRQ Configurations
	I2C_IRQInterruptConfig(IRQ_NUM_I2C1_EV, ENABLE);
 800121c:	2101      	movs	r1, #1
 800121e:	201f      	movs	r0, #31
 8001220:	f7ff fcb2 	bl	8000b88 <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NUM_I2C1_ER, ENABLE);
 8001224:	2101      	movs	r1, #1
 8001226:	2020      	movs	r0, #32
 8001228:	f7ff fcae 	bl	8000b88 <I2C_IRQInterruptConfig>

	I2C_SlaveEnableDisableCallbackEvents(I2C1, ENABLE);
 800122c:	2101      	movs	r1, #1
 800122e:	4808      	ldr	r0, [pc, #32]	; (8001250 <main+0x50>)
 8001230:	f7ff fadc 	bl	80007ec <I2C_SlaveEnableDisableCallbackEvents>

	// Enable the I2C1 Peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 8001234:	2101      	movs	r1, #1
 8001236:	4806      	ldr	r0, [pc, #24]	; (8001250 <main+0x50>)
 8001238:	f7ff fb64 	bl	8000904 <I2C_PeripheralControl>

	// Enable ACKing after PE bit is set
	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 800123c:	2101      	movs	r1, #1
 800123e:	4804      	ldr	r0, [pc, #16]	; (8001250 <main+0x50>)
 8001240:	f7ff ff0b 	bl	800105a <I2C_ManageAcking>

	while(1);
 8001244:	e7fe      	b.n	8001244 <main+0x44>
 8001246:	bf00      	nop
 8001248:	20000018 	.word	0x20000018
 800124c:	200001f4 	.word	0x200001f4
 8001250:	40005400 	.word	0x40005400

08001254 <I2C1_EV_IRQHandler>:

	return 0;
}


void I2C1_EV_IRQHandler(void){
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C1Handle);
 8001258:	4802      	ldr	r0, [pc, #8]	; (8001264 <I2C1_EV_IRQHandler+0x10>)
 800125a:	f7ff fd9c 	bl	8000d96 <I2C_EV_IRQHandling>
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200001cc 	.word	0x200001cc

08001268 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void){
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C1Handle);
 800126c:	4802      	ldr	r0, [pc, #8]	; (8001278 <I2C1_ER_IRQHandler+0x10>)
 800126e:	f7ff fe6e 	bl	8000f4e <I2C_ER_IRQHandling>
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200001cc 	.word	0x200001cc

0800127c <I2C_ApplicationEventCallback>:


void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle, uint8_t AppEvent){
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	70fb      	strb	r3, [r7, #3]
	static uint32_t cnt = 0;
	static uint32_t w_ptr = 0;



	if(AppEvent == I2C_ERROR_AF)
 8001288:	78fb      	ldrb	r3, [r7, #3]
 800128a:	2b05      	cmp	r3, #5
 800128c:	d116      	bne.n	80012bc <I2C_ApplicationEventCallback+0x40>
		// slave should understand master needs no more data
		//slave concludes end of Tx


		//if the current active code is 0x52 then dont invalidate
		if(! (CommandCode == 0x52))
 800128e:	4b2b      	ldr	r3, [pc, #172]	; (800133c <I2C_ApplicationEventCallback+0xc0>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b52      	cmp	r3, #82	; 0x52
 8001294:	d002      	beq.n	800129c <I2C_ApplicationEventCallback+0x20>
			CommandCode = 0XFF;
 8001296:	4b29      	ldr	r3, [pc, #164]	; (800133c <I2C_ApplicationEventCallback+0xc0>)
 8001298:	22ff      	movs	r2, #255	; 0xff
 800129a:	701a      	strb	r2, [r3, #0]

		//reset the cnt variable because its end of transmission
		cnt = 0;
 800129c:	4b28      	ldr	r3, [pc, #160]	; (8001340 <I2C_ApplicationEventCallback+0xc4>)
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]

		//Slave concludes it sent all the bytes when w_ptr reaches data_len
		if(w_ptr >= (data_len))
 80012a2:	4b28      	ldr	r3, [pc, #160]	; (8001344 <I2C_ApplicationEventCallback+0xc8>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4b28      	ldr	r3, [pc, #160]	; (8001348 <I2C_ApplicationEventCallback+0xcc>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d342      	bcc.n	8001334 <I2C_ApplicationEventCallback+0xb8>
		{
			w_ptr=0;
 80012ae:	4b25      	ldr	r3, [pc, #148]	; (8001344 <I2C_ApplicationEventCallback+0xc8>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
			CommandCode = 0xff;
 80012b4:	4b21      	ldr	r3, [pc, #132]	; (800133c <I2C_ApplicationEventCallback+0xc0>)
 80012b6:	22ff      	movs	r2, #255	; 0xff
 80012b8:	701a      	strb	r2, [r3, #0]
	{
		//Master has sent command code, read it
		 CommandCode = I2C_SlaveReceiveData(I2C1);

	}
}
 80012ba:	e03b      	b.n	8001334 <I2C_ApplicationEventCallback+0xb8>
	}else if (AppEvent == I2C_EV_STOP)
 80012bc:	78fb      	ldrb	r3, [r7, #3]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d103      	bne.n	80012ca <I2C_ApplicationEventCallback+0x4e>
		cnt = 0;
 80012c2:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <I2C_ApplicationEventCallback+0xc4>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
}
 80012c8:	e034      	b.n	8001334 <I2C_ApplicationEventCallback+0xb8>
	}else if (AppEvent == I2C_EV_DATA_REQ)
 80012ca:	78fb      	ldrb	r3, [r7, #3]
 80012cc:	2b08      	cmp	r3, #8
 80012ce:	d127      	bne.n	8001320 <I2C_ApplicationEventCallback+0xa4>
		if(CommandCode == 0x51)
 80012d0:	4b1a      	ldr	r3, [pc, #104]	; (800133c <I2C_ApplicationEventCallback+0xc0>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b51      	cmp	r3, #81	; 0x51
 80012d6:	d113      	bne.n	8001300 <I2C_ApplicationEventCallback+0x84>
			I2C_SlaveSendData(I2C1,((data_len >> ((cnt%4) * 8)) & 0xFF));
 80012d8:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <I2C_ApplicationEventCallback+0xcc>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b18      	ldr	r3, [pc, #96]	; (8001340 <I2C_ApplicationEventCallback+0xc4>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	fa22 f303 	lsr.w	r3, r2, r3
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	4619      	mov	r1, r3
 80012ee:	4817      	ldr	r0, [pc, #92]	; (800134c <I2C_ApplicationEventCallback+0xd0>)
 80012f0:	f7ff fd37 	bl	8000d62 <I2C_SlaveSendData>
			cnt++;
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <I2C_ApplicationEventCallback+0xc4>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	3301      	adds	r3, #1
 80012fa:	4a11      	ldr	r2, [pc, #68]	; (8001340 <I2C_ApplicationEventCallback+0xc4>)
 80012fc:	6013      	str	r3, [r2, #0]
}
 80012fe:	e019      	b.n	8001334 <I2C_ApplicationEventCallback+0xb8>
		}else if (CommandCode == 0x52)
 8001300:	4b0e      	ldr	r3, [pc, #56]	; (800133c <I2C_ApplicationEventCallback+0xc0>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b52      	cmp	r3, #82	; 0x52
 8001306:	d115      	bne.n	8001334 <I2C_ApplicationEventCallback+0xb8>
			I2C_SlaveSendData(I2C1,Tx_buf[w_ptr++]);
 8001308:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <I2C_ApplicationEventCallback+0xc8>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	1c5a      	adds	r2, r3, #1
 800130e:	490d      	ldr	r1, [pc, #52]	; (8001344 <I2C_ApplicationEventCallback+0xc8>)
 8001310:	600a      	str	r2, [r1, #0]
 8001312:	4a0f      	ldr	r2, [pc, #60]	; (8001350 <I2C_ApplicationEventCallback+0xd4>)
 8001314:	5cd3      	ldrb	r3, [r2, r3]
 8001316:	4619      	mov	r1, r3
 8001318:	480c      	ldr	r0, [pc, #48]	; (800134c <I2C_ApplicationEventCallback+0xd0>)
 800131a:	f7ff fd22 	bl	8000d62 <I2C_SlaveSendData>
}
 800131e:	e009      	b.n	8001334 <I2C_ApplicationEventCallback+0xb8>
	}else if (AppEvent == I2C_EV_DATA_RCV)
 8001320:	78fb      	ldrb	r3, [r7, #3]
 8001322:	2b09      	cmp	r3, #9
 8001324:	d106      	bne.n	8001334 <I2C_ApplicationEventCallback+0xb8>
		 CommandCode = I2C_SlaveReceiveData(I2C1);
 8001326:	4809      	ldr	r0, [pc, #36]	; (800134c <I2C_ApplicationEventCallback+0xd0>)
 8001328:	f7ff fd29 	bl	8000d7e <I2C_SlaveReceiveData>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	4b02      	ldr	r3, [pc, #8]	; (800133c <I2C_ApplicationEventCallback+0xc0>)
 8001332:	701a      	strb	r2, [r3, #0]
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200001f8 	.word	0x200001f8
 8001340:	200001fc 	.word	0x200001fc
 8001344:	20000200 	.word	0x20000200
 8001348:	200001f4 	.word	0x200001f4
 800134c:	40005400 	.word	0x40005400
 8001350:	20000018 	.word	0x20000018

08001354 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001354:	480d      	ldr	r0, [pc, #52]	; (800138c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001356:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001358:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800135c:	480c      	ldr	r0, [pc, #48]	; (8001390 <LoopForever+0x6>)
  ldr r1, =_edata
 800135e:	490d      	ldr	r1, [pc, #52]	; (8001394 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001360:	4a0d      	ldr	r2, [pc, #52]	; (8001398 <LoopForever+0xe>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001364:	e002      	b.n	800136c <LoopCopyDataInit>

08001366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136a:	3304      	adds	r3, #4

0800136c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800136c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001370:	d3f9      	bcc.n	8001366 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001372:	4a0a      	ldr	r2, [pc, #40]	; (800139c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001374:	4c0a      	ldr	r4, [pc, #40]	; (80013a0 <LoopForever+0x16>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001378:	e001      	b.n	800137e <LoopFillZerobss>

0800137a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800137c:	3204      	adds	r2, #4

0800137e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001380:	d3fb      	bcc.n	800137a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001382:	f000 f811 	bl	80013a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001386:	f7ff ff3b 	bl	8001200 <main>

0800138a <LoopForever>:

LoopForever:
  b LoopForever
 800138a:	e7fe      	b.n	800138a <LoopForever>
  ldr   r0, =_estack
 800138c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001394:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 8001398:	08001410 	.word	0x08001410
  ldr r2, =_sbss
 800139c:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 80013a0:	20000204 	.word	0x20000204

080013a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013a4:	e7fe      	b.n	80013a4 <ADC_IRQHandler>
	...

080013a8 <__libc_init_array>:
 80013a8:	b570      	push	{r4, r5, r6, lr}
 80013aa:	4d0d      	ldr	r5, [pc, #52]	; (80013e0 <__libc_init_array+0x38>)
 80013ac:	4c0d      	ldr	r4, [pc, #52]	; (80013e4 <__libc_init_array+0x3c>)
 80013ae:	1b64      	subs	r4, r4, r5
 80013b0:	10a4      	asrs	r4, r4, #2
 80013b2:	2600      	movs	r6, #0
 80013b4:	42a6      	cmp	r6, r4
 80013b6:	d109      	bne.n	80013cc <__libc_init_array+0x24>
 80013b8:	4d0b      	ldr	r5, [pc, #44]	; (80013e8 <__libc_init_array+0x40>)
 80013ba:	4c0c      	ldr	r4, [pc, #48]	; (80013ec <__libc_init_array+0x44>)
 80013bc:	f000 f818 	bl	80013f0 <_init>
 80013c0:	1b64      	subs	r4, r4, r5
 80013c2:	10a4      	asrs	r4, r4, #2
 80013c4:	2600      	movs	r6, #0
 80013c6:	42a6      	cmp	r6, r4
 80013c8:	d105      	bne.n	80013d6 <__libc_init_array+0x2e>
 80013ca:	bd70      	pop	{r4, r5, r6, pc}
 80013cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80013d0:	4798      	blx	r3
 80013d2:	3601      	adds	r6, #1
 80013d4:	e7ee      	b.n	80013b4 <__libc_init_array+0xc>
 80013d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80013da:	4798      	blx	r3
 80013dc:	3601      	adds	r6, #1
 80013de:	e7f2      	b.n	80013c6 <__libc_init_array+0x1e>
 80013e0:	08001408 	.word	0x08001408
 80013e4:	08001408 	.word	0x08001408
 80013e8:	08001408 	.word	0x08001408
 80013ec:	0800140c 	.word	0x0800140c

080013f0 <_init>:
 80013f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013f2:	bf00      	nop
 80013f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013f6:	bc08      	pop	{r3}
 80013f8:	469e      	mov	lr, r3
 80013fa:	4770      	bx	lr

080013fc <_fini>:
 80013fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013fe:	bf00      	nop
 8001400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001402:	bc08      	pop	{r3}
 8001404:	469e      	mov	lr, r3
 8001406:	4770      	bx	lr


008_stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000db4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f78  08000f78  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f78  08000f78  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08000f78  08000f78  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f78  08000f78  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f78  08000f78  00010f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f7c  08000f7c  00010f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08000f80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000018  08000f98  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000f98  00020060  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000133d  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004b3  00000000  00000000  000213c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000168  00000000  00000000  00021878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000105  00000000  00000000  000219e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000024ab  00000000  00000000  00021ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000188d  00000000  00000000  00023f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009b86  00000000  00000000  0002581d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000508  00000000  00000000  0002f3a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0002f8ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000018 	.word	0x20000018
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000f60 	.word	0x08000f60

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	08000f60 	.word	0x08000f60

08000204 <GPIO_PeriClockControl>:
 * @return            -  void
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi){
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	460b      	mov	r3, r1
 800020e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){ // Enable
 8000210:	78fb      	ldrb	r3, [r7, #3]
 8000212:	2b01      	cmp	r3, #1
 8000214:	d157      	bne.n	80002c6 <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA){
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a59      	ldr	r2, [pc, #356]	; (8000380 <GPIO_PeriClockControl+0x17c>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d106      	bne.n	800022c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800021e:	4b59      	ldr	r3, [pc, #356]	; (8000384 <GPIO_PeriClockControl+0x180>)
 8000220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000222:	4a58      	ldr	r2, [pc, #352]	; (8000384 <GPIO_PeriClockControl+0x180>)
 8000224:	f043 0301 	orr.w	r3, r3, #1
 8000228:	6313      	str	r3, [r2, #48]	; 0x30
		}else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}

}
 800022a:	e0a3      	b.n	8000374 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB){
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a56      	ldr	r2, [pc, #344]	; (8000388 <GPIO_PeriClockControl+0x184>)
 8000230:	4293      	cmp	r3, r2
 8000232:	d106      	bne.n	8000242 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000234:	4b53      	ldr	r3, [pc, #332]	; (8000384 <GPIO_PeriClockControl+0x180>)
 8000236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000238:	4a52      	ldr	r2, [pc, #328]	; (8000384 <GPIO_PeriClockControl+0x180>)
 800023a:	f043 0302 	orr.w	r3, r3, #2
 800023e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000240:	e098      	b.n	8000374 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC){
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4a51      	ldr	r2, [pc, #324]	; (800038c <GPIO_PeriClockControl+0x188>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d106      	bne.n	8000258 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800024a:	4b4e      	ldr	r3, [pc, #312]	; (8000384 <GPIO_PeriClockControl+0x180>)
 800024c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024e:	4a4d      	ldr	r2, [pc, #308]	; (8000384 <GPIO_PeriClockControl+0x180>)
 8000250:	f043 0304 	orr.w	r3, r3, #4
 8000254:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000256:	e08d      	b.n	8000374 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOD){
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a4d      	ldr	r2, [pc, #308]	; (8000390 <GPIO_PeriClockControl+0x18c>)
 800025c:	4293      	cmp	r3, r2
 800025e:	d106      	bne.n	800026e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000260:	4b48      	ldr	r3, [pc, #288]	; (8000384 <GPIO_PeriClockControl+0x180>)
 8000262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000264:	4a47      	ldr	r2, [pc, #284]	; (8000384 <GPIO_PeriClockControl+0x180>)
 8000266:	f043 0308 	orr.w	r3, r3, #8
 800026a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800026c:	e082      	b.n	8000374 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE){
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4a48      	ldr	r2, [pc, #288]	; (8000394 <GPIO_PeriClockControl+0x190>)
 8000272:	4293      	cmp	r3, r2
 8000274:	d106      	bne.n	8000284 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000276:	4b43      	ldr	r3, [pc, #268]	; (8000384 <GPIO_PeriClockControl+0x180>)
 8000278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800027a:	4a42      	ldr	r2, [pc, #264]	; (8000384 <GPIO_PeriClockControl+0x180>)
 800027c:	f043 0310 	orr.w	r3, r3, #16
 8000280:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000282:	e077      	b.n	8000374 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF){
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4a44      	ldr	r2, [pc, #272]	; (8000398 <GPIO_PeriClockControl+0x194>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d106      	bne.n	800029a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800028c:	4b3d      	ldr	r3, [pc, #244]	; (8000384 <GPIO_PeriClockControl+0x180>)
 800028e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000290:	4a3c      	ldr	r2, [pc, #240]	; (8000384 <GPIO_PeriClockControl+0x180>)
 8000292:	f043 0320 	orr.w	r3, r3, #32
 8000296:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000298:	e06c      	b.n	8000374 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOG){
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4a3f      	ldr	r2, [pc, #252]	; (800039c <GPIO_PeriClockControl+0x198>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	d106      	bne.n	80002b0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80002a2:	4b38      	ldr	r3, [pc, #224]	; (8000384 <GPIO_PeriClockControl+0x180>)
 80002a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a6:	4a37      	ldr	r2, [pc, #220]	; (8000384 <GPIO_PeriClockControl+0x180>)
 80002a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ae:	e061      	b.n	8000374 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOH){
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	4a3b      	ldr	r2, [pc, #236]	; (80003a0 <GPIO_PeriClockControl+0x19c>)
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d15d      	bne.n	8000374 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 80002b8:	4b32      	ldr	r3, [pc, #200]	; (8000384 <GPIO_PeriClockControl+0x180>)
 80002ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002bc:	4a31      	ldr	r2, [pc, #196]	; (8000384 <GPIO_PeriClockControl+0x180>)
 80002be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002c4:	e056      	b.n	8000374 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA){
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4a2d      	ldr	r2, [pc, #180]	; (8000380 <GPIO_PeriClockControl+0x17c>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d106      	bne.n	80002dc <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 80002ce:	4b2d      	ldr	r3, [pc, #180]	; (8000384 <GPIO_PeriClockControl+0x180>)
 80002d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d2:	4a2c      	ldr	r2, [pc, #176]	; (8000384 <GPIO_PeriClockControl+0x180>)
 80002d4:	f023 0301 	bic.w	r3, r3, #1
 80002d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002da:	e04b      	b.n	8000374 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB){
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a2a      	ldr	r2, [pc, #168]	; (8000388 <GPIO_PeriClockControl+0x184>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d106      	bne.n	80002f2 <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 80002e4:	4b27      	ldr	r3, [pc, #156]	; (8000384 <GPIO_PeriClockControl+0x180>)
 80002e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e8:	4a26      	ldr	r2, [pc, #152]	; (8000384 <GPIO_PeriClockControl+0x180>)
 80002ea:	f023 0302 	bic.w	r3, r3, #2
 80002ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f0:	e040      	b.n	8000374 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC){
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4a25      	ldr	r2, [pc, #148]	; (800038c <GPIO_PeriClockControl+0x188>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d106      	bne.n	8000308 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 80002fa:	4b22      	ldr	r3, [pc, #136]	; (8000384 <GPIO_PeriClockControl+0x180>)
 80002fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fe:	4a21      	ldr	r2, [pc, #132]	; (8000384 <GPIO_PeriClockControl+0x180>)
 8000300:	f023 0304 	bic.w	r3, r3, #4
 8000304:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000306:	e035      	b.n	8000374 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOD){
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4a21      	ldr	r2, [pc, #132]	; (8000390 <GPIO_PeriClockControl+0x18c>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d106      	bne.n	800031e <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 8000310:	4b1c      	ldr	r3, [pc, #112]	; (8000384 <GPIO_PeriClockControl+0x180>)
 8000312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000314:	4a1b      	ldr	r2, [pc, #108]	; (8000384 <GPIO_PeriClockControl+0x180>)
 8000316:	f023 0308 	bic.w	r3, r3, #8
 800031a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800031c:	e02a      	b.n	8000374 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE){
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a1c      	ldr	r2, [pc, #112]	; (8000394 <GPIO_PeriClockControl+0x190>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d106      	bne.n	8000334 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 8000326:	4b17      	ldr	r3, [pc, #92]	; (8000384 <GPIO_PeriClockControl+0x180>)
 8000328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032a:	4a16      	ldr	r2, [pc, #88]	; (8000384 <GPIO_PeriClockControl+0x180>)
 800032c:	f023 0310 	bic.w	r3, r3, #16
 8000330:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000332:	e01f      	b.n	8000374 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF){
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4a18      	ldr	r2, [pc, #96]	; (8000398 <GPIO_PeriClockControl+0x194>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d106      	bne.n	800034a <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 800033c:	4b11      	ldr	r3, [pc, #68]	; (8000384 <GPIO_PeriClockControl+0x180>)
 800033e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000340:	4a10      	ldr	r2, [pc, #64]	; (8000384 <GPIO_PeriClockControl+0x180>)
 8000342:	f023 0320 	bic.w	r3, r3, #32
 8000346:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000348:	e014      	b.n	8000374 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOG){
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4a13      	ldr	r2, [pc, #76]	; (800039c <GPIO_PeriClockControl+0x198>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d106      	bne.n	8000360 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8000352:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <GPIO_PeriClockControl+0x180>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000356:	4a0b      	ldr	r2, [pc, #44]	; (8000384 <GPIO_PeriClockControl+0x180>)
 8000358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800035c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800035e:	e009      	b.n	8000374 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOH){
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4a0f      	ldr	r2, [pc, #60]	; (80003a0 <GPIO_PeriClockControl+0x19c>)
 8000364:	4293      	cmp	r3, r2
 8000366:	d105      	bne.n	8000374 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <GPIO_PeriClockControl+0x180>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036c:	4a05      	ldr	r2, [pc, #20]	; (8000384 <GPIO_PeriClockControl+0x180>)
 800036e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000372:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	bc80      	pop	{r7}
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	40020000 	.word	0x40020000
 8000384:	40023800 	.word	0x40023800
 8000388:	40020400 	.word	0x40020400
 800038c:	40020800 	.word	0x40020800
 8000390:	40020c00 	.word	0x40020c00
 8000394:	40021000 	.word	0x40021000
 8000398:	40021400 	.word	0x40021400
 800039c:	40021800 	.word	0x40021800
 80003a0:	40021c00 	.word	0x40021c00

080003a4 <GPIO_Init>:


/*
 * Initialize and De-Initialize
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]

	// Enable Peripheral Clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2101      	movs	r1, #1
 80003b2:	4618      	mov	r0, r3
 80003b4:	f7ff ff26 	bl	8000204 <GPIO_PeriClockControl>

	uint32_t temp = 0; // Temporary Register
 80003b8:	2300      	movs	r3, #0
 80003ba:	60fb      	str	r3, [r7, #12]

	// 1. Configure Mode of GPIO Pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	795b      	ldrb	r3, [r3, #5]
 80003c0:	2b03      	cmp	r3, #3
 80003c2:	d821      	bhi.n	8000408 <GPIO_Init+0x64>
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	795b      	ldrb	r3, [r3, #5]
 80003c8:	461a      	mov	r2, r3
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	791b      	ldrb	r3, [r3, #4]
 80003ce:	005b      	lsls	r3, r3, #1
 80003d0:	fa02 f303 	lsl.w	r3, r2, r3
 80003d4:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	681a      	ldr	r2, [r3, #0]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	791b      	ldrb	r3, [r3, #4]
 80003e0:	4619      	mov	r1, r3
 80003e2:	2303      	movs	r3, #3
 80003e4:	408b      	lsls	r3, r1
 80003e6:	43db      	mvns	r3, r3
 80003e8:	4619      	mov	r1, r3
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	400a      	ands	r2, r1
 80003f0:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // Set
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	6819      	ldr	r1, [r3, #0]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	68fa      	ldr	r2, [r7, #12]
 80003fe:	430a      	orrs	r2, r1
 8000400:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000402:	2300      	movs	r3, #0
 8000404:	60fb      	str	r3, [r7, #12]
 8000406:	e0b8      	b.n	800057a <GPIO_Init+0x1d6>
	}else{
		// TODO: Interrupt Mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	795b      	ldrb	r3, [r3, #5]
 800040c:	2b04      	cmp	r3, #4
 800040e:	d117      	bne.n	8000440 <GPIO_Init+0x9c>
			// Configure the Falling Trigger Selection Register
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000410:	4b43      	ldr	r3, [pc, #268]	; (8000520 <GPIO_Init+0x17c>)
 8000412:	68db      	ldr	r3, [r3, #12]
 8000414:	687a      	ldr	r2, [r7, #4]
 8000416:	7912      	ldrb	r2, [r2, #4]
 8000418:	4611      	mov	r1, r2
 800041a:	2201      	movs	r2, #1
 800041c:	408a      	lsls	r2, r1
 800041e:	4611      	mov	r1, r2
 8000420:	4a3f      	ldr	r2, [pc, #252]	; (8000520 <GPIO_Init+0x17c>)
 8000422:	430b      	orrs	r3, r1
 8000424:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear RTSR
 8000426:	4b3e      	ldr	r3, [pc, #248]	; (8000520 <GPIO_Init+0x17c>)
 8000428:	689b      	ldr	r3, [r3, #8]
 800042a:	687a      	ldr	r2, [r7, #4]
 800042c:	7912      	ldrb	r2, [r2, #4]
 800042e:	4611      	mov	r1, r2
 8000430:	2201      	movs	r2, #1
 8000432:	408a      	lsls	r2, r1
 8000434:	43d2      	mvns	r2, r2
 8000436:	4611      	mov	r1, r2
 8000438:	4a39      	ldr	r2, [pc, #228]	; (8000520 <GPIO_Init+0x17c>)
 800043a:	400b      	ands	r3, r1
 800043c:	6093      	str	r3, [r2, #8]
 800043e:	e035      	b.n	80004ac <GPIO_Init+0x108>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	795b      	ldrb	r3, [r3, #5]
 8000444:	2b05      	cmp	r3, #5
 8000446:	d117      	bne.n	8000478 <GPIO_Init+0xd4>
			// Configure the Rising Trigger Selection Register
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000448:	4b35      	ldr	r3, [pc, #212]	; (8000520 <GPIO_Init+0x17c>)
 800044a:	689b      	ldr	r3, [r3, #8]
 800044c:	687a      	ldr	r2, [r7, #4]
 800044e:	7912      	ldrb	r2, [r2, #4]
 8000450:	4611      	mov	r1, r2
 8000452:	2201      	movs	r2, #1
 8000454:	408a      	lsls	r2, r1
 8000456:	4611      	mov	r1, r2
 8000458:	4a31      	ldr	r2, [pc, #196]	; (8000520 <GPIO_Init+0x17c>)
 800045a:	430b      	orrs	r3, r1
 800045c:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear FTSR
 800045e:	4b30      	ldr	r3, [pc, #192]	; (8000520 <GPIO_Init+0x17c>)
 8000460:	68db      	ldr	r3, [r3, #12]
 8000462:	687a      	ldr	r2, [r7, #4]
 8000464:	7912      	ldrb	r2, [r2, #4]
 8000466:	4611      	mov	r1, r2
 8000468:	2201      	movs	r2, #1
 800046a:	408a      	lsls	r2, r1
 800046c:	43d2      	mvns	r2, r2
 800046e:	4611      	mov	r1, r2
 8000470:	4a2b      	ldr	r2, [pc, #172]	; (8000520 <GPIO_Init+0x17c>)
 8000472:	400b      	ands	r3, r1
 8000474:	60d3      	str	r3, [r2, #12]
 8000476:	e019      	b.n	80004ac <GPIO_Init+0x108>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	795b      	ldrb	r3, [r3, #5]
 800047c:	2b06      	cmp	r3, #6
 800047e:	d115      	bne.n	80004ac <GPIO_Init+0x108>
			// Configure Both Falling and Rising
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000480:	4b27      	ldr	r3, [pc, #156]	; (8000520 <GPIO_Init+0x17c>)
 8000482:	68db      	ldr	r3, [r3, #12]
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	7912      	ldrb	r2, [r2, #4]
 8000488:	4611      	mov	r1, r2
 800048a:	2201      	movs	r2, #1
 800048c:	408a      	lsls	r2, r1
 800048e:	4611      	mov	r1, r2
 8000490:	4a23      	ldr	r2, [pc, #140]	; (8000520 <GPIO_Init+0x17c>)
 8000492:	430b      	orrs	r3, r1
 8000494:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000496:	4b22      	ldr	r3, [pc, #136]	; (8000520 <GPIO_Init+0x17c>)
 8000498:	689b      	ldr	r3, [r3, #8]
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	7912      	ldrb	r2, [r2, #4]
 800049e:	4611      	mov	r1, r2
 80004a0:	2201      	movs	r2, #1
 80004a2:	408a      	lsls	r2, r1
 80004a4:	4611      	mov	r1, r2
 80004a6:	4a1e      	ldr	r2, [pc, #120]	; (8000520 <GPIO_Init+0x17c>)
 80004a8:	430b      	orrs	r3, r1
 80004aa:	6093      	str	r3, [r2, #8]
		}

		// Configure the GPIO port Selection in SYSCFG_EXTICR
		uint8_t ExtiCR_Number = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	791b      	ldrb	r3, [r3, #4]
 80004b0:	089b      	lsrs	r3, r3, #2
 80004b2:	72fb      	strb	r3, [r7, #11]
		uint8_t ExtiCR_ShiftOffset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	791b      	ldrb	r3, [r3, #4]
 80004b8:	f003 0303 	and.w	r3, r3, #3
 80004bc:	72bb      	strb	r3, [r7, #10]
		uint8_t portcode = GPIO_BASEADDR_TO_PORTCODE(pGPIOHandle->pGPIOx);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a18      	ldr	r2, [pc, #96]	; (8000524 <GPIO_Init+0x180>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d03b      	beq.n	8000540 <GPIO_Init+0x19c>
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a16      	ldr	r2, [pc, #88]	; (8000528 <GPIO_Init+0x184>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d024      	beq.n	800051c <GPIO_Init+0x178>
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a15      	ldr	r2, [pc, #84]	; (800052c <GPIO_Init+0x188>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d01d      	beq.n	8000518 <GPIO_Init+0x174>
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a13      	ldr	r2, [pc, #76]	; (8000530 <GPIO_Init+0x18c>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d016      	beq.n	8000514 <GPIO_Init+0x170>
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a12      	ldr	r2, [pc, #72]	; (8000534 <GPIO_Init+0x190>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d00f      	beq.n	8000510 <GPIO_Init+0x16c>
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a10      	ldr	r2, [pc, #64]	; (8000538 <GPIO_Init+0x194>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d008      	beq.n	800050c <GPIO_Init+0x168>
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a0f      	ldr	r2, [pc, #60]	; (800053c <GPIO_Init+0x198>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d101      	bne.n	8000508 <GPIO_Init+0x164>
 8000504:	2306      	movs	r3, #6
 8000506:	e01c      	b.n	8000542 <GPIO_Init+0x19e>
 8000508:	2300      	movs	r3, #0
 800050a:	e01a      	b.n	8000542 <GPIO_Init+0x19e>
 800050c:	2305      	movs	r3, #5
 800050e:	e018      	b.n	8000542 <GPIO_Init+0x19e>
 8000510:	2304      	movs	r3, #4
 8000512:	e016      	b.n	8000542 <GPIO_Init+0x19e>
 8000514:	2303      	movs	r3, #3
 8000516:	e014      	b.n	8000542 <GPIO_Init+0x19e>
 8000518:	2302      	movs	r3, #2
 800051a:	e012      	b.n	8000542 <GPIO_Init+0x19e>
 800051c:	2301      	movs	r3, #1
 800051e:	e010      	b.n	8000542 <GPIO_Init+0x19e>
 8000520:	40013c00 	.word	0x40013c00
 8000524:	40020000 	.word	0x40020000
 8000528:	40020400 	.word	0x40020400
 800052c:	40020800 	.word	0x40020800
 8000530:	40020c00 	.word	0x40020c00
 8000534:	40021000 	.word	0x40021000
 8000538:	40021400 	.word	0x40021400
 800053c:	40021800 	.word	0x40021800
 8000540:	2300      	movs	r3, #0
 8000542:	727b      	strb	r3, [r7, #9]
		SYSCFG_PCLK_EN();
 8000544:	4b6a      	ldr	r3, [pc, #424]	; (80006f0 <GPIO_Init+0x34c>)
 8000546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000548:	4a69      	ldr	r2, [pc, #420]	; (80006f0 <GPIO_Init+0x34c>)
 800054a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[ExtiCR_Number] = portcode << (ExtiCR_ShiftOffset * 4);
 8000550:	7a7a      	ldrb	r2, [r7, #9]
 8000552:	7abb      	ldrb	r3, [r7, #10]
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	fa02 f103 	lsl.w	r1, r2, r3
 800055a:	4a66      	ldr	r2, [pc, #408]	; (80006f4 <GPIO_Init+0x350>)
 800055c:	7afb      	ldrb	r3, [r7, #11]
 800055e:	3302      	adds	r3, #2
 8000560:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000564:	4b64      	ldr	r3, [pc, #400]	; (80006f8 <GPIO_Init+0x354>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	687a      	ldr	r2, [r7, #4]
 800056a:	7912      	ldrb	r2, [r2, #4]
 800056c:	4611      	mov	r1, r2
 800056e:	2201      	movs	r2, #1
 8000570:	408a      	lsls	r2, r1
 8000572:	4611      	mov	r1, r2
 8000574:	4a60      	ldr	r2, [pc, #384]	; (80006f8 <GPIO_Init+0x354>)
 8000576:	430b      	orrs	r3, r1
 8000578:	6013      	str	r3, [r2, #0]
	}

	// 2. Configure Speed
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	799b      	ldrb	r3, [r3, #6]
 800057e:	461a      	mov	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	791b      	ldrb	r3, [r3, #4]
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	fa02 f303 	lsl.w	r3, r2, r3
 800058a:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	689a      	ldr	r2, [r3, #8]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	791b      	ldrb	r3, [r3, #4]
 8000596:	4619      	mov	r1, r3
 8000598:	2303      	movs	r3, #3
 800059a:	408b      	lsls	r3, r1
 800059c:	43db      	mvns	r3, r3
 800059e:	4619      	mov	r1, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	400a      	ands	r2, r1
 80005a6:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	6899      	ldr	r1, [r3, #8]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	430a      	orrs	r2, r1
 80005b6:	609a      	str	r2, [r3, #8]
	temp = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]

	// 3. Configure Pull-up Pull-down Settings
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	79db      	ldrb	r3, [r3, #7]
 80005c0:	461a      	mov	r2, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	791b      	ldrb	r3, [r3, #4]
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	fa02 f303 	lsl.w	r3, r2, r3
 80005cc:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	68da      	ldr	r2, [r3, #12]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	791b      	ldrb	r3, [r3, #4]
 80005d8:	4619      	mov	r1, r3
 80005da:	2303      	movs	r3, #3
 80005dc:	408b      	lsls	r3, r1
 80005de:	43db      	mvns	r3, r3
 80005e0:	4619      	mov	r1, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	400a      	ands	r2, r1
 80005e8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	68d9      	ldr	r1, [r3, #12]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	68fa      	ldr	r2, [r7, #12]
 80005f6:	430a      	orrs	r2, r1
 80005f8:	60da      	str	r2, [r3, #12]
	temp = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]

	// 4. Configure the Output Type
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	7a1b      	ldrb	r3, [r3, #8]
 8000602:	461a      	mov	r2, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	791b      	ldrb	r3, [r3, #4]
 8000608:	fa02 f303 	lsl.w	r3, r2, r3
 800060c:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	685a      	ldr	r2, [r3, #4]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	791b      	ldrb	r3, [r3, #4]
 8000618:	4619      	mov	r1, r3
 800061a:	2301      	movs	r3, #1
 800061c:	408b      	lsls	r3, r1
 800061e:	43db      	mvns	r3, r3
 8000620:	4619      	mov	r1, r3
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	400a      	ands	r2, r1
 8000628:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	6859      	ldr	r1, [r3, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	68fa      	ldr	r2, [r7, #12]
 8000636:	430a      	orrs	r2, r1
 8000638:	605a      	str	r2, [r3, #4]
	temp = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]

	// 5. Configure Alternate Functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFUN){
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	795b      	ldrb	r3, [r3, #5]
 8000642:	2b02      	cmp	r3, #2
 8000644:	d150      	bne.n	80006e8 <GPIO_Init+0x344>
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= GPIO_PIN_NO_7){
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	791b      	ldrb	r3, [r3, #4]
 800064a:	2b07      	cmp	r3, #7
 800064c:	d826      	bhi.n	800069c <GPIO_Init+0x2f8>
				// AFRL Registers
				temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	7a5b      	ldrb	r3, [r3, #9]
 8000652:	461a      	mov	r2, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	791b      	ldrb	r3, [r3, #4]
 8000658:	f003 0307 	and.w	r3, r3, #7
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	fa02 f303 	lsl.w	r3, r2, r3
 8000662:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->AFRL &= ~(0xF << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8))); // Clear
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	6a1a      	ldr	r2, [r3, #32]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	791b      	ldrb	r3, [r3, #4]
 800066e:	f003 0307 	and.w	r3, r3, #7
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	210f      	movs	r1, #15
 8000676:	fa01 f303 	lsl.w	r3, r1, r3
 800067a:	43db      	mvns	r3, r3
 800067c:	4619      	mov	r1, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	400a      	ands	r2, r1
 8000684:	621a      	str	r2, [r3, #32]
				pGPIOHandle->pGPIOx->AFRL |= temp;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	6a19      	ldr	r1, [r3, #32]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	68fa      	ldr	r2, [r7, #12]
 8000692:	430a      	orrs	r2, r1
 8000694:	621a      	str	r2, [r3, #32]
				temp = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->AFRH |= temp;
				temp = 0;
			}
	}

}
 800069a:	e025      	b.n	80006e8 <GPIO_Init+0x344>
				temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	7a5b      	ldrb	r3, [r3, #9]
 80006a0:	461a      	mov	r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	791b      	ldrb	r3, [r3, #4]
 80006a6:	f003 0307 	and.w	r3, r3, #7
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	fa02 f303 	lsl.w	r3, r2, r3
 80006b0:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->AFRH &= ~(0xF << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8))); // Clear
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	791b      	ldrb	r3, [r3, #4]
 80006bc:	f003 0307 	and.w	r3, r3, #7
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	210f      	movs	r1, #15
 80006c4:	fa01 f303 	lsl.w	r3, r1, r3
 80006c8:	43db      	mvns	r3, r3
 80006ca:	4619      	mov	r1, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	400a      	ands	r2, r1
 80006d2:	625a      	str	r2, [r3, #36]	; 0x24
				pGPIOHandle->pGPIOx->AFRH |= temp;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	68fa      	ldr	r2, [r7, #12]
 80006e0:	430a      	orrs	r2, r1
 80006e2:	625a      	str	r2, [r3, #36]	; 0x24
				temp = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
}
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40013800 	.word	0x40013800
 80006f8:	40013c00 	.word	0x40013c00

080006fc <GPIO_ReadFromInputPin>:


/*
 * Data Read and Write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	460b      	mov	r3, r1
 8000706:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	691a      	ldr	r2, [r3, #16]
 800070c:	78fb      	ldrb	r3, [r7, #3]
 800070e:	fa22 f303 	lsr.w	r3, r2, r3
 8000712:	b2db      	uxtb	r3, r3
 8000714:	f003 0301 	and.w	r3, r3, #1
 8000718:	73fb      	strb	r3, [r7, #15]
	return value;
 800071a:	7bfb      	ldrb	r3, [r7, #15]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr

08000726 <I2C_GenerateStartCondition>:
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx);
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx);

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 8000726:	b480      	push	{r7}
 8000728:	b083      	sub	sp, #12
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	601a      	str	r2, [r3, #0]
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr

08000744 <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	460b      	mov	r3, r1
 800074e:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000750:	78fb      	ldrb	r3, [r7, #3]
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 8000756:	78fb      	ldrb	r3, [r7, #3]
 8000758:	f023 0301 	bic.w	r3, r3, #1
 800075c:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 800075e:	78fa      	ldrb	r2, [r7, #3]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	611a      	str	r2, [r3, #16]
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr

0800076e <I2C_ExecuteAddressPhaseRead>:


static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 800076e:	b480      	push	{r7}
 8000770:	b083      	sub	sp, #12
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
 8000776:	460b      	mov	r3, r1
 8000778:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 800077a:	78fb      	ldrb	r3, [r7, #3]
 800077c:	005b      	lsls	r3, r3, #1
 800077e:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 8000780:	78fb      	ldrb	r3, [r7, #3]
 8000782:	f043 0301 	orr.w	r3, r3, #1
 8000786:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000788:	78fa      	ldrb	r2, [r7, #3]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	611a      	str	r2, [r3, #16]
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr

08000798 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx){
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead = pI2Cx->SR1;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	695b      	ldr	r3, [r3, #20]
 80007a4:	60fb      	str	r3, [r7, #12]
	dummyRead = pI2Cx->SR2;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	60fb      	str	r3, [r7, #12]
	(void)dummyRead;
}
 80007ac:	bf00      	nop
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr

080007b6 <I2C_GenerateStopCondition>:

static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 80007b6:	b480      	push	{r7}
 80007b8:	b083      	sub	sp, #12
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	601a      	str	r2, [r3, #0]
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr

080007d4 <I2C_PeriClockControl>:


// Peripheral Clock Setup
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 80007e0:	78fb      	ldrb	r3, [r7, #3]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d120      	bne.n	8000828 <I2C_PeriClockControl+0x54>
		// Enable
		if(pI2Cx == I2C1){
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a22      	ldr	r2, [pc, #136]	; (8000874 <I2C_PeriClockControl+0xa0>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d106      	bne.n	80007fc <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 80007ee:	4b22      	ldr	r3, [pc, #136]	; (8000878 <I2C_PeriClockControl+0xa4>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	4a21      	ldr	r2, [pc, #132]	; (8000878 <I2C_PeriClockControl+0xa4>)
 80007f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007f8:	6413      	str	r3, [r2, #64]	; 0x40
			I2C2_PCLK_DI();
		}else if(pI2Cx == I2C3){
			I2C3_PCLK_DI();
		}
	}
}
 80007fa:	e035      	b.n	8000868 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C2){
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4a1f      	ldr	r2, [pc, #124]	; (800087c <I2C_PeriClockControl+0xa8>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d106      	bne.n	8000812 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000804:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <I2C_PeriClockControl+0xa4>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	4a1b      	ldr	r2, [pc, #108]	; (8000878 <I2C_PeriClockControl+0xa4>)
 800080a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800080e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000810:	e02a      	b.n	8000868 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C3){
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4a1a      	ldr	r2, [pc, #104]	; (8000880 <I2C_PeriClockControl+0xac>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d126      	bne.n	8000868 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <I2C_PeriClockControl+0xa4>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	4a16      	ldr	r2, [pc, #88]	; (8000878 <I2C_PeriClockControl+0xa4>)
 8000820:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000824:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000826:	e01f      	b.n	8000868 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1){
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a12      	ldr	r2, [pc, #72]	; (8000874 <I2C_PeriClockControl+0xa0>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d106      	bne.n	800083e <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <I2C_PeriClockControl+0xa4>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000834:	4a10      	ldr	r2, [pc, #64]	; (8000878 <I2C_PeriClockControl+0xa4>)
 8000836:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800083a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800083c:	e014      	b.n	8000868 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C2){
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a0e      	ldr	r2, [pc, #56]	; (800087c <I2C_PeriClockControl+0xa8>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d106      	bne.n	8000854 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <I2C_PeriClockControl+0xa4>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	4a0b      	ldr	r2, [pc, #44]	; (8000878 <I2C_PeriClockControl+0xa4>)
 800084c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000850:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000852:	e009      	b.n	8000868 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C3){
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <I2C_PeriClockControl+0xac>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d105      	bne.n	8000868 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <I2C_PeriClockControl+0xa4>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000860:	4a05      	ldr	r2, [pc, #20]	; (8000878 <I2C_PeriClockControl+0xa4>)
 8000862:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000866:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	40005400 	.word	0x40005400
 8000878:	40023800 	.word	0x40023800
 800087c:	40005800 	.word	0x40005800
 8000880:	40005c00 	.word	0x40005c00

08000884 <I2C_PeripheralControl>:

// I2C Peripheral Control
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	460b      	mov	r3, r1
 800088e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000890:	78fb      	ldrb	r3, [r7, #3]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d106      	bne.n	80008a4 <I2C_PeripheralControl+0x20>
		// Enable
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f043 0201 	orr.w	r2, r3, #1
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	601a      	str	r2, [r3, #0]
	}else{
		// Disable
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}

}
 80008a2:	e005      	b.n	80008b0 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f023 0201 	bic.w	r2, r3, #1
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	601a      	str	r2, [r3, #0]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr

080008ba <RCC_GetPLLOutputClock>:

// Not implemented, just a placeholder
uint32_t RCC_GetPLLOutputClock(void){
 80008ba:	b480      	push	{r7}
 80008bc:	b083      	sub	sp, #12
 80008be:	af00      	add	r7, sp, #0
	uint32_t temp = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
	return temp;
 80008c4:	687b      	ldr	r3, [r7, #4]
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <RCC_GetPCLK1Value>:

uint16_t AHB_PreScaler[8] = {2, 4, 8, 16, 64, 128, 512};
uint16_t APB1_PreScaler[4] = {2, 4, 8, 16};

uint32_t RCC_GetPCLK1Value(void){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, ahbp, apb1p;
	clksrc = (RCC->CFGR >> 2) & 0x3;
 80008d6:	4b26      	ldr	r3, [pc, #152]	; (8000970 <RCC_GetPCLK1Value+0xa0>)
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	089b      	lsrs	r3, r3, #2
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	f003 0303 	and.w	r3, r3, #3
 80008e2:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0){
 80008e4:	7a7b      	ldrb	r3, [r7, #9]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d102      	bne.n	80008f0 <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 80008ea:	4b22      	ldr	r3, [pc, #136]	; (8000974 <RCC_GetPCLK1Value+0xa4>)
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	e00b      	b.n	8000908 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1){
 80008f0:	7a7b      	ldrb	r3, [r7, #9]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d102      	bne.n	80008fc <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 80008f6:	4b20      	ldr	r3, [pc, #128]	; (8000978 <RCC_GetPCLK1Value+0xa8>)
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	e005      	b.n	8000908 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 2){
 80008fc:	7a7b      	ldrb	r3, [r7, #9]
 80008fe:	2b02      	cmp	r3, #2
 8000900:	d102      	bne.n	8000908 <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 8000902:	f7ff ffda 	bl	80008ba <RCC_GetPLLOutputClock>
 8000906:	60f8      	str	r0, [r7, #12]
	}

	// AHB Pre-scaler
	temp = (RCC->CFGR >> 4) & 0xF;
 8000908:	4b19      	ldr	r3, [pc, #100]	; (8000970 <RCC_GetPCLK1Value+0xa0>)
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	091b      	lsrs	r3, r3, #4
 800090e:	b2db      	uxtb	r3, r3
 8000910:	f003 030f 	and.w	r3, r3, #15
 8000914:	723b      	strb	r3, [r7, #8]
	if(temp < 8){
 8000916:	7a3b      	ldrb	r3, [r7, #8]
 8000918:	2b07      	cmp	r3, #7
 800091a:	d802      	bhi.n	8000922 <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 800091c:	2301      	movs	r3, #1
 800091e:	72fb      	strb	r3, [r7, #11]
 8000920:	e005      	b.n	800092e <RCC_GetPCLK1Value+0x5e>
	}else{
		ahbp = AHB_PreScaler[temp-8];
 8000922:	7a3b      	ldrb	r3, [r7, #8]
 8000924:	3b08      	subs	r3, #8
 8000926:	4a15      	ldr	r2, [pc, #84]	; (800097c <RCC_GetPCLK1Value+0xac>)
 8000928:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800092c:	72fb      	strb	r3, [r7, #11]
	}

	// APB1 Pre-scaler
	temp = (RCC->CFGR >> 10) & 0x7;
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <RCC_GetPCLK1Value+0xa0>)
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	0a9b      	lsrs	r3, r3, #10
 8000934:	b2db      	uxtb	r3, r3
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	723b      	strb	r3, [r7, #8]
	if(temp < 8){
 800093c:	7a3b      	ldrb	r3, [r7, #8]
 800093e:	2b07      	cmp	r3, #7
 8000940:	d802      	bhi.n	8000948 <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 8000942:	2301      	movs	r3, #1
 8000944:	72bb      	strb	r3, [r7, #10]
 8000946:	e005      	b.n	8000954 <RCC_GetPCLK1Value+0x84>
	}else{
		apb1p = APB1_PreScaler[temp-4];
 8000948:	7a3b      	ldrb	r3, [r7, #8]
 800094a:	3b04      	subs	r3, #4
 800094c:	4a0c      	ldr	r2, [pc, #48]	; (8000980 <RCC_GetPCLK1Value+0xb0>)
 800094e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000952:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1p;
 8000954:	7afb      	ldrb	r3, [r7, #11]
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	fbb2 f2f3 	udiv	r2, r2, r3
 800095c:	7abb      	ldrb	r3, [r7, #10]
 800095e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000962:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000964:	687b      	ldr	r3, [r7, #4]
}
 8000966:	4618      	mov	r0, r3
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800
 8000974:	00f42400 	.word	0x00f42400
 8000978:	007a1200 	.word	0x007a1200
 800097c:	20000000 	.word	0x20000000
 8000980:	20000010 	.word	0x20000010

08000984 <I2C_Init>:

void I2C_Init(I2C_Handle_t *pI2C_Handle){
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]

	// Enable the Clock for the I2Cx Peripheral
	I2C_PeriClockControl(pI2C_Handle->pI2Cx, ENABLE);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2101      	movs	r1, #1
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff ff1c 	bl	80007d4 <I2C_PeriClockControl>

	// ACK Control Bit
	tempreg |= pI2C_Handle->I2C_Config.I2C_ACKControl << 10;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	7a5b      	ldrb	r3, [r3, #9]
 80009a0:	029b      	lsls	r3, r3, #10
 80009a2:	461a      	mov	r2, r3
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	4313      	orrs	r3, r2
 80009a8:	60fb      	str	r3, [r7, #12]
	pI2C_Handle->pI2Cx->CR1 = tempreg;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	68fa      	ldr	r2, [r7, #12]
 80009b0:	601a      	str	r2, [r3, #0]

	// Configure the FREQ field of CR2
	tempreg = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
	tempreg |= (RCC_GetPCLK1Value() / 1000000U); // Divide by 1MHz to only get 16 instead of 16MHz
 80009b6:	f7ff ff8b 	bl	80008d0 <RCC_GetPCLK1Value>
 80009ba:	4603      	mov	r3, r0
 80009bc:	4a4e      	ldr	r2, [pc, #312]	; (8000af8 <I2C_Init+0x174>)
 80009be:	fba2 2303 	umull	r2, r3, r2, r3
 80009c2:	0c9b      	lsrs	r3, r3, #18
 80009c4:	68fa      	ldr	r2, [r7, #12]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	60fb      	str	r3, [r7, #12]
	pI2C_Handle->pI2Cx->CR2 = (tempreg & 0x3F);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	68fa      	ldr	r2, [r7, #12]
 80009d0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80009d4:	605a      	str	r2, [r3, #4]

	// Device Own Address
	tempreg |= pI2C_Handle->I2C_Config.I2C_DeviceAddress << 1;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	7a1b      	ldrb	r3, [r3, #8]
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	461a      	mov	r2, r3
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ea:	60fb      	str	r3, [r7, #12]
	pI2C_Handle->pI2Cx->OAR1 |= tempreg;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	6899      	ldr	r1, [r3, #8]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	430a      	orrs	r2, r1
 80009fa:	609a      	str	r2, [r3, #8]

	// Clock Control Calculations
	uint16_t ccr_value = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
	if(pI2C_Handle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	4a3c      	ldr	r2, [pc, #240]	; (8000afc <I2C_Init+0x178>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d813      	bhi.n	8000a36 <I2C_Init+0xb2>
		// Standard Mode
		tempreg &= ~(1 << 15);
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a14:	60fb      	str	r3, [r7, #12]
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2C_Handle->I2C_Config.I2C_SCLSpeed);
 8000a16:	f7ff ff5b 	bl	80008d0 <RCC_GetPCLK1Value>
 8000a1a:	4602      	mov	r2, r0
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a26:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000a28:	897b      	ldrh	r3, [r7, #10]
 8000a2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a2e:	68fa      	ldr	r2, [r7, #12]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	e02d      	b.n	8000a92 <I2C_Init+0x10e>
	}else{
		// Fast Mode
		tempreg |= (1 << 15);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a3c:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2C_Handle->I2C_Config.I2C_FMDutyCycle << 14);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	7a9b      	ldrb	r3, [r3, #10]
 8000a42:	039b      	lsls	r3, r3, #14
 8000a44:	461a      	mov	r2, r3
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	60fb      	str	r3, [r7, #12]
		if(pI2C_Handle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	7a9b      	ldrb	r3, [r3, #10]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d10b      	bne.n	8000a6c <I2C_Init+0xe8>
			ccr_value = RCC_GetPCLK1Value() / (3 * pI2C_Handle->I2C_Config.I2C_SCLSpeed);
 8000a54:	f7ff ff3c 	bl	80008d0 <RCC_GetPCLK1Value>
 8000a58:	4601      	mov	r1, r0
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	685a      	ldr	r2, [r3, #4]
 8000a5e:	4613      	mov	r3, r2
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	4413      	add	r3, r2
 8000a64:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a68:	817b      	strh	r3, [r7, #10]
 8000a6a:	e00c      	b.n	8000a86 <I2C_Init+0x102>
		}else{
			ccr_value = RCC_GetPCLK1Value() / (25 * pI2C_Handle->I2C_Config.I2C_SCLSpeed);
 8000a6c:	f7ff ff30 	bl	80008d0 <RCC_GetPCLK1Value>
 8000a70:	4601      	mov	r1, r0
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685a      	ldr	r2, [r3, #4]
 8000a76:	4613      	mov	r3, r2
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	4413      	add	r3, r2
 8000a7c:	009a      	lsls	r2, r3, #2
 8000a7e:	4413      	add	r3, r2
 8000a80:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a84:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000a86:	897b      	ldrh	r3, [r7, #10]
 8000a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a8c:	68fa      	ldr	r2, [r7, #12]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
	}

	pI2C_Handle->pI2Cx->CCR |= tempreg;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	69d9      	ldr	r1, [r3, #28]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	68fa      	ldr	r2, [r7, #12]
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	61da      	str	r2, [r3, #28]

	// TRISE
	if(pI2C_Handle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	4a15      	ldr	r2, [pc, #84]	; (8000afc <I2C_Init+0x178>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d809      	bhi.n	8000ac0 <I2C_Init+0x13c>
		// Standard Mode
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000aac:	f7ff ff10 	bl	80008d0 <RCC_GetPCLK1Value>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	4a11      	ldr	r2, [pc, #68]	; (8000af8 <I2C_Init+0x174>)
 8000ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab8:	0c9b      	lsrs	r3, r3, #18
 8000aba:	3301      	adds	r3, #1
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	e00d      	b.n	8000adc <I2C_Init+0x158>
	}else{
		// Fast Mode
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 8000ac0:	f7ff ff06 	bl	80008d0 <RCC_GetPCLK1Value>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000aca:	fb02 f303 	mul.w	r3, r2, r3
 8000ace:	0a5b      	lsrs	r3, r3, #9
 8000ad0:	4a0b      	ldr	r2, [pc, #44]	; (8000b00 <I2C_Init+0x17c>)
 8000ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad6:	09db      	lsrs	r3, r3, #7
 8000ad8:	3301      	adds	r3, #1
 8000ada:	60fb      	str	r3, [r7, #12]
	}

	pI2C_Handle->pI2Cx->TRISE |= (tempreg & 0x3F);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	6a19      	ldr	r1, [r3, #32]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	430a      	orrs	r2, r1
 8000aee:	621a      	str	r2, [r3, #32]
}
 8000af0:	bf00      	nop
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	431bde83 	.word	0x431bde83
 8000afc:	000186a0 	.word	0x000186a0
 8000b00:	00044b83 	.word	0x00044b83

08000b04 <I2C_MasterSendData>:
}




void I2C_MasterSendData(I2C_Handle_t *pI2C_Handle, uint8_t *pTxBuffer, uint8_t Length, uint8_t SlaveAddr){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	4611      	mov	r1, r2
 8000b10:	461a      	mov	r2, r3
 8000b12:	460b      	mov	r3, r1
 8000b14:	71fb      	strb	r3, [r7, #7]
 8000b16:	4613      	mov	r3, r2
 8000b18:	71bb      	strb	r3, [r7, #6]
	// 1. Generate the Start Condition
	I2C_GenerateStartCondition(pI2C_Handle->pI2Cx);
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fe01 	bl	8000726 <I2C_GenerateStartCondition>

	// 2. Confirm that start generation is completed by checking the SB Flag in the SR1
	while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_SB));
 8000b24:	bf00      	nop
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f000 f8f8 	bl	8000d22 <I2C_GetFlagStatus>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d0f6      	beq.n	8000b26 <I2C_MasterSendData+0x22>

	// 3. Send the Address of the slave with R/nW bit set to W(0) (total 8 bits)
	I2C_ExecuteAddressPhaseWrite(pI2C_Handle->pI2Cx, SlaveAddr);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	79ba      	ldrb	r2, [r7, #6]
 8000b3e:	4611      	mov	r1, r2
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fdff 	bl	8000744 <I2C_ExecuteAddressPhaseWrite>

	// 4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_ADDR));
 8000b46:	bf00      	nop
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2102      	movs	r1, #2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 f8e7 	bl	8000d22 <I2C_GetFlagStatus>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d0f6      	beq.n	8000b48 <I2C_MasterSendData+0x44>

	// 5. Clear the ADDR Flag according to its software sequence
	I2C_ClearADDRFlag(pI2C_Handle->pI2Cx);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fe1a 	bl	8000798 <I2C_ClearADDRFlag>

	// 6. Send the data until Length becomes 0
	while(Length > 0){
 8000b64:	e014      	b.n	8000b90 <I2C_MasterSendData+0x8c>
		while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_TXE)); // Wait till TXE is set
 8000b66:	bf00      	nop
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2180      	movs	r1, #128	; 0x80
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 f8d7 	bl	8000d22 <I2C_GetFlagStatus>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d0f6      	beq.n	8000b68 <I2C_MasterSendData+0x64>
		pI2C_Handle->pI2Cx->DR = *pTxBuffer;
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	781a      	ldrb	r2, [r3, #0]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	3301      	adds	r3, #1
 8000b88:	60bb      	str	r3, [r7, #8]
		Length--;
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	71fb      	strb	r3, [r7, #7]
	while(Length > 0){
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d1e7      	bne.n	8000b66 <I2C_MasterSendData+0x62>
	}

	// 7. When Length becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_TXE));
 8000b96:	bf00      	nop
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2180      	movs	r1, #128	; 0x80
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 f8bf 	bl	8000d22 <I2C_GetFlagStatus>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d0f6      	beq.n	8000b98 <I2C_MasterSendData+0x94>
	while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_BTF));
 8000baa:	bf00      	nop
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2104      	movs	r1, #4
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 f8b5 	bl	8000d22 <I2C_GetFlagStatus>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d0f6      	beq.n	8000bac <I2C_MasterSendData+0xa8>

	// 8. Generate STOP condition and master need not to wait for the completion of stop condition
	I2C_GenerateStopCondition(pI2C_Handle->pI2Cx);
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fdf7 	bl	80007b6 <I2C_GenerateStopCondition>


}
 8000bc8:	bf00      	nop
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <I2C_MasterReceiveData>:


void I2C_MasterReceiveData(I2C_Handle_t *pI2C_Handle, uint8_t *pRxBuffer, uint8_t Length, uint8_t SlaveAddr){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	4611      	mov	r1, r2
 8000bdc:	461a      	mov	r2, r3
 8000bde:	460b      	mov	r3, r1
 8000be0:	71fb      	strb	r3, [r7, #7]
 8000be2:	4613      	mov	r3, r2
 8000be4:	71bb      	strb	r3, [r7, #6]

	// 1. Generate the Start Condition
	I2C_GenerateStartCondition(pI2C_Handle->pI2Cx);
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fd9b 	bl	8000726 <I2C_GenerateStartCondition>

	// 2. Confirm that start generation is completed by checking the SB Flag in the SR1
	while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_SB));
 8000bf0:	bf00      	nop
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f000 f892 	bl	8000d22 <I2C_GetFlagStatus>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d0f6      	beq.n	8000bf2 <I2C_MasterReceiveData+0x22>

	// 3. Send the Address of the slave with R/nW bit set to R(1) (total 8 bits)
	I2C_ExecuteAddressPhaseRead(pI2C_Handle->pI2Cx, SlaveAddr);
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	79ba      	ldrb	r2, [r7, #6]
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fdae 	bl	800076e <I2C_ExecuteAddressPhaseRead>

	// 4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_ADDR));
 8000c12:	bf00      	nop
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2102      	movs	r1, #2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 f881 	bl	8000d22 <I2C_GetFlagStatus>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d0f6      	beq.n	8000c14 <I2C_MasterReceiveData+0x44>

	// if Reading Length only 1 Byte
	if(Length == 1){
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d11f      	bne.n	8000c6c <I2C_MasterReceiveData+0x9c>
		// Disable ACKing
		I2C_ManageAcking(pI2C_Handle->pI2Cx, I2C_ACK_DISABLE);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f85a 	bl	8000cec <I2C_ManageAcking>

		// Clear the ADDR Flag
		I2C_ClearADDRFlag(pI2C_Handle->pI2Cx);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fdab 	bl	8000798 <I2C_ClearADDRFlag>

		// Wait until RXNE Becomes 1
		while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_RXNE));
 8000c42:	bf00      	nop
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2140      	movs	r1, #64	; 0x40
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 f869 	bl	8000d22 <I2C_GetFlagStatus>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d0f6      	beq.n	8000c44 <I2C_MasterReceiveData+0x74>

		// Generate STOP Condition
		I2C_GenerateStopCondition(pI2C_Handle->pI2Cx);
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fdab 	bl	80007b6 <I2C_GenerateStopCondition>

		// Read Data into Buffer
		*pRxBuffer = pI2C_Handle->pI2Cx->DR;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	691b      	ldr	r3, [r3, #16]
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	701a      	strb	r2, [r3, #0]

	}

	// if Reading Length > 1
	if(Length > 1){
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d92e      	bls.n	8000cd0 <I2C_MasterReceiveData+0x100>
		// Clear the ADDR Flag
		I2C_ClearADDRFlag(pI2C_Handle->pI2Cx);
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fd8e 	bl	8000798 <I2C_ClearADDRFlag>

		// Read the Data until Length becomes zero
		for(uint32_t i = Length; i > 0; i--){
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	e023      	b.n	8000cca <I2C_MasterReceiveData+0xfa>
			// wait for RXNE becomes 1
			while(! I2C_GetFlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_RXNE));
 8000c82:	bf00      	nop
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2140      	movs	r1, #64	; 0x40
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 f849 	bl	8000d22 <I2C_GetFlagStatus>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d0f6      	beq.n	8000c84 <I2C_MasterReceiveData+0xb4>

			// Last 2 Bytes remaining
			if(i == 2){
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d10a      	bne.n	8000cb2 <I2C_MasterReceiveData+0xe2>
				// Clear the ACK bit
				I2C_ManageAcking(pI2C_Handle->pI2Cx, I2C_ACK_DISABLE);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 f822 	bl	8000cec <I2C_ManageAcking>

				// Generate STOP Condition
				I2C_GenerateStopCondition(pI2C_Handle->pI2Cx);
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fd82 	bl	80007b6 <I2C_GenerateStopCondition>
			}

			// Read the Data from the Data Register into Buffer
			*pRxBuffer = pI2C_Handle->pI2Cx->DR;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	691b      	ldr	r3, [r3, #16]
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	701a      	strb	r2, [r3, #0]

			// Increment the Buffer Address
			pRxBuffer++;
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	60bb      	str	r3, [r7, #8]
		for(uint32_t i = Length; i > 0; i--){
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d1d8      	bne.n	8000c82 <I2C_MasterReceiveData+0xb2>

		}
	}

	// Re-Enable ACKing
	if(pI2C_Handle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE){
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	7a5b      	ldrb	r3, [r3, #9]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d105      	bne.n	8000ce4 <I2C_MasterReceiveData+0x114>
		I2C_ManageAcking(pI2C_Handle->pI2Cx, I2C_ACK_ENABLE);
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2101      	movs	r1, #1
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 f804 	bl	8000cec <I2C_ManageAcking>
	}


}
 8000ce4:	bf00      	nop
 8000ce6:	3718      	adds	r7, #24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <I2C_ManageAcking>:


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == I2C_ACK_ENABLE){
 8000cf8:	78fb      	ldrb	r3, [r7, #3]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d106      	bne.n	8000d0c <I2C_ManageAcking+0x20>
		// Enable ACKing
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	601a      	str	r2, [r3, #0]
	}else{
		// Disable ACKing
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 8000d0a:	e005      	b.n	8000d18 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	601a      	str	r2, [r3, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr

08000d22 <I2C_GetFlagStatus>:

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName){
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
 8000d2a:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName){
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	695a      	ldr	r2, [r3, #20]
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	4013      	ands	r3, r2
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <I2C_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e000      	b.n	8000d3e <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <delay>:
I2C_Handle_t I2C1Handle;

// Receive Buffer
uint8_t rcv_buf[32];

void delay(void){
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<500000/2; i++){
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	e002      	b.n	8000d5a <delay+0x12>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3301      	adds	r3, #1
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <delay+0x28>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d9f8      	bls.n	8000d54 <delay+0xc>

	}
}
 8000d62:	bf00      	nop
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	0003d08f 	.word	0x0003d08f

08000d74 <I2C1_GPIOInits>:

void I2C1_GPIOInits(void){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0

	GPIO_Handle_t I2CPins;

	// Common Settings between Pins
	I2CPins.pGPIOx = GPIOB;
 8000d7a:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <I2C1_GPIOInits+0x64>)
 8000d7c:	61fb      	str	r3, [r7, #28]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFUN;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000d84:	2304      	movs	r3, #4
 8000d86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD; // External Pull-UP Used
 8000d90:	2300      	movs	r3, #0
 8000d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000d96:	2302      	movs	r3, #2
 8000d98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22


	// SCL
	GPIO_Handle_t I2C_SCL_Pin = I2CPins;
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	f107 021c 	add.w	r2, r7, #28
 8000da4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000da6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	I2C_SCL_Pin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
 8000daa:	2308      	movs	r3, #8
 8000dac:	753b      	strb	r3, [r7, #20]
	GPIO_Init(&I2C_SCL_Pin);
 8000dae:	f107 0310 	add.w	r3, r7, #16
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff faf6 	bl	80003a4 <GPIO_Init>

	// SDA
	GPIO_Handle_t I2C_SDA_Pin = I2CPins;
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	f107 021c 	add.w	r2, r7, #28
 8000dbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dc0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	I2C_SDA_Pin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 8000dc4:	2309      	movs	r3, #9
 8000dc6:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2C_SDA_Pin);
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff faea 	bl	80003a4 <GPIO_Init>

}
 8000dd0:	bf00      	nop
 8000dd2:	3728      	adds	r7, #40	; 0x28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40020400 	.word	0x40020400

08000ddc <I2C1_Inits>:


void I2C1_Inits(void){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0

	I2C1Handle.pI2Cx = I2C1;
 8000de0:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <I2C1_Inits+0x2c>)
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <I2C1_Inits+0x30>)
 8000de4:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <I2C1_Inits+0x2c>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <I2C1_Inits+0x2c>)
 8000dee:	2261      	movs	r2, #97	; 0x61
 8000df0:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000df2:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <I2C1_Inits+0x2c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <I2C1_Inits+0x2c>)
 8000dfa:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <I2C1_Inits+0x34>)
 8000dfc:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 8000dfe:	4802      	ldr	r0, [pc, #8]	; (8000e08 <I2C1_Inits+0x2c>)
 8000e00:	f7ff fdc0 	bl	8000984 <I2C_Init>

}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000034 	.word	0x20000034
 8000e0c:	40005400 	.word	0x40005400
 8000e10:	000186a0 	.word	0x000186a0

08000e14 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioButton;
	// Configure the Button
	GpioButton.pGPIOx = GPIOC;
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <GPIO_ButtonInit+0x2c>)
 8000e1c:	607b      	str	r3, [r7, #4]
	GpioButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000e1e:	230d      	movs	r3, #13
 8000e20:	723b      	strb	r3, [r7, #8]
	GpioButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 8000e22:	2300      	movs	r3, #0
 8000e24:	727b      	strb	r3, [r7, #9]
	GpioButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000e26:	2300      	movs	r3, #0
 8000e28:	72fb      	strb	r3, [r7, #11]
	GpioButton.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(&GpioButton);
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fab7 	bl	80003a4 <GPIO_Init>
}
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40020800 	.word	0x40020800

08000e44 <main>:



int main(void){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0

	// GPIO Button
	GPIO_ButtonInit();
 8000e4a:	f7ff ffe3 	bl	8000e14 <GPIO_ButtonInit>

	// Initialize the GPIO pins
	I2C1_GPIOInits();
 8000e4e:	f7ff ff91 	bl	8000d74 <I2C1_GPIOInits>

	// Initialize the I2C1 Peripheral
	I2C1_Inits();
 8000e52:	f7ff ffc3 	bl	8000ddc <I2C1_Inits>

	// Enable the I2C1 Peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 8000e56:	2101      	movs	r1, #1
 8000e58:	4816      	ldr	r0, [pc, #88]	; (8000eb4 <main+0x70>)
 8000e5a:	f7ff fd13 	bl	8000884 <I2C_PeripheralControl>

	// Enable ACKing after PE bit is set
	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 8000e5e:	2101      	movs	r1, #1
 8000e60:	4814      	ldr	r0, [pc, #80]	; (8000eb4 <main+0x70>)
 8000e62:	f7ff ff43 	bl	8000cec <I2C_ManageAcking>

	uint8_t commandcode, length;

	while(1){
		// Wait for button press
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) != BUTTON_PRESSED);
 8000e66:	bf00      	nop
 8000e68:	210d      	movs	r1, #13
 8000e6a:	4813      	ldr	r0, [pc, #76]	; (8000eb8 <main+0x74>)
 8000e6c:	f7ff fc46 	bl	80006fc <GPIO_ReadFromInputPin>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1f8      	bne.n	8000e68 <main+0x24>
		// For the De-bouncing of the Button
		delay();
 8000e76:	f7ff ff67 	bl	8000d48 <delay>

		// Request the Length (0x51)
		commandcode = 0x51;
 8000e7a:	2351      	movs	r3, #81	; 0x51
 8000e7c:	71fb      	strb	r3, [r7, #7]
		I2C_MasterSendData(&I2C1Handle, &commandcode, 1, SLAVE_ADDR);
 8000e7e:	1df9      	adds	r1, r7, #7
 8000e80:	2368      	movs	r3, #104	; 0x68
 8000e82:	2201      	movs	r2, #1
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <main+0x78>)
 8000e86:	f7ff fe3d 	bl	8000b04 <I2C_MasterSendData>
		I2C_MasterReceiveData(&I2C1Handle, &length, 1, SLAVE_ADDR);
 8000e8a:	1db9      	adds	r1, r7, #6
 8000e8c:	2368      	movs	r3, #104	; 0x68
 8000e8e:	2201      	movs	r2, #1
 8000e90:	480a      	ldr	r0, [pc, #40]	; (8000ebc <main+0x78>)
 8000e92:	f7ff fe9d 	bl	8000bd0 <I2C_MasterReceiveData>

		// Read the Message (0x52)
		commandcode = 0x52;
 8000e96:	2352      	movs	r3, #82	; 0x52
 8000e98:	71fb      	strb	r3, [r7, #7]
		I2C_MasterSendData(&I2C1Handle, &commandcode, 1, SLAVE_ADDR);
 8000e9a:	1df9      	adds	r1, r7, #7
 8000e9c:	2368      	movs	r3, #104	; 0x68
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	4806      	ldr	r0, [pc, #24]	; (8000ebc <main+0x78>)
 8000ea2:	f7ff fe2f 	bl	8000b04 <I2C_MasterSendData>
		I2C_MasterReceiveData(&I2C1Handle, rcv_buf, length, SLAVE_ADDR);
 8000ea6:	79ba      	ldrb	r2, [r7, #6]
 8000ea8:	2368      	movs	r3, #104	; 0x68
 8000eaa:	4905      	ldr	r1, [pc, #20]	; (8000ec0 <main+0x7c>)
 8000eac:	4803      	ldr	r0, [pc, #12]	; (8000ebc <main+0x78>)
 8000eae:	f7ff fe8f 	bl	8000bd0 <I2C_MasterReceiveData>
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) != BUTTON_PRESSED);
 8000eb2:	e7d8      	b.n	8000e66 <main+0x22>
 8000eb4:	40005400 	.word	0x40005400
 8000eb8:	40020800 	.word	0x40020800
 8000ebc:	20000034 	.word	0x20000034
 8000ec0:	20000040 	.word	0x20000040

08000ec4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ec4:	480d      	ldr	r0, [pc, #52]	; (8000efc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ec6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ec8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ecc:	480c      	ldr	r0, [pc, #48]	; (8000f00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ece:	490d      	ldr	r1, [pc, #52]	; (8000f04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <LoopForever+0xe>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed4:	e002      	b.n	8000edc <LoopCopyDataInit>

08000ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eda:	3304      	adds	r3, #4

08000edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee0:	d3f9      	bcc.n	8000ed6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ee4:	4c0a      	ldr	r4, [pc, #40]	; (8000f10 <LoopForever+0x16>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee8:	e001      	b.n	8000eee <LoopFillZerobss>

08000eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eec:	3204      	adds	r2, #4

08000eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef0:	d3fb      	bcc.n	8000eea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ef2:	f000 f811 	bl	8000f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ef6:	f7ff ffa5 	bl	8000e44 <main>

08000efa <LoopForever>:

LoopForever:
  b LoopForever
 8000efa:	e7fe      	b.n	8000efa <LoopForever>
  ldr   r0, =_estack
 8000efc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f04:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000f08:	08000f80 	.word	0x08000f80
  ldr r2, =_sbss
 8000f0c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000f10:	20000060 	.word	0x20000060

08000f14 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f14:	e7fe      	b.n	8000f14 <ADC_IRQHandler>
	...

08000f18 <__libc_init_array>:
 8000f18:	b570      	push	{r4, r5, r6, lr}
 8000f1a:	4d0d      	ldr	r5, [pc, #52]	; (8000f50 <__libc_init_array+0x38>)
 8000f1c:	4c0d      	ldr	r4, [pc, #52]	; (8000f54 <__libc_init_array+0x3c>)
 8000f1e:	1b64      	subs	r4, r4, r5
 8000f20:	10a4      	asrs	r4, r4, #2
 8000f22:	2600      	movs	r6, #0
 8000f24:	42a6      	cmp	r6, r4
 8000f26:	d109      	bne.n	8000f3c <__libc_init_array+0x24>
 8000f28:	4d0b      	ldr	r5, [pc, #44]	; (8000f58 <__libc_init_array+0x40>)
 8000f2a:	4c0c      	ldr	r4, [pc, #48]	; (8000f5c <__libc_init_array+0x44>)
 8000f2c:	f000 f818 	bl	8000f60 <_init>
 8000f30:	1b64      	subs	r4, r4, r5
 8000f32:	10a4      	asrs	r4, r4, #2
 8000f34:	2600      	movs	r6, #0
 8000f36:	42a6      	cmp	r6, r4
 8000f38:	d105      	bne.n	8000f46 <__libc_init_array+0x2e>
 8000f3a:	bd70      	pop	{r4, r5, r6, pc}
 8000f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f40:	4798      	blx	r3
 8000f42:	3601      	adds	r6, #1
 8000f44:	e7ee      	b.n	8000f24 <__libc_init_array+0xc>
 8000f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f4a:	4798      	blx	r3
 8000f4c:	3601      	adds	r6, #1
 8000f4e:	e7f2      	b.n	8000f36 <__libc_init_array+0x1e>
 8000f50:	08000f78 	.word	0x08000f78
 8000f54:	08000f78 	.word	0x08000f78
 8000f58:	08000f78 	.word	0x08000f78
 8000f5c:	08000f7c 	.word	0x08000f7c

08000f60 <_init>:
 8000f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f62:	bf00      	nop
 8000f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f66:	bc08      	pop	{r3}
 8000f68:	469e      	mov	lr, r3
 8000f6a:	4770      	bx	lr

08000f6c <_fini>:
 8000f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f6e:	bf00      	nop
 8000f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f72:	bc08      	pop	{r3}
 8000f74:	469e      	mov	lr, r3
 8000f76:	4770      	bx	lr


008_stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f80  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08002150  08002150  00012150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002194  08002194  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002194  08002194  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002194  08002194  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002194  08002194  00012194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002198  08002198  00012198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800219c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  2000005c  080021f8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  080021f8  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020086  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001e59  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000072a  00000000  00000000  00021f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000278  00000000  00000000  00022650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001c6  00000000  00000000  000228c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003515  00000000  00000000  00022a8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000026ab  00000000  00000000  00025fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000bd00  00000000  00000000  0002864e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000010d4  00000000  00000000  00034350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00035424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002138 	.word	0x08002138

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08002138 	.word	0x08002138

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <GPIO_PeriClockControl>:
 * @return            -  void
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi){
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	460b      	mov	r3, r1
 80002ba:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){ // Enable
 80002bc:	78fb      	ldrb	r3, [r7, #3]
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d157      	bne.n	8000372 <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA){
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a59      	ldr	r2, [pc, #356]	; (800042c <GPIO_PeriClockControl+0x17c>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d106      	bne.n	80002d8 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80002ca:	4b59      	ldr	r3, [pc, #356]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80002cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ce:	4a58      	ldr	r2, [pc, #352]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80002d0:	f043 0301 	orr.w	r3, r3, #1
 80002d4:	6313      	str	r3, [r2, #48]	; 0x30
		}else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}

}
 80002d6:	e0a3      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB){
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	4a56      	ldr	r2, [pc, #344]	; (8000434 <GPIO_PeriClockControl+0x184>)
 80002dc:	4293      	cmp	r3, r2
 80002de:	d106      	bne.n	80002ee <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80002e0:	4b53      	ldr	r3, [pc, #332]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80002e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e4:	4a52      	ldr	r2, [pc, #328]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80002e6:	f043 0302 	orr.w	r3, r3, #2
 80002ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ec:	e098      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC){
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	4a51      	ldr	r2, [pc, #324]	; (8000438 <GPIO_PeriClockControl+0x188>)
 80002f2:	4293      	cmp	r3, r2
 80002f4:	d106      	bne.n	8000304 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80002f6:	4b4e      	ldr	r3, [pc, #312]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80002f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fa:	4a4d      	ldr	r2, [pc, #308]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80002fc:	f043 0304 	orr.w	r3, r3, #4
 8000300:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000302:	e08d      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOD){
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	4a4d      	ldr	r2, [pc, #308]	; (800043c <GPIO_PeriClockControl+0x18c>)
 8000308:	4293      	cmp	r3, r2
 800030a:	d106      	bne.n	800031a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800030c:	4b48      	ldr	r3, [pc, #288]	; (8000430 <GPIO_PeriClockControl+0x180>)
 800030e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000310:	4a47      	ldr	r2, [pc, #284]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000312:	f043 0308 	orr.w	r3, r3, #8
 8000316:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000318:	e082      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE){
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4a48      	ldr	r2, [pc, #288]	; (8000440 <GPIO_PeriClockControl+0x190>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d106      	bne.n	8000330 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000322:	4b43      	ldr	r3, [pc, #268]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000326:	4a42      	ldr	r2, [pc, #264]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000328:	f043 0310 	orr.w	r3, r3, #16
 800032c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800032e:	e077      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF){
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4a44      	ldr	r2, [pc, #272]	; (8000444 <GPIO_PeriClockControl+0x194>)
 8000334:	4293      	cmp	r3, r2
 8000336:	d106      	bne.n	8000346 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000338:	4b3d      	ldr	r3, [pc, #244]	; (8000430 <GPIO_PeriClockControl+0x180>)
 800033a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033c:	4a3c      	ldr	r2, [pc, #240]	; (8000430 <GPIO_PeriClockControl+0x180>)
 800033e:	f043 0320 	orr.w	r3, r3, #32
 8000342:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000344:	e06c      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOG){
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4a3f      	ldr	r2, [pc, #252]	; (8000448 <GPIO_PeriClockControl+0x198>)
 800034a:	4293      	cmp	r3, r2
 800034c:	d106      	bne.n	800035c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800034e:	4b38      	ldr	r3, [pc, #224]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000352:	4a37      	ldr	r2, [pc, #220]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000358:	6313      	str	r3, [r2, #48]	; 0x30
}
 800035a:	e061      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOH){
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a3b      	ldr	r2, [pc, #236]	; (800044c <GPIO_PeriClockControl+0x19c>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d15d      	bne.n	8000420 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000364:	4b32      	ldr	r3, [pc, #200]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000368:	4a31      	ldr	r2, [pc, #196]	; (8000430 <GPIO_PeriClockControl+0x180>)
 800036a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800036e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000370:	e056      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA){
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4a2d      	ldr	r2, [pc, #180]	; (800042c <GPIO_PeriClockControl+0x17c>)
 8000376:	4293      	cmp	r3, r2
 8000378:	d106      	bne.n	8000388 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 800037a:	4b2d      	ldr	r3, [pc, #180]	; (8000430 <GPIO_PeriClockControl+0x180>)
 800037c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037e:	4a2c      	ldr	r2, [pc, #176]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000380:	f023 0301 	bic.w	r3, r3, #1
 8000384:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000386:	e04b      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB){
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4a2a      	ldr	r2, [pc, #168]	; (8000434 <GPIO_PeriClockControl+0x184>)
 800038c:	4293      	cmp	r3, r2
 800038e:	d106      	bne.n	800039e <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 8000390:	4b27      	ldr	r3, [pc, #156]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000394:	4a26      	ldr	r2, [pc, #152]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000396:	f023 0302 	bic.w	r3, r3, #2
 800039a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800039c:	e040      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC){
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4a25      	ldr	r2, [pc, #148]	; (8000438 <GPIO_PeriClockControl+0x188>)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d106      	bne.n	80003b4 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 80003a6:	4b22      	ldr	r3, [pc, #136]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80003a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003aa:	4a21      	ldr	r2, [pc, #132]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80003ac:	f023 0304 	bic.w	r3, r3, #4
 80003b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b2:	e035      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOD){
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4a21      	ldr	r2, [pc, #132]	; (800043c <GPIO_PeriClockControl+0x18c>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d106      	bne.n	80003ca <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 80003bc:	4b1c      	ldr	r3, [pc, #112]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80003be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c0:	4a1b      	ldr	r2, [pc, #108]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80003c2:	f023 0308 	bic.w	r3, r3, #8
 80003c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c8:	e02a      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE){
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4a1c      	ldr	r2, [pc, #112]	; (8000440 <GPIO_PeriClockControl+0x190>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d106      	bne.n	80003e0 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 80003d2:	4b17      	ldr	r3, [pc, #92]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80003d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d6:	4a16      	ldr	r2, [pc, #88]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80003d8:	f023 0310 	bic.w	r3, r3, #16
 80003dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003de:	e01f      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF){
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4a18      	ldr	r2, [pc, #96]	; (8000444 <GPIO_PeriClockControl+0x194>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d106      	bne.n	80003f6 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 80003e8:	4b11      	ldr	r3, [pc, #68]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80003ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ec:	4a10      	ldr	r2, [pc, #64]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80003ee:	f023 0320 	bic.w	r3, r3, #32
 80003f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f4:	e014      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOG){
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4a13      	ldr	r2, [pc, #76]	; (8000448 <GPIO_PeriClockControl+0x198>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d106      	bne.n	800040c <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 80003fe:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000402:	4a0b      	ldr	r2, [pc, #44]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000408:	6313      	str	r3, [r2, #48]	; 0x30
}
 800040a:	e009      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOH){
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4a0f      	ldr	r2, [pc, #60]	; (800044c <GPIO_PeriClockControl+0x19c>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d105      	bne.n	8000420 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000418:	4a05      	ldr	r2, [pc, #20]	; (8000430 <GPIO_PeriClockControl+0x180>)
 800041a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800041e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000420:	bf00      	nop
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	40020000 	.word	0x40020000
 8000430:	40023800 	.word	0x40023800
 8000434:	40020400 	.word	0x40020400
 8000438:	40020800 	.word	0x40020800
 800043c:	40020c00 	.word	0x40020c00
 8000440:	40021000 	.word	0x40021000
 8000444:	40021400 	.word	0x40021400
 8000448:	40021800 	.word	0x40021800
 800044c:	40021c00 	.word	0x40021c00

08000450 <GPIO_Init>:


/*
 * Initialize and De-Initialize
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]

	// Enable Peripheral Clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	2101      	movs	r1, #1
 800045e:	4618      	mov	r0, r3
 8000460:	f7ff ff26 	bl	80002b0 <GPIO_PeriClockControl>

	uint32_t temp = 0; // Temporary Register
 8000464:	2300      	movs	r3, #0
 8000466:	60fb      	str	r3, [r7, #12]

	// 1. Configure Mode of GPIO Pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	795b      	ldrb	r3, [r3, #5]
 800046c:	2b03      	cmp	r3, #3
 800046e:	d821      	bhi.n	80004b4 <GPIO_Init+0x64>
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	795b      	ldrb	r3, [r3, #5]
 8000474:	461a      	mov	r2, r3
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	791b      	ldrb	r3, [r3, #4]
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	fa02 f303 	lsl.w	r3, r2, r3
 8000480:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	791b      	ldrb	r3, [r3, #4]
 800048c:	4619      	mov	r1, r3
 800048e:	2303      	movs	r3, #3
 8000490:	408b      	lsls	r3, r1
 8000492:	43db      	mvns	r3, r3
 8000494:	4619      	mov	r1, r3
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	400a      	ands	r2, r1
 800049c:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // Set
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	6819      	ldr	r1, [r3, #0]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	68fa      	ldr	r2, [r7, #12]
 80004aa:	430a      	orrs	r2, r1
 80004ac:	601a      	str	r2, [r3, #0]
		temp = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	60fb      	str	r3, [r7, #12]
 80004b2:	e0b8      	b.n	8000626 <GPIO_Init+0x1d6>
	}else{
		// TODO: Interrupt Mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	795b      	ldrb	r3, [r3, #5]
 80004b8:	2b04      	cmp	r3, #4
 80004ba:	d117      	bne.n	80004ec <GPIO_Init+0x9c>
			// Configure the Falling Trigger Selection Register
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004bc:	4b43      	ldr	r3, [pc, #268]	; (80005cc <GPIO_Init+0x17c>)
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	687a      	ldr	r2, [r7, #4]
 80004c2:	7912      	ldrb	r2, [r2, #4]
 80004c4:	4611      	mov	r1, r2
 80004c6:	2201      	movs	r2, #1
 80004c8:	408a      	lsls	r2, r1
 80004ca:	4611      	mov	r1, r2
 80004cc:	4a3f      	ldr	r2, [pc, #252]	; (80005cc <GPIO_Init+0x17c>)
 80004ce:	430b      	orrs	r3, r1
 80004d0:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear RTSR
 80004d2:	4b3e      	ldr	r3, [pc, #248]	; (80005cc <GPIO_Init+0x17c>)
 80004d4:	689b      	ldr	r3, [r3, #8]
 80004d6:	687a      	ldr	r2, [r7, #4]
 80004d8:	7912      	ldrb	r2, [r2, #4]
 80004da:	4611      	mov	r1, r2
 80004dc:	2201      	movs	r2, #1
 80004de:	408a      	lsls	r2, r1
 80004e0:	43d2      	mvns	r2, r2
 80004e2:	4611      	mov	r1, r2
 80004e4:	4a39      	ldr	r2, [pc, #228]	; (80005cc <GPIO_Init+0x17c>)
 80004e6:	400b      	ands	r3, r1
 80004e8:	6093      	str	r3, [r2, #8]
 80004ea:	e035      	b.n	8000558 <GPIO_Init+0x108>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	795b      	ldrb	r3, [r3, #5]
 80004f0:	2b05      	cmp	r3, #5
 80004f2:	d117      	bne.n	8000524 <GPIO_Init+0xd4>
			// Configure the Rising Trigger Selection Register
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004f4:	4b35      	ldr	r3, [pc, #212]	; (80005cc <GPIO_Init+0x17c>)
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	7912      	ldrb	r2, [r2, #4]
 80004fc:	4611      	mov	r1, r2
 80004fe:	2201      	movs	r2, #1
 8000500:	408a      	lsls	r2, r1
 8000502:	4611      	mov	r1, r2
 8000504:	4a31      	ldr	r2, [pc, #196]	; (80005cc <GPIO_Init+0x17c>)
 8000506:	430b      	orrs	r3, r1
 8000508:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear FTSR
 800050a:	4b30      	ldr	r3, [pc, #192]	; (80005cc <GPIO_Init+0x17c>)
 800050c:	68db      	ldr	r3, [r3, #12]
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	7912      	ldrb	r2, [r2, #4]
 8000512:	4611      	mov	r1, r2
 8000514:	2201      	movs	r2, #1
 8000516:	408a      	lsls	r2, r1
 8000518:	43d2      	mvns	r2, r2
 800051a:	4611      	mov	r1, r2
 800051c:	4a2b      	ldr	r2, [pc, #172]	; (80005cc <GPIO_Init+0x17c>)
 800051e:	400b      	ands	r3, r1
 8000520:	60d3      	str	r3, [r2, #12]
 8000522:	e019      	b.n	8000558 <GPIO_Init+0x108>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	795b      	ldrb	r3, [r3, #5]
 8000528:	2b06      	cmp	r3, #6
 800052a:	d115      	bne.n	8000558 <GPIO_Init+0x108>
			// Configure Both Falling and Rising
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800052c:	4b27      	ldr	r3, [pc, #156]	; (80005cc <GPIO_Init+0x17c>)
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	7912      	ldrb	r2, [r2, #4]
 8000534:	4611      	mov	r1, r2
 8000536:	2201      	movs	r2, #1
 8000538:	408a      	lsls	r2, r1
 800053a:	4611      	mov	r1, r2
 800053c:	4a23      	ldr	r2, [pc, #140]	; (80005cc <GPIO_Init+0x17c>)
 800053e:	430b      	orrs	r3, r1
 8000540:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000542:	4b22      	ldr	r3, [pc, #136]	; (80005cc <GPIO_Init+0x17c>)
 8000544:	689b      	ldr	r3, [r3, #8]
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	7912      	ldrb	r2, [r2, #4]
 800054a:	4611      	mov	r1, r2
 800054c:	2201      	movs	r2, #1
 800054e:	408a      	lsls	r2, r1
 8000550:	4611      	mov	r1, r2
 8000552:	4a1e      	ldr	r2, [pc, #120]	; (80005cc <GPIO_Init+0x17c>)
 8000554:	430b      	orrs	r3, r1
 8000556:	6093      	str	r3, [r2, #8]
		}

		// Configure the GPIO port Selection in SYSCFG_EXTICR
		uint8_t ExtiCR_Number = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	791b      	ldrb	r3, [r3, #4]
 800055c:	089b      	lsrs	r3, r3, #2
 800055e:	72fb      	strb	r3, [r7, #11]
		uint8_t ExtiCR_ShiftOffset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	791b      	ldrb	r3, [r3, #4]
 8000564:	f003 0303 	and.w	r3, r3, #3
 8000568:	72bb      	strb	r3, [r7, #10]
		uint8_t portcode = GPIO_BASEADDR_TO_PORTCODE(pGPIOHandle->pGPIOx);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a18      	ldr	r2, [pc, #96]	; (80005d0 <GPIO_Init+0x180>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d03b      	beq.n	80005ec <GPIO_Init+0x19c>
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a16      	ldr	r2, [pc, #88]	; (80005d4 <GPIO_Init+0x184>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d024      	beq.n	80005c8 <GPIO_Init+0x178>
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a15      	ldr	r2, [pc, #84]	; (80005d8 <GPIO_Init+0x188>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d01d      	beq.n	80005c4 <GPIO_Init+0x174>
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a13      	ldr	r2, [pc, #76]	; (80005dc <GPIO_Init+0x18c>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d016      	beq.n	80005c0 <GPIO_Init+0x170>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a12      	ldr	r2, [pc, #72]	; (80005e0 <GPIO_Init+0x190>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d00f      	beq.n	80005bc <GPIO_Init+0x16c>
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a10      	ldr	r2, [pc, #64]	; (80005e4 <GPIO_Init+0x194>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d008      	beq.n	80005b8 <GPIO_Init+0x168>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a0f      	ldr	r2, [pc, #60]	; (80005e8 <GPIO_Init+0x198>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d101      	bne.n	80005b4 <GPIO_Init+0x164>
 80005b0:	2306      	movs	r3, #6
 80005b2:	e01c      	b.n	80005ee <GPIO_Init+0x19e>
 80005b4:	2300      	movs	r3, #0
 80005b6:	e01a      	b.n	80005ee <GPIO_Init+0x19e>
 80005b8:	2305      	movs	r3, #5
 80005ba:	e018      	b.n	80005ee <GPIO_Init+0x19e>
 80005bc:	2304      	movs	r3, #4
 80005be:	e016      	b.n	80005ee <GPIO_Init+0x19e>
 80005c0:	2303      	movs	r3, #3
 80005c2:	e014      	b.n	80005ee <GPIO_Init+0x19e>
 80005c4:	2302      	movs	r3, #2
 80005c6:	e012      	b.n	80005ee <GPIO_Init+0x19e>
 80005c8:	2301      	movs	r3, #1
 80005ca:	e010      	b.n	80005ee <GPIO_Init+0x19e>
 80005cc:	40013c00 	.word	0x40013c00
 80005d0:	40020000 	.word	0x40020000
 80005d4:	40020400 	.word	0x40020400
 80005d8:	40020800 	.word	0x40020800
 80005dc:	40020c00 	.word	0x40020c00
 80005e0:	40021000 	.word	0x40021000
 80005e4:	40021400 	.word	0x40021400
 80005e8:	40021800 	.word	0x40021800
 80005ec:	2300      	movs	r3, #0
 80005ee:	727b      	strb	r3, [r7, #9]
		SYSCFG_PCLK_EN();
 80005f0:	4b6a      	ldr	r3, [pc, #424]	; (800079c <GPIO_Init+0x34c>)
 80005f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005f4:	4a69      	ldr	r2, [pc, #420]	; (800079c <GPIO_Init+0x34c>)
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fa:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[ExtiCR_Number] = portcode << (ExtiCR_ShiftOffset * 4);
 80005fc:	7a7a      	ldrb	r2, [r7, #9]
 80005fe:	7abb      	ldrb	r3, [r7, #10]
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	fa02 f103 	lsl.w	r1, r2, r3
 8000606:	4a66      	ldr	r2, [pc, #408]	; (80007a0 <GPIO_Init+0x350>)
 8000608:	7afb      	ldrb	r3, [r7, #11]
 800060a:	3302      	adds	r3, #2
 800060c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000610:	4b64      	ldr	r3, [pc, #400]	; (80007a4 <GPIO_Init+0x354>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	7912      	ldrb	r2, [r2, #4]
 8000618:	4611      	mov	r1, r2
 800061a:	2201      	movs	r2, #1
 800061c:	408a      	lsls	r2, r1
 800061e:	4611      	mov	r1, r2
 8000620:	4a60      	ldr	r2, [pc, #384]	; (80007a4 <GPIO_Init+0x354>)
 8000622:	430b      	orrs	r3, r1
 8000624:	6013      	str	r3, [r2, #0]
	}

	// 2. Configure Speed
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	799b      	ldrb	r3, [r3, #6]
 800062a:	461a      	mov	r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	791b      	ldrb	r3, [r3, #4]
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	fa02 f303 	lsl.w	r3, r2, r3
 8000636:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	689a      	ldr	r2, [r3, #8]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	791b      	ldrb	r3, [r3, #4]
 8000642:	4619      	mov	r1, r3
 8000644:	2303      	movs	r3, #3
 8000646:	408b      	lsls	r3, r1
 8000648:	43db      	mvns	r3, r3
 800064a:	4619      	mov	r1, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	400a      	ands	r2, r1
 8000652:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	6899      	ldr	r1, [r3, #8]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	68fa      	ldr	r2, [r7, #12]
 8000660:	430a      	orrs	r2, r1
 8000662:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]

	// 3. Configure Pull-up Pull-down Settings
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	79db      	ldrb	r3, [r3, #7]
 800066c:	461a      	mov	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	791b      	ldrb	r3, [r3, #4]
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	fa02 f303 	lsl.w	r3, r2, r3
 8000678:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	68da      	ldr	r2, [r3, #12]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	791b      	ldrb	r3, [r3, #4]
 8000684:	4619      	mov	r1, r3
 8000686:	2303      	movs	r3, #3
 8000688:	408b      	lsls	r3, r1
 800068a:	43db      	mvns	r3, r3
 800068c:	4619      	mov	r1, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	400a      	ands	r2, r1
 8000694:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	68d9      	ldr	r1, [r3, #12]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	430a      	orrs	r2, r1
 80006a4:	60da      	str	r2, [r3, #12]
	temp = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]

	// 4. Configure the Output Type
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	7a1b      	ldrb	r3, [r3, #8]
 80006ae:	461a      	mov	r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	791b      	ldrb	r3, [r3, #4]
 80006b4:	fa02 f303 	lsl.w	r3, r2, r3
 80006b8:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	685a      	ldr	r2, [r3, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	791b      	ldrb	r3, [r3, #4]
 80006c4:	4619      	mov	r1, r3
 80006c6:	2301      	movs	r3, #1
 80006c8:	408b      	lsls	r3, r1
 80006ca:	43db      	mvns	r3, r3
 80006cc:	4619      	mov	r1, r3
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	400a      	ands	r2, r1
 80006d4:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	6859      	ldr	r1, [r3, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	68fa      	ldr	r2, [r7, #12]
 80006e2:	430a      	orrs	r2, r1
 80006e4:	605a      	str	r2, [r3, #4]
	temp = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]

	// 5. Configure Alternate Functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFUN){
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	795b      	ldrb	r3, [r3, #5]
 80006ee:	2b02      	cmp	r3, #2
 80006f0:	d150      	bne.n	8000794 <GPIO_Init+0x344>
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= GPIO_PIN_NO_7){
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	791b      	ldrb	r3, [r3, #4]
 80006f6:	2b07      	cmp	r3, #7
 80006f8:	d826      	bhi.n	8000748 <GPIO_Init+0x2f8>
				// AFRL Registers
				temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	7a5b      	ldrb	r3, [r3, #9]
 80006fe:	461a      	mov	r2, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	791b      	ldrb	r3, [r3, #4]
 8000704:	f003 0307 	and.w	r3, r3, #7
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	fa02 f303 	lsl.w	r3, r2, r3
 800070e:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->AFRL &= ~(0xF << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8))); // Clear
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	6a1a      	ldr	r2, [r3, #32]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	791b      	ldrb	r3, [r3, #4]
 800071a:	f003 0307 	and.w	r3, r3, #7
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	210f      	movs	r1, #15
 8000722:	fa01 f303 	lsl.w	r3, r1, r3
 8000726:	43db      	mvns	r3, r3
 8000728:	4619      	mov	r1, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	400a      	ands	r2, r1
 8000730:	621a      	str	r2, [r3, #32]
				pGPIOHandle->pGPIOx->AFRL |= temp;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	6a19      	ldr	r1, [r3, #32]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	68fa      	ldr	r2, [r7, #12]
 800073e:	430a      	orrs	r2, r1
 8000740:	621a      	str	r2, [r3, #32]
				temp = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->AFRH |= temp;
				temp = 0;
			}
	}

}
 8000746:	e025      	b.n	8000794 <GPIO_Init+0x344>
				temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	7a5b      	ldrb	r3, [r3, #9]
 800074c:	461a      	mov	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	791b      	ldrb	r3, [r3, #4]
 8000752:	f003 0307 	and.w	r3, r3, #7
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	fa02 f303 	lsl.w	r3, r2, r3
 800075c:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->AFRH &= ~(0xF << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8))); // Clear
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	791b      	ldrb	r3, [r3, #4]
 8000768:	f003 0307 	and.w	r3, r3, #7
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	210f      	movs	r1, #15
 8000770:	fa01 f303 	lsl.w	r3, r1, r3
 8000774:	43db      	mvns	r3, r3
 8000776:	4619      	mov	r1, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	400a      	ands	r2, r1
 800077e:	625a      	str	r2, [r3, #36]	; 0x24
				pGPIOHandle->pGPIOx->AFRH |= temp;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	68fa      	ldr	r2, [r7, #12]
 800078c:	430a      	orrs	r2, r1
 800078e:	625a      	str	r2, [r3, #36]	; 0x24
				temp = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
}
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40013800 	.word	0x40013800
 80007a4:	40013c00 	.word	0x40013c00

080007a8 <GPIO_IRQInterruptConfig>:


/*
 * IRQ Interrupt Configuration
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnOrDi){
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	460a      	mov	r2, r1
 80007b2:	71fb      	strb	r3, [r7, #7]
 80007b4:	4613      	mov	r3, r2
 80007b6:	71bb      	strb	r3, [r7, #6]
	if(EnOrDi == ENABLE){
 80007b8:	79bb      	ldrb	r3, [r7, #6]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d133      	bne.n	8000826 <GPIO_IRQInterruptConfig+0x7e>
		// Enable
		if(IRQNumber <= 31){
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2b1f      	cmp	r3, #31
 80007c2:	d80a      	bhi.n	80007da <GPIO_IRQInterruptConfig+0x32>
			// Program ISER0 Register
			*NVIC_ISER0 |= (1 << IRQNumber);
 80007c4:	4b34      	ldr	r3, [pc, #208]	; (8000898 <GPIO_IRQInterruptConfig+0xf0>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	79fa      	ldrb	r2, [r7, #7]
 80007ca:	2101      	movs	r1, #1
 80007cc:	fa01 f202 	lsl.w	r2, r1, r2
 80007d0:	4611      	mov	r1, r2
 80007d2:	4a31      	ldr	r2, [pc, #196]	; (8000898 <GPIO_IRQInterruptConfig+0xf0>)
 80007d4:	430b      	orrs	r3, r1
 80007d6:	6013      	str	r3, [r2, #0]
			// Program ICER2 Register
			*NVIC_ICER2 |= (1 << (IRQNumber % 32));
		}
	}

}
 80007d8:	e059      	b.n	800088e <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64){
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	2b1f      	cmp	r3, #31
 80007de:	d90f      	bls.n	8000800 <GPIO_IRQInterruptConfig+0x58>
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	2b3f      	cmp	r3, #63	; 0x3f
 80007e4:	d80c      	bhi.n	8000800 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 80007e6:	4b2d      	ldr	r3, [pc, #180]	; (800089c <GPIO_IRQInterruptConfig+0xf4>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	79fa      	ldrb	r2, [r7, #7]
 80007ec:	f002 021f 	and.w	r2, r2, #31
 80007f0:	2101      	movs	r1, #1
 80007f2:	fa01 f202 	lsl.w	r2, r1, r2
 80007f6:	4611      	mov	r1, r2
 80007f8:	4a28      	ldr	r2, [pc, #160]	; (800089c <GPIO_IRQInterruptConfig+0xf4>)
 80007fa:	430b      	orrs	r3, r1
 80007fc:	6013      	str	r3, [r2, #0]
 80007fe:	e046      	b.n	800088e <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber >= 64 && IRQNumber < 96){
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	2b3f      	cmp	r3, #63	; 0x3f
 8000804:	d943      	bls.n	800088e <GPIO_IRQInterruptConfig+0xe6>
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2b5f      	cmp	r3, #95	; 0x5f
 800080a:	d840      	bhi.n	800088e <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 32));
 800080c:	4b24      	ldr	r3, [pc, #144]	; (80008a0 <GPIO_IRQInterruptConfig+0xf8>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	79fa      	ldrb	r2, [r7, #7]
 8000812:	f002 021f 	and.w	r2, r2, #31
 8000816:	2101      	movs	r1, #1
 8000818:	fa01 f202 	lsl.w	r2, r1, r2
 800081c:	4611      	mov	r1, r2
 800081e:	4a20      	ldr	r2, [pc, #128]	; (80008a0 <GPIO_IRQInterruptConfig+0xf8>)
 8000820:	430b      	orrs	r3, r1
 8000822:	6013      	str	r3, [r2, #0]
}
 8000824:	e033      	b.n	800088e <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31){
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	2b1f      	cmp	r3, #31
 800082a:	d80a      	bhi.n	8000842 <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 800082c:	4b1d      	ldr	r3, [pc, #116]	; (80008a4 <GPIO_IRQInterruptConfig+0xfc>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	79fa      	ldrb	r2, [r7, #7]
 8000832:	2101      	movs	r1, #1
 8000834:	fa01 f202 	lsl.w	r2, r1, r2
 8000838:	4611      	mov	r1, r2
 800083a:	4a1a      	ldr	r2, [pc, #104]	; (80008a4 <GPIO_IRQInterruptConfig+0xfc>)
 800083c:	430b      	orrs	r3, r1
 800083e:	6013      	str	r3, [r2, #0]
}
 8000840:	e025      	b.n	800088e <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64){
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	2b1f      	cmp	r3, #31
 8000846:	d90f      	bls.n	8000868 <GPIO_IRQInterruptConfig+0xc0>
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	2b3f      	cmp	r3, #63	; 0x3f
 800084c:	d80c      	bhi.n	8000868 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 800084e:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <GPIO_IRQInterruptConfig+0x100>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	79fa      	ldrb	r2, [r7, #7]
 8000854:	f002 021f 	and.w	r2, r2, #31
 8000858:	2101      	movs	r1, #1
 800085a:	fa01 f202 	lsl.w	r2, r1, r2
 800085e:	4611      	mov	r1, r2
 8000860:	4a11      	ldr	r2, [pc, #68]	; (80008a8 <GPIO_IRQInterruptConfig+0x100>)
 8000862:	430b      	orrs	r3, r1
 8000864:	6013      	str	r3, [r2, #0]
 8000866:	e012      	b.n	800088e <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber >= 64 && IRQNumber < 96){
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	2b3f      	cmp	r3, #63	; 0x3f
 800086c:	d90f      	bls.n	800088e <GPIO_IRQInterruptConfig+0xe6>
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	2b5f      	cmp	r3, #95	; 0x5f
 8000872:	d80c      	bhi.n	800088e <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 32));
 8000874:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <GPIO_IRQInterruptConfig+0x104>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	79fa      	ldrb	r2, [r7, #7]
 800087a:	f002 021f 	and.w	r2, r2, #31
 800087e:	2101      	movs	r1, #1
 8000880:	fa01 f202 	lsl.w	r2, r1, r2
 8000884:	4611      	mov	r1, r2
 8000886:	4a09      	ldr	r2, [pc, #36]	; (80008ac <GPIO_IRQInterruptConfig+0x104>)
 8000888:	430b      	orrs	r3, r1
 800088a:	6013      	str	r3, [r2, #0]
}
 800088c:	e7ff      	b.n	800088e <GPIO_IRQInterruptConfig+0xe6>
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr
 8000898:	e000e100 	.word	0xe000e100
 800089c:	e000e104 	.word	0xe000e104
 80008a0:	e000e108 	.word	0xe000e108
 80008a4:	e000e180 	.word	0xe000e180
 80008a8:	e000e184 	.word	0xe000e184
 80008ac:	e000e188 	.word	0xe000e188

080008b0 <GPIO_IRQPriorityConfig>:


/*
 * IRQ Priority Configuration
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority){
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	6039      	str	r1, [r7, #0]
 80008ba:	71fb      	strb	r3, [r7, #7]
	uint8_t iprx = IRQNumber / 4;
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	089b      	lsrs	r3, r3, #2
 80008c0:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	f003 0303 	and.w	r3, r3, #3
 80008c8:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_amount = (8 * iprx_section) + (8 - NUM_PR_BITS_IMPLEMENTED);
 80008ca:	7bbb      	ldrb	r3, [r7, #14]
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	3304      	adds	r3, #4
 80008d2:	737b      	strb	r3, [r7, #13]
	*(NVIC_IPR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount);
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80008dc:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80008e0:	6819      	ldr	r1, [r3, #0]
 80008e2:	7b7b      	ldrb	r3, [r7, #13]
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	409a      	lsls	r2, r3
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80008f0:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80008f4:	430a      	orrs	r2, r1
 80008f6:	601a      	str	r2, [r3, #0]
}
 80008f8:	bf00      	nop
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
	...

08000904 <GPIO_IRQHandling>:


/*
 * ISR Handling
 */
void GPIO_IRQHandling(uint8_t PinNumber){
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
	// Clear the EXTI Priority Register corresponding to the pin number
	if(EXTI->PR & (1 << PinNumber)){
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <GPIO_IRQHandling+0x3c>)
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	79fa      	ldrb	r2, [r7, #7]
 8000914:	2101      	movs	r1, #1
 8000916:	fa01 f202 	lsl.w	r2, r1, r2
 800091a:	4013      	ands	r3, r2
 800091c:	2b00      	cmp	r3, #0
 800091e:	d009      	beq.n	8000934 <GPIO_IRQHandling+0x30>
		EXTI->PR |= (1 << PinNumber);
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <GPIO_IRQHandling+0x3c>)
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	79fa      	ldrb	r2, [r7, #7]
 8000926:	2101      	movs	r1, #1
 8000928:	fa01 f202 	lsl.w	r2, r1, r2
 800092c:	4611      	mov	r1, r2
 800092e:	4a04      	ldr	r2, [pc, #16]	; (8000940 <GPIO_IRQHandling+0x3c>)
 8000930:	430b      	orrs	r3, r1
 8000932:	6153      	str	r3, [r2, #20]
	}

}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40013c00 	.word	0x40013c00

08000944 <SPI_PeriClockControl>:
static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle);


// Peripheral Clock Setup
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	460b      	mov	r3, r1
 800094e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000950:	78fb      	ldrb	r3, [r7, #3]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d120      	bne.n	8000998 <SPI_PeriClockControl+0x54>
		// Enable
		if(pSPIx == SPI1){
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a22      	ldr	r2, [pc, #136]	; (80009e4 <SPI_PeriClockControl+0xa0>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d106      	bne.n	800096c <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 800095e:	4b22      	ldr	r3, [pc, #136]	; (80009e8 <SPI_PeriClockControl+0xa4>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	4a21      	ldr	r2, [pc, #132]	; (80009e8 <SPI_PeriClockControl+0xa4>)
 8000964:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000968:	6453      	str	r3, [r2, #68]	; 0x44
			SPI2_PCLK_DI();
		}else if(pSPIx == SPI3){
			SPI3_PCLK_DI();
		}
	}
}
 800096a:	e035      	b.n	80009d8 <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI2){
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a1f      	ldr	r2, [pc, #124]	; (80009ec <SPI_PeriClockControl+0xa8>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d106      	bne.n	8000982 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000974:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <SPI_PeriClockControl+0xa4>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000978:	4a1b      	ldr	r2, [pc, #108]	; (80009e8 <SPI_PeriClockControl+0xa4>)
 800097a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000980:	e02a      	b.n	80009d8 <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI3){
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a1a      	ldr	r2, [pc, #104]	; (80009f0 <SPI_PeriClockControl+0xac>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d126      	bne.n	80009d8 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <SPI_PeriClockControl+0xa4>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	4a16      	ldr	r2, [pc, #88]	; (80009e8 <SPI_PeriClockControl+0xa4>)
 8000990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000994:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000996:	e01f      	b.n	80009d8 <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1){
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a12      	ldr	r2, [pc, #72]	; (80009e4 <SPI_PeriClockControl+0xa0>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d106      	bne.n	80009ae <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <SPI_PeriClockControl+0xa4>)
 80009a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a4:	4a10      	ldr	r2, [pc, #64]	; (80009e8 <SPI_PeriClockControl+0xa4>)
 80009a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009aa:	6453      	str	r3, [r2, #68]	; 0x44
}
 80009ac:	e014      	b.n	80009d8 <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI2){
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <SPI_PeriClockControl+0xa8>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d106      	bne.n	80009c4 <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <SPI_PeriClockControl+0xa4>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	4a0b      	ldr	r2, [pc, #44]	; (80009e8 <SPI_PeriClockControl+0xa4>)
 80009bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80009c0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009c2:	e009      	b.n	80009d8 <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI3){
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <SPI_PeriClockControl+0xac>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d105      	bne.n	80009d8 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <SPI_PeriClockControl+0xa4>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d0:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <SPI_PeriClockControl+0xa4>)
 80009d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009d6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	40013000 	.word	0x40013000
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40003800 	.word	0x40003800
 80009f0:	40003c00 	.word	0x40003c00

080009f4 <SPI_Init>:


// Initialize and De-Initialize
void SPI_Init(SPI_Handle_t *pSPI_Handle){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	// Enable Peripheral Clock
	SPI_PeriClockControl(pSPI_Handle->pSPIx, ENABLE);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2101      	movs	r1, #1
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff ff9e 	bl	8000944 <SPI_PeriClockControl>

	// Configure the SPI_CR1 Register
	uint32_t tempreg = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]

	// 1. Device Mode
	tempreg |= pSPI_Handle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	791b      	ldrb	r3, [r3, #4]
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	461a      	mov	r2, r3
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	60fb      	str	r3, [r7, #12]

	// 2. BusConfig
	if(pSPI_Handle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FULL_DUPLEX){
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	795b      	ldrb	r3, [r3, #5]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d104      	bne.n	8000a2c <SPI_Init+0x38>
		// BIDI mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	e014      	b.n	8000a56 <SPI_Init+0x62>

	}else if(pSPI_Handle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HALF_DUPLEX){
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	795b      	ldrb	r3, [r3, #5]
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d104      	bne.n	8000a3e <SPI_Init+0x4a>
		// BIDI mode should be set
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	e00b      	b.n	8000a56 <SPI_Init+0x62>

	}else if(pSPI_Handle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	795b      	ldrb	r3, [r3, #5]
 8000a42:	2b03      	cmp	r3, #3
 8000a44:	d107      	bne.n	8000a56 <SPI_Init+0x62>
		// BIDI mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a4c:	60fb      	str	r3, [r7, #12]
		// RXONLY bit must be set
		tempreg |= (1 << SPI_CR1_RXONLY);
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a54:	60fb      	str	r3, [r7, #12]
	}

	// 3. SclkSpeed (Baud Rate)
	tempreg |= pSPI_Handle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	799b      	ldrb	r3, [r3, #6]
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	60fb      	str	r3, [r7, #12]

	// 4. DFF (Data Frame Configuration)
	tempreg |= pSPI_Handle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	79db      	ldrb	r3, [r3, #7]
 8000a68:	02db      	lsls	r3, r3, #11
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	60fb      	str	r3, [r7, #12]

	// 5. CPOL (Polarity)
	tempreg |= pSPI_Handle->SPIConfig.SPI_DFF << SPI_CR1_CPOL;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	79db      	ldrb	r3, [r3, #7]
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	461a      	mov	r2, r3
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	60fb      	str	r3, [r7, #12]

	// 6. CPHA (Phase)
	tempreg |= pSPI_Handle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	7a5b      	ldrb	r3, [r3, #9]
 8000a84:	461a      	mov	r2, r3
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	60fb      	str	r3, [r7, #12]

	// 7. SSM
	tempreg |= pSPI_Handle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	7a9b      	ldrb	r3, [r3, #10]
 8000a90:	025b      	lsls	r3, r3, #9
 8000a92:	461a      	mov	r2, r3
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	60fb      	str	r3, [r7, #12]

	pSPI_Handle->pSPIx->CR1 = tempreg;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	601a      	str	r2, [r3, #0]


}
 8000aa2:	bf00      	nop
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <SPI_GetFlagStatus>:
	}

}


uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName){
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	689a      	ldr	r2, [r3, #8]
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	4013      	ands	r3, r2
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e000      	b.n	8000ac6 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <SPI_IRQInterruptConfig>:

}


// IRQ Configurations and ISR Handling
void SPI_IRQInterruptConfig(uint8_t IRQNumber,uint8_t EnOrDi){
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	460a      	mov	r2, r1
 8000ada:	71fb      	strb	r3, [r7, #7]
 8000adc:	4613      	mov	r3, r2
 8000ade:	71bb      	strb	r3, [r7, #6]
	if(EnOrDi == ENABLE){
 8000ae0:	79bb      	ldrb	r3, [r7, #6]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d133      	bne.n	8000b4e <SPI_IRQInterruptConfig+0x7e>
		// Enable
		if(IRQNumber <= 31){
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	2b1f      	cmp	r3, #31
 8000aea:	d80a      	bhi.n	8000b02 <SPI_IRQInterruptConfig+0x32>
			// Program ISER0 Register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000aec:	4b34      	ldr	r3, [pc, #208]	; (8000bc0 <SPI_IRQInterruptConfig+0xf0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	79fa      	ldrb	r2, [r7, #7]
 8000af2:	2101      	movs	r1, #1
 8000af4:	fa01 f202 	lsl.w	r2, r1, r2
 8000af8:	4611      	mov	r1, r2
 8000afa:	4a31      	ldr	r2, [pc, #196]	; (8000bc0 <SPI_IRQInterruptConfig+0xf0>)
 8000afc:	430b      	orrs	r3, r1
 8000afe:	6013      	str	r3, [r2, #0]
		}else if(IRQNumber >= 64 && IRQNumber < 96){
			// Program ICER2 Register
			*NVIC_ICER2 |= (1 << (IRQNumber % 32));
		}
	}
}
 8000b00:	e059      	b.n	8000bb6 <SPI_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64){
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	2b1f      	cmp	r3, #31
 8000b06:	d90f      	bls.n	8000b28 <SPI_IRQInterruptConfig+0x58>
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	2b3f      	cmp	r3, #63	; 0x3f
 8000b0c:	d80c      	bhi.n	8000b28 <SPI_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000b0e:	4b2d      	ldr	r3, [pc, #180]	; (8000bc4 <SPI_IRQInterruptConfig+0xf4>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	79fa      	ldrb	r2, [r7, #7]
 8000b14:	f002 021f 	and.w	r2, r2, #31
 8000b18:	2101      	movs	r1, #1
 8000b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b1e:	4611      	mov	r1, r2
 8000b20:	4a28      	ldr	r2, [pc, #160]	; (8000bc4 <SPI_IRQInterruptConfig+0xf4>)
 8000b22:	430b      	orrs	r3, r1
 8000b24:	6013      	str	r3, [r2, #0]
 8000b26:	e046      	b.n	8000bb6 <SPI_IRQInterruptConfig+0xe6>
		}else if(IRQNumber >= 64 && IRQNumber < 96){
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	2b3f      	cmp	r3, #63	; 0x3f
 8000b2c:	d943      	bls.n	8000bb6 <SPI_IRQInterruptConfig+0xe6>
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	2b5f      	cmp	r3, #95	; 0x5f
 8000b32:	d840      	bhi.n	8000bb6 <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 32));
 8000b34:	4b24      	ldr	r3, [pc, #144]	; (8000bc8 <SPI_IRQInterruptConfig+0xf8>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	79fa      	ldrb	r2, [r7, #7]
 8000b3a:	f002 021f 	and.w	r2, r2, #31
 8000b3e:	2101      	movs	r1, #1
 8000b40:	fa01 f202 	lsl.w	r2, r1, r2
 8000b44:	4611      	mov	r1, r2
 8000b46:	4a20      	ldr	r2, [pc, #128]	; (8000bc8 <SPI_IRQInterruptConfig+0xf8>)
 8000b48:	430b      	orrs	r3, r1
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	e033      	b.n	8000bb6 <SPI_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31){
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	2b1f      	cmp	r3, #31
 8000b52:	d80a      	bhi.n	8000b6a <SPI_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000b54:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <SPI_IRQInterruptConfig+0xfc>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	79fa      	ldrb	r2, [r7, #7]
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b60:	4611      	mov	r1, r2
 8000b62:	4a1a      	ldr	r2, [pc, #104]	; (8000bcc <SPI_IRQInterruptConfig+0xfc>)
 8000b64:	430b      	orrs	r3, r1
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	e025      	b.n	8000bb6 <SPI_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64){
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2b1f      	cmp	r3, #31
 8000b6e:	d90f      	bls.n	8000b90 <SPI_IRQInterruptConfig+0xc0>
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	2b3f      	cmp	r3, #63	; 0x3f
 8000b74:	d80c      	bhi.n	8000b90 <SPI_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <SPI_IRQInterruptConfig+0x100>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	79fa      	ldrb	r2, [r7, #7]
 8000b7c:	f002 021f 	and.w	r2, r2, #31
 8000b80:	2101      	movs	r1, #1
 8000b82:	fa01 f202 	lsl.w	r2, r1, r2
 8000b86:	4611      	mov	r1, r2
 8000b88:	4a11      	ldr	r2, [pc, #68]	; (8000bd0 <SPI_IRQInterruptConfig+0x100>)
 8000b8a:	430b      	orrs	r3, r1
 8000b8c:	6013      	str	r3, [r2, #0]
 8000b8e:	e012      	b.n	8000bb6 <SPI_IRQInterruptConfig+0xe6>
		}else if(IRQNumber >= 64 && IRQNumber < 96){
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	2b3f      	cmp	r3, #63	; 0x3f
 8000b94:	d90f      	bls.n	8000bb6 <SPI_IRQInterruptConfig+0xe6>
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	2b5f      	cmp	r3, #95	; 0x5f
 8000b9a:	d80c      	bhi.n	8000bb6 <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 32));
 8000b9c:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <SPI_IRQInterruptConfig+0x104>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	79fa      	ldrb	r2, [r7, #7]
 8000ba2:	f002 021f 	and.w	r2, r2, #31
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bac:	4611      	mov	r1, r2
 8000bae:	4a09      	ldr	r2, [pc, #36]	; (8000bd4 <SPI_IRQInterruptConfig+0x104>)
 8000bb0:	430b      	orrs	r3, r1
 8000bb2:	6013      	str	r3, [r2, #0]
}
 8000bb4:	e7ff      	b.n	8000bb6 <SPI_IRQInterruptConfig+0xe6>
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	e000e100 	.word	0xe000e100
 8000bc4:	e000e104 	.word	0xe000e104
 8000bc8:	e000e108 	.word	0xe000e108
 8000bcc:	e000e180 	.word	0xe000e180
 8000bd0:	e000e184 	.word	0xe000e184
 8000bd4:	e000e188 	.word	0xe000e188

08000bd8 <SPI_IRQHandling>:
	uint8_t shift_amount = (8 * iprx_section) + (8 - NUM_PR_BITS_IMPLEMENTED);
	*(NVIC_IPR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount);
}


void SPI_IRQHandling(SPI_Handle_t *pHandle){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	uint8_t txe = pHandle->pSPIx->SR & (1 << SPI_SR_TXE);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	f003 0302 	and.w	r3, r3, #2
 8000bec:	73fb      	strb	r3, [r7, #15]
	uint8_t txeie = pHandle->pSPIx->CR2 & (1 << SPI_CR2_TXEIE);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000bfa:	73bb      	strb	r3, [r7, #14]
	if(txe && txeie){
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d005      	beq.n	8000c0e <SPI_IRQHandling+0x36>
 8000c02:	7bbb      	ldrb	r3, [r7, #14]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d002      	beq.n	8000c0e <SPI_IRQHandling+0x36>
		// Handle TXE
		spi_txe_interrupt_handle(pHandle);
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f000 f8ae 	bl	8000d6a <spi_txe_interrupt_handle>
	}

	uint8_t rxne = pHandle->pSPIx->SR & (1 << SPI_SR_RXNE);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	737b      	strb	r3, [r7, #13]
	uint8_t rxneie = pHandle->pSPIx->CR2 & (1 << SPI_CR2_RXNEIE);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c28:	733b      	strb	r3, [r7, #12]
	if(rxne && rxneie){
 8000c2a:	7b7b      	ldrb	r3, [r7, #13]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d005      	beq.n	8000c3c <SPI_IRQHandling+0x64>
 8000c30:	7b3b      	ldrb	r3, [r7, #12]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d002      	beq.n	8000c3c <SPI_IRQHandling+0x64>
		// Handle RXNE
		spi_rxne_interrupt_handle(pHandle);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f000 f8d2 	bl	8000de0 <spi_rxne_interrupt_handle>
	}

	uint8_t ovr = pHandle->pSPIx->SR & (1 << SPI_SR_OVR);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c48:	72fb      	strb	r3, [r7, #11]
	uint8_t errie = pHandle->pSPIx->CR2 & (1 << SPI_CR2_ERRIE);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	f003 0320 	and.w	r3, r3, #32
 8000c56:	72bb      	strb	r3, [r7, #10]
	if(ovr && errie){
 8000c58:	7afb      	ldrb	r3, [r7, #11]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d005      	beq.n	8000c6a <SPI_IRQHandling+0x92>
 8000c5e:	7abb      	ldrb	r3, [r7, #10]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d002      	beq.n	8000c6a <SPI_IRQHandling+0x92>
		// Handle ovr
		spi_ovr_err_interrupt_handle(pHandle);
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f000 f8f8 	bl	8000e5a <spi_ovr_err_interrupt_handle>
	}

}
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <SPI_SendDataIT>:


uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer, uint32_t Length){
 8000c72:	b480      	push	{r7}
 8000c74:	b087      	sub	sp, #28
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	60f8      	str	r0, [r7, #12]
 8000c7a:	60b9      	str	r1, [r7, #8]
 8000c7c:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->TxState;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	7f1b      	ldrb	r3, [r3, #28]
 8000c82:	75fb      	strb	r3, [r7, #23]
	if( state != SPI_BUSY_IN_TX){
 8000c84:	7dfb      	ldrb	r3, [r7, #23]
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d010      	beq.n	8000cac <SPI_SendDataIT+0x3a>
		// 1. Save the Tx Buffer Address and Length
		pSPIHandle->pTxBuffer = pTxBuffer;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	68ba      	ldr	r2, [r7, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLength = Length;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	615a      	str	r2, [r3, #20]

		// 2. Update SPI State as busy in Tx so no other code can take over
		pSPIHandle->TxState = SPI_BUSY_IN_TX;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	2202      	movs	r2, #2
 8000c9a:	771a      	strb	r2, [r3, #28]

		// 3. Enable TXEIE Control Bit to get Interrupt whenever TXE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_TXEIE);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000caa:	605a      	str	r2, [r3, #4]
	}

	return state;
 8000cac:	7dfb      	ldrb	r3, [r7, #23]

}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	371c      	adds	r7, #28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <SPI_ReceiveDataIT>:

uint8_t SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t Length){
 8000cb8:	b480      	push	{r7}
 8000cba:	b087      	sub	sp, #28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->RxState;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	7f5b      	ldrb	r3, [r3, #29]
 8000cc8:	75fb      	strb	r3, [r7, #23]
	if( state != SPI_BUSY_IN_RX){
 8000cca:	7dfb      	ldrb	r3, [r7, #23]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d010      	beq.n	8000cf2 <SPI_ReceiveDataIT+0x3a>
		// 1. Save the Rx Buffer Address and Length
		pSPIHandle->pRxBuffer = pRxBuffer;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	611a      	str	r2, [r3, #16]
		pSPIHandle->RxLength = Length;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	619a      	str	r2, [r3, #24]

		// 2. Update SPI State as busy in Rx so no other code can take over
		pSPIHandle->RxState = SPI_BUSY_IN_RX;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	775a      	strb	r2, [r3, #29]

		// 3. Enable TXEIE Control Bit to get Interrupt whenever RXNEIE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_RXNEIE);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	685a      	ldr	r2, [r3, #4]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000cf0:	605a      	str	r2, [r3, #4]
	}

	return state;
 8000cf2:	7dfb      	ldrb	r3, [r7, #23]

}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	371c      	adds	r7, #28
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr

08000cfe <SPI_PeripheralControl>:


void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	460b      	mov	r3, r1
 8000d08:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000d0a:	78fb      	ldrb	r3, [r7, #3]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d106      	bne.n	8000d1e <SPI_PeripheralControl+0x20>
		// Enable
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	601a      	str	r2, [r3, #0]
	}else{
		// Disable
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000d1c:	e005      	b.n	8000d2a <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	601a      	str	r2, [r3, #0]
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr

08000d34 <SPI_SSOEConfig>:
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}


void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000d40:	78fb      	ldrb	r3, [r7, #3]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d106      	bne.n	8000d54 <SPI_SSOEConfig+0x20>
		// Enable
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f043 0204 	orr.w	r2, r3, #4
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	605a      	str	r2, [r3, #4]
	}else{
		// Disable
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000d52:	e005      	b.n	8000d60 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f023 0204 	bic.w	r2, r3, #4
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	605a      	str	r2, [r3, #4]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr

08000d6a <spi_txe_interrupt_handle>:


/*
 * SPI ISR Helper Functions
 */
static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle){
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
	// Check if 8bit or 16bit
	if((pSPIHandle->pSPIx->CR1 & (1 << SPI_CR1_DFF))){
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d010      	beq.n	8000da2 <spi_txe_interrupt_handle+0x38>
		// 16bit
		// Load DR with 2 byte of data
		pSPIHandle->pSPIx->DR = *((uint16_t*)pSPIHandle->pTxBuffer);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	881a      	ldrh	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	60da      	str	r2, [r3, #12]
		// Increment Buffer Address
		(uint16_t*)pSPIHandle->pTxBuffer++;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	1c5a      	adds	r2, r3, #1
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	60da      	str	r2, [r3, #12]
		// Length-- both bytes
		pSPIHandle->TxLength -= 2;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	1e9a      	subs	r2, r3, #2
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	615a      	str	r2, [r3, #20]
 8000da0:	e00f      	b.n	8000dc2 <spi_txe_interrupt_handle+0x58>
	}else{
		// 8bit
		pSPIHandle->pSPIx->DR = *pSPIHandle->pTxBuffer;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	781a      	ldrb	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	60da      	str	r2, [r3, #12]
		pSPIHandle->pTxBuffer++;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	1c5a      	adds	r2, r3, #1
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLength--;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	695b      	ldr	r3, [r3, #20]
 8000dbc:	1e5a      	subs	r2, r3, #1
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	615a      	str	r2, [r3, #20]
	}

	if(! pSPIHandle->TxLength){
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d106      	bne.n	8000dd8 <spi_txe_interrupt_handle+0x6e>
		// TxLength is zero, close the SPI Transmission
		SPI_CloseTransmission(pSPIHandle);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f000 f85d 	bl	8000e8a <SPI_CloseTransmission>
		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_TX_COMPLETE);
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f000 f974 	bl	80010c0 <SPI_ApplicationEventCallback>
	}

}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <spi_rxne_interrupt_handle>:

static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	// Check if 8bit or 16bit
	if((pSPIHandle->pSPIx->CR1 & (1 << SPI_CR1_DFF))){
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d011      	beq.n	8000e1a <spi_rxne_interrupt_handle+0x3a>
		// 16bit
		// Load data from DR to RxBuffer Address
		*((uint16_t*)pSPIHandle->pRxBuffer) = pSPIHandle->pSPIx->DR;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	68da      	ldr	r2, [r3, #12]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	691b      	ldr	r3, [r3, #16]
 8000e00:	b292      	uxth	r2, r2
 8000e02:	801a      	strh	r2, [r3, #0]
		// Increment Buffer Address
		(uint16_t*)pSPIHandle->pRxBuffer++;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	691b      	ldr	r3, [r3, #16]
 8000e08:	1c5a      	adds	r2, r3, #1
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	611a      	str	r2, [r3, #16]
		// Length--
		pSPIHandle->RxLength -= 2;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	1e9a      	subs	r2, r3, #2
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	619a      	str	r2, [r3, #24]
 8000e18:	e010      	b.n	8000e3c <spi_rxne_interrupt_handle+0x5c>
	}else{
		// 8bit
		*pSPIHandle->pRxBuffer = pSPIHandle->pSPIx->DR;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	68da      	ldr	r2, [r3, #12]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	691b      	ldr	r3, [r3, #16]
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	701a      	strb	r2, [r3, #0]
		pSPIHandle->pRxBuffer++;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	691b      	ldr	r3, [r3, #16]
 8000e2c:	1c5a      	adds	r2, r3, #1
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	611a      	str	r2, [r3, #16]
		pSPIHandle->RxLength--;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	1e5a      	subs	r2, r3, #1
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	619a      	str	r2, [r3, #24]
	}
	if(! pSPIHandle->RxLength){
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d106      	bne.n	8000e52 <spi_rxne_interrupt_handle+0x72>
		// Reception is complete
		SPI_CloseReception(pSPIHandle);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f000 f83a 	bl	8000ebe <SPI_CloseReception>
		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_RX_COMPLETE);
 8000e4a:	2102      	movs	r1, #2
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f000 f937 	bl	80010c0 <SPI_ApplicationEventCallback>
	}

}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <spi_ovr_err_interrupt_handle>:

static void spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle){
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b084      	sub	sp, #16
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
	uint8_t temp;
	// Clear ovr flag
	if(pSPIHandle->TxState != SPI_BUSY_IN_TX){
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	7f1b      	ldrb	r3, [r3, #28]
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d007      	beq.n	8000e7a <spi_ovr_err_interrupt_handle+0x20>
		temp = pSPIHandle->pSPIx->DR;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	73fb      	strb	r3, [r7, #15]
		temp = pSPIHandle->pSPIx->SR;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	73fb      	strb	r3, [r7, #15]
	}
	(void)temp;
	// Inform the Application
	SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_OVR_ERR);
 8000e7a:	2103      	movs	r1, #3
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f000 f91f 	bl	80010c0 <SPI_ApplicationEventCallback>
}
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <SPI_CloseTransmission>:
	temp = pSPIx->DR;
	temp = pSPIx->SR;
	(void)temp;
}

void SPI_CloseTransmission(SPI_Handle_t *pSPIHandle){
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_TXEIE); // Prevents interrupts from setting up TXE flag
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	685a      	ldr	r2, [r3, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ea0:	605a      	str	r2, [r3, #4]
	pSPIHandle->pTxBuffer = NULL;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	60da      	str	r2, [r3, #12]
	pSPIHandle->TxLength = 0;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	615a      	str	r2, [r3, #20]
	pSPIHandle->TxState = SPI_READY;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	771a      	strb	r2, [r3, #28]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr

08000ebe <SPI_CloseReception>:

void SPI_CloseReception(SPI_Handle_t *pSPIHandle){
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_RXNEIE); // Prevents interrupts from setting up TXE flag
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ed4:	605a      	str	r2, [r3, #4]
	pSPIHandle->pRxBuffer = NULL;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
	pSPIHandle->RxLength = 0;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	619a      	str	r2, [r3, #24]
	pSPIHandle->RxState = SPI_READY;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	775a      	strb	r2, [r3, #29]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr
	...

08000ef4 <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <SPI2_GPIOInits+0x58>)
 8000efc:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFUN;
 8000efe:	2302      	movs	r3, #2
 8000f00:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000f02:	2305      	movs	r3, #5
 8000f04:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000f06:	2300      	movs	r3, #0
 8000f08:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000f12:	230d      	movs	r3, #13
 8000f14:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fa99 	bl	8000450 <GPIO_Init>

	//MOSI
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000f1e:	230f      	movs	r3, #15
 8000f20:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fa93 	bl	8000450 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000f2a:	230e      	movs	r3, #14
 8000f2c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fa8d 	bl	8000450 <GPIO_Init>


	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000f36:	230c      	movs	r3, #12
 8000f38:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fa87 	bl	8000450 <GPIO_Init>


}
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40020400 	.word	0x40020400

08000f50 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	SPI2handle.pSPIx = SPI2;
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <SPI2_Inits+0x40>)
 8000f56:	4a0f      	ldr	r2, [pc, #60]	; (8000f94 <SPI2_Inits+0x44>)
 8000f58:	601a      	str	r2, [r3, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FULL_DUPLEX;
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <SPI2_Inits+0x40>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	715a      	strb	r2, [r3, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000f60:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <SPI2_Inits+0x40>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	711a      	strb	r2, [r3, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <SPI2_Inits+0x40>)
 8000f68:	2204      	movs	r2, #4
 8000f6a:	719a      	strb	r2, [r3, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <SPI2_Inits+0x40>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	71da      	strb	r2, [r3, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000f72:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <SPI2_Inits+0x40>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	721a      	strb	r2, [r3, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <SPI2_Inits+0x40>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	725a      	strb	r2, [r3, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //Hardware slave management enabled for NSS pin
 8000f7e:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <SPI2_Inits+0x40>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI2handle);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <SPI2_Inits+0x40>)
 8000f86:	f7ff fd35 	bl	80009f4 <SPI_Init>
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000078 	.word	0x20000078
 8000f94:	40003800 	.word	0x40003800

08000f98 <Slave_GPIO_InterruptPinInit>:


/*This function configures the gpio pin over which SPI peripheral issues data available interrupt */
void Slave_GPIO_InterruptPinInit(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
	GPIO_Handle_t spiIntPin;
	memset(&spiIntPin,0,sizeof(spiIntPin));
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	220c      	movs	r2, #12
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f000 faae 	bl	8001506 <memset>

	//this is led gpio configuration
	spiIntPin.pGPIOx = GPIOB;
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <Slave_GPIO_InterruptPinInit+0x48>)
 8000fac:	607b      	str	r3, [r7, #4]
	spiIntPin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000fae:	2306      	movs	r3, #6
 8000fb0:	723b      	strb	r3, [r7, #8]
	spiIntPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	727b      	strb	r3, [r7, #9]
	spiIntPin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	72bb      	strb	r3, [r7, #10]
	spiIntPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&spiIntPin);
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fa45 	bl	8000450 <GPIO_Init>

	GPIO_IRQPriorityConfig(IRQ_NUM_EXTI9_5,NVIC_IRQ_PRIO15);
 8000fc6:	210f      	movs	r1, #15
 8000fc8:	2017      	movs	r0, #23
 8000fca:	f7ff fc71 	bl	80008b0 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NUM_EXTI9_5,ENABLE);
 8000fce:	2101      	movs	r1, #1
 8000fd0:	2017      	movs	r0, #23
 8000fd2:	f7ff fbe9 	bl	80007a8 <GPIO_IRQInterruptConfig>

}
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40020400 	.word	0x40020400

08000fe4 <main>:


int main(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0

	uint8_t dummy = 0xff;
 8000fea:	23ff      	movs	r3, #255	; 0xff
 8000fec:	71fb      	strb	r3, [r7, #7]

	Slave_GPIO_InterruptPinInit();
 8000fee:	f7ff ffd3 	bl	8000f98 <Slave_GPIO_InterruptPinInit>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 8000ff2:	f7ff ff7f 	bl	8000ef4 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 8000ff6:	f7ff ffab 	bl	8000f50 <SPI2_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	4824      	ldr	r0, [pc, #144]	; (8001090 <main+0xac>)
 8000ffe:	f7ff fe99 	bl	8000d34 <SPI_SSOEConfig>

	SPI_IRQInterruptConfig(IRQ_NUM_SPI2, ENABLE);
 8001002:	2101      	movs	r1, #1
 8001004:	2024      	movs	r0, #36	; 0x24
 8001006:	f7ff fd63 	bl	8000ad0 <SPI_IRQInterruptConfig>

	while(1){

		rcvStop = 0;
 800100a:	4b22      	ldr	r3, [pc, #136]	; (8001094 <main+0xb0>)
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]

		while(!dataAvailable); //wait till data available interrupt from transmitter device(slave)
 8001010:	bf00      	nop
 8001012:	4b21      	ldr	r3, [pc, #132]	; (8001098 <main+0xb4>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	d0fa      	beq.n	8001012 <main+0x2e>

		GPIO_IRQInterruptConfig(IRQ_NUM_EXTI9_5, DISABLE);
 800101c:	2100      	movs	r1, #0
 800101e:	2017      	movs	r0, #23
 8001020:	f7ff fbc2 	bl	80007a8 <GPIO_IRQInterruptConfig>

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 8001024:	2101      	movs	r1, #1
 8001026:	481a      	ldr	r0, [pc, #104]	; (8001090 <main+0xac>)
 8001028:	f7ff fe69 	bl	8000cfe <SPI_PeripheralControl>


		while(!rcvStop)
 800102c:	e012      	b.n	8001054 <main+0x70>
		{
			/* fetch the data from the SPI peripheral byte by byte in interrupt mode */
			while ( SPI_SendDataIT(&SPI2handle,&dummy,1) == SPI_BUSY_IN_TX);
 800102e:	bf00      	nop
 8001030:	1dfb      	adds	r3, r7, #7
 8001032:	2201      	movs	r2, #1
 8001034:	4619      	mov	r1, r3
 8001036:	4819      	ldr	r0, [pc, #100]	; (800109c <main+0xb8>)
 8001038:	f7ff fe1b 	bl	8000c72 <SPI_SendDataIT>
 800103c:	4603      	mov	r3, r0
 800103e:	2b02      	cmp	r3, #2
 8001040:	d0f6      	beq.n	8001030 <main+0x4c>
			while ( SPI_ReceiveDataIT(&SPI2handle,&ReadByte,1) == SPI_BUSY_IN_RX );
 8001042:	bf00      	nop
 8001044:	2201      	movs	r2, #1
 8001046:	4916      	ldr	r1, [pc, #88]	; (80010a0 <main+0xbc>)
 8001048:	4814      	ldr	r0, [pc, #80]	; (800109c <main+0xb8>)
 800104a:	f7ff fe35 	bl	8000cb8 <SPI_ReceiveDataIT>
 800104e:	4603      	mov	r3, r0
 8001050:	2b01      	cmp	r3, #1
 8001052:	d0f7      	beq.n	8001044 <main+0x60>
		while(!rcvStop)
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <main+0xb0>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d0e7      	beq.n	800102e <main+0x4a>
		}


		// confirm SPI is not busy
		while( SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG) );
 800105e:	bf00      	nop
 8001060:	2180      	movs	r1, #128	; 0x80
 8001062:	480b      	ldr	r0, [pc, #44]	; (8001090 <main+0xac>)
 8001064:	f7ff fd21 	bl	8000aaa <SPI_GetFlagStatus>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1f8      	bne.n	8001060 <main+0x7c>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
 800106e:	2100      	movs	r1, #0
 8001070:	4807      	ldr	r0, [pc, #28]	; (8001090 <main+0xac>)
 8001072:	f7ff fe44 	bl	8000cfe <SPI_PeripheralControl>

		printf("Rcvd data = %s\n",RcvBuff);
 8001076:	490b      	ldr	r1, [pc, #44]	; (80010a4 <main+0xc0>)
 8001078:	480b      	ldr	r0, [pc, #44]	; (80010a8 <main+0xc4>)
 800107a:	f000 f9ef 	bl	800145c <iprintf>

		dataAvailable = 0;
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <main+0xb4>)
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]

		GPIO_IRQInterruptConfig(IRQ_NUM_EXTI9_5,ENABLE);
 8001084:	2101      	movs	r1, #1
 8001086:	2017      	movs	r0, #23
 8001088:	f7ff fb8e 	bl	80007a8 <GPIO_IRQInterruptConfig>
		rcvStop = 0;
 800108c:	e7bd      	b.n	800100a <main+0x26>
 800108e:	bf00      	nop
 8001090:	40003800 	.word	0x40003800
 8001094:	2000028d 	.word	0x2000028d
 8001098:	2000028e 	.word	0x2000028e
 800109c:	20000078 	.word	0x20000078
 80010a0:	2000028c 	.word	0x2000028c
 80010a4:	20000098 	.word	0x20000098
 80010a8:	08002150 	.word	0x08002150

080010ac <SPI2_IRQHandler>:

}

/* Runs when a data byte is received from the peripheral over SPI*/
void SPI2_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0

	SPI_IRQHandling(&SPI2handle);
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <SPI2_IRQHandler+0x10>)
 80010b2:	f7ff fd91 	bl	8000bd8 <SPI_IRQHandling>
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000078 	.word	0x20000078

080010c0 <SPI_ApplicationEventCallback>:



void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle,uint8_t AppEv)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	70fb      	strb	r3, [r7, #3]
	static uint32_t i = 0;
	/* In the RX complete event , copy data in to rcv buffer . '\0' indicates end of message(rcvStop = 1) */
	if(AppEv == SPI_EVENT_RX_COMPLETE)
 80010cc:	78fb      	ldrb	r3, [r7, #3]
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d11f      	bne.n	8001112 <SPI_ApplicationEventCallback+0x52>
	{
				RcvBuff[i++] = ReadByte;
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <SPI_ApplicationEventCallback+0x5c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	1c5a      	adds	r2, r3, #1
 80010d8:	4910      	ldr	r1, [pc, #64]	; (800111c <SPI_ApplicationEventCallback+0x5c>)
 80010da:	600a      	str	r2, [r1, #0]
 80010dc:	4a10      	ldr	r2, [pc, #64]	; (8001120 <SPI_ApplicationEventCallback+0x60>)
 80010de:	7812      	ldrb	r2, [r2, #0]
 80010e0:	b2d1      	uxtb	r1, r2
 80010e2:	4a10      	ldr	r2, [pc, #64]	; (8001124 <SPI_ApplicationEventCallback+0x64>)
 80010e4:	54d1      	strb	r1, [r2, r3]
				if(ReadByte == '\0' || ( i == MAX_LEN)){
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <SPI_ApplicationEventCallback+0x60>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d004      	beq.n	80010fa <SPI_ApplicationEventCallback+0x3a>
 80010f0:	4b0a      	ldr	r3, [pc, #40]	; (800111c <SPI_ApplicationEventCallback+0x5c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010f8:	d10b      	bne.n	8001112 <SPI_ApplicationEventCallback+0x52>
					rcvStop = 1;
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <SPI_ApplicationEventCallback+0x68>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	701a      	strb	r2, [r3, #0]
					RcvBuff[i-1] = '\0';
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <SPI_ApplicationEventCallback+0x5c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	3b01      	subs	r3, #1
 8001106:	4a07      	ldr	r2, [pc, #28]	; (8001124 <SPI_ApplicationEventCallback+0x64>)
 8001108:	2100      	movs	r1, #0
 800110a:	54d1      	strb	r1, [r2, r3]
					i = 0;
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <SPI_ApplicationEventCallback+0x5c>)
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
				}
	}

}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr
 800111c:	20000290 	.word	0x20000290
 8001120:	2000028c 	.word	0x2000028c
 8001124:	20000098 	.word	0x20000098
 8001128:	2000028d 	.word	0x2000028d

0800112c <EXTI9_5_IRQHandler>:

/* Slave data available interrupt handler */
void EXTI9_5_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_6);
 8001130:	2006      	movs	r0, #6
 8001132:	f7ff fbe7 	bl	8000904 <GPIO_IRQHandling>
	dataAvailable = 1;
 8001136:	4b02      	ldr	r3, [pc, #8]	; (8001140 <EXTI9_5_IRQHandler+0x14>)
 8001138:	2201      	movs	r2, #1
 800113a:	701a      	strb	r2, [r3, #0]
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}
 8001140:	2000028e 	.word	0x2000028e

08001144 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	e00a      	b.n	800116c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001156:	f3af 8000 	nop.w
 800115a:	4601      	mov	r1, r0
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	1c5a      	adds	r2, r3, #1
 8001160:	60ba      	str	r2, [r7, #8]
 8001162:	b2ca      	uxtb	r2, r1
 8001164:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	3301      	adds	r3, #1
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	429a      	cmp	r2, r3
 8001172:	dbf0      	blt.n	8001156 <_read+0x12>
  }

  return len;
 8001174:	687b      	ldr	r3, [r7, #4]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b086      	sub	sp, #24
 8001182:	af00      	add	r7, sp, #0
 8001184:	60f8      	str	r0, [r7, #12]
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	e009      	b.n	80011a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	1c5a      	adds	r2, r3, #1
 8001194:	60ba      	str	r2, [r7, #8]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	3301      	adds	r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	dbf1      	blt.n	8001190 <_write+0x12>
  }
  return len;
 80011ac:	687b      	ldr	r3, [r7, #4]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <_close>:

int _close(int file)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011dc:	605a      	str	r2, [r3, #4]
  return 0;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr

080011ea <_isatty>:

int _isatty(int file)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011f2:	2301      	movs	r3, #1
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr

080011fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011fe:	b480      	push	{r7}
 8001200:	b085      	sub	sp, #20
 8001202:	af00      	add	r7, sp, #0
 8001204:	60f8      	str	r0, [r7, #12]
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
	...

08001218 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001220:	4a14      	ldr	r2, [pc, #80]	; (8001274 <_sbrk+0x5c>)
 8001222:	4b15      	ldr	r3, [pc, #84]	; (8001278 <_sbrk+0x60>)
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800122c:	4b13      	ldr	r3, [pc, #76]	; (800127c <_sbrk+0x64>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d102      	bne.n	800123a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <_sbrk+0x64>)
 8001236:	4a12      	ldr	r2, [pc, #72]	; (8001280 <_sbrk+0x68>)
 8001238:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800123a:	4b10      	ldr	r3, [pc, #64]	; (800127c <_sbrk+0x64>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4413      	add	r3, r2
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	429a      	cmp	r2, r3
 8001246:	d207      	bcs.n	8001258 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001248:	f000 f9ac 	bl	80015a4 <__errno>
 800124c:	4603      	mov	r3, r0
 800124e:	220c      	movs	r2, #12
 8001250:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001256:	e009      	b.n	800126c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <_sbrk+0x64>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800125e:	4b07      	ldr	r3, [pc, #28]	; (800127c <_sbrk+0x64>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4413      	add	r3, r2
 8001266:	4a05      	ldr	r2, [pc, #20]	; (800127c <_sbrk+0x64>)
 8001268:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800126a:	68fb      	ldr	r3, [r7, #12]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20020000 	.word	0x20020000
 8001278:	00000400 	.word	0x00000400
 800127c:	20000294 	.word	0x20000294
 8001280:	200003e8 	.word	0x200003e8

08001284 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001284:	480d      	ldr	r0, [pc, #52]	; (80012bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001286:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001288:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800128c:	480c      	ldr	r0, [pc, #48]	; (80012c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800128e:	490d      	ldr	r1, [pc, #52]	; (80012c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001290:	4a0d      	ldr	r2, [pc, #52]	; (80012c8 <LoopForever+0xe>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001294:	e002      	b.n	800129c <LoopCopyDataInit>

08001296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129a:	3304      	adds	r3, #4

0800129c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800129c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a0:	d3f9      	bcc.n	8001296 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a2:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80012a4:	4c0a      	ldr	r4, [pc, #40]	; (80012d0 <LoopForever+0x16>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a8:	e001      	b.n	80012ae <LoopFillZerobss>

080012aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ac:	3204      	adds	r2, #4

080012ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b0:	d3fb      	bcc.n	80012aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012b2:	f000 f97d 	bl	80015b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012b6:	f7ff fe95 	bl	8000fe4 <main>

080012ba <LoopForever>:

LoopForever:
  b LoopForever
 80012ba:	e7fe      	b.n	80012ba <LoopForever>
  ldr   r0, =_estack
 80012bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80012c8:	0800219c 	.word	0x0800219c
  ldr r2, =_sbss
 80012cc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80012d0:	200003e4 	.word	0x200003e4

080012d4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012d4:	e7fe      	b.n	80012d4 <ADC_IRQHandler>
	...

080012d8 <std>:
 80012d8:	2300      	movs	r3, #0
 80012da:	b510      	push	{r4, lr}
 80012dc:	4604      	mov	r4, r0
 80012de:	e9c0 3300 	strd	r3, r3, [r0]
 80012e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80012e6:	6083      	str	r3, [r0, #8]
 80012e8:	8181      	strh	r1, [r0, #12]
 80012ea:	6643      	str	r3, [r0, #100]	; 0x64
 80012ec:	81c2      	strh	r2, [r0, #14]
 80012ee:	6183      	str	r3, [r0, #24]
 80012f0:	4619      	mov	r1, r3
 80012f2:	2208      	movs	r2, #8
 80012f4:	305c      	adds	r0, #92	; 0x5c
 80012f6:	f000 f906 	bl	8001506 <memset>
 80012fa:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <std+0x58>)
 80012fc:	6263      	str	r3, [r4, #36]	; 0x24
 80012fe:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <std+0x5c>)
 8001300:	62a3      	str	r3, [r4, #40]	; 0x28
 8001302:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <std+0x60>)
 8001304:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <std+0x64>)
 8001308:	6323      	str	r3, [r4, #48]	; 0x30
 800130a:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <std+0x68>)
 800130c:	6224      	str	r4, [r4, #32]
 800130e:	429c      	cmp	r4, r3
 8001310:	d006      	beq.n	8001320 <std+0x48>
 8001312:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001316:	4294      	cmp	r4, r2
 8001318:	d002      	beq.n	8001320 <std+0x48>
 800131a:	33d0      	adds	r3, #208	; 0xd0
 800131c:	429c      	cmp	r4, r3
 800131e:	d105      	bne.n	800132c <std+0x54>
 8001320:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001328:	f000 b966 	b.w	80015f8 <__retarget_lock_init_recursive>
 800132c:	bd10      	pop	{r4, pc}
 800132e:	bf00      	nop
 8001330:	08001481 	.word	0x08001481
 8001334:	080014a3 	.word	0x080014a3
 8001338:	080014db 	.word	0x080014db
 800133c:	080014ff 	.word	0x080014ff
 8001340:	20000298 	.word	0x20000298

08001344 <stdio_exit_handler>:
 8001344:	4a02      	ldr	r2, [pc, #8]	; (8001350 <stdio_exit_handler+0xc>)
 8001346:	4903      	ldr	r1, [pc, #12]	; (8001354 <stdio_exit_handler+0x10>)
 8001348:	4803      	ldr	r0, [pc, #12]	; (8001358 <stdio_exit_handler+0x14>)
 800134a:	f000 b869 	b.w	8001420 <_fwalk_sglue>
 800134e:	bf00      	nop
 8001350:	20000000 	.word	0x20000000
 8001354:	08001e95 	.word	0x08001e95
 8001358:	2000000c 	.word	0x2000000c

0800135c <cleanup_stdio>:
 800135c:	6841      	ldr	r1, [r0, #4]
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <cleanup_stdio+0x34>)
 8001360:	4299      	cmp	r1, r3
 8001362:	b510      	push	{r4, lr}
 8001364:	4604      	mov	r4, r0
 8001366:	d001      	beq.n	800136c <cleanup_stdio+0x10>
 8001368:	f000 fd94 	bl	8001e94 <_fflush_r>
 800136c:	68a1      	ldr	r1, [r4, #8]
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <cleanup_stdio+0x38>)
 8001370:	4299      	cmp	r1, r3
 8001372:	d002      	beq.n	800137a <cleanup_stdio+0x1e>
 8001374:	4620      	mov	r0, r4
 8001376:	f000 fd8d 	bl	8001e94 <_fflush_r>
 800137a:	68e1      	ldr	r1, [r4, #12]
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <cleanup_stdio+0x3c>)
 800137e:	4299      	cmp	r1, r3
 8001380:	d004      	beq.n	800138c <cleanup_stdio+0x30>
 8001382:	4620      	mov	r0, r4
 8001384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001388:	f000 bd84 	b.w	8001e94 <_fflush_r>
 800138c:	bd10      	pop	{r4, pc}
 800138e:	bf00      	nop
 8001390:	20000298 	.word	0x20000298
 8001394:	20000300 	.word	0x20000300
 8001398:	20000368 	.word	0x20000368

0800139c <global_stdio_init.part.0>:
 800139c:	b510      	push	{r4, lr}
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <global_stdio_init.part.0+0x30>)
 80013a0:	4c0b      	ldr	r4, [pc, #44]	; (80013d0 <global_stdio_init.part.0+0x34>)
 80013a2:	4a0c      	ldr	r2, [pc, #48]	; (80013d4 <global_stdio_init.part.0+0x38>)
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	4620      	mov	r0, r4
 80013a8:	2200      	movs	r2, #0
 80013aa:	2104      	movs	r1, #4
 80013ac:	f7ff ff94 	bl	80012d8 <std>
 80013b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80013b4:	2201      	movs	r2, #1
 80013b6:	2109      	movs	r1, #9
 80013b8:	f7ff ff8e 	bl	80012d8 <std>
 80013bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80013c0:	2202      	movs	r2, #2
 80013c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013c6:	2112      	movs	r1, #18
 80013c8:	f7ff bf86 	b.w	80012d8 <std>
 80013cc:	200003d0 	.word	0x200003d0
 80013d0:	20000298 	.word	0x20000298
 80013d4:	08001345 	.word	0x08001345

080013d8 <__sfp_lock_acquire>:
 80013d8:	4801      	ldr	r0, [pc, #4]	; (80013e0 <__sfp_lock_acquire+0x8>)
 80013da:	f000 b90e 	b.w	80015fa <__retarget_lock_acquire_recursive>
 80013de:	bf00      	nop
 80013e0:	200003d9 	.word	0x200003d9

080013e4 <__sfp_lock_release>:
 80013e4:	4801      	ldr	r0, [pc, #4]	; (80013ec <__sfp_lock_release+0x8>)
 80013e6:	f000 b909 	b.w	80015fc <__retarget_lock_release_recursive>
 80013ea:	bf00      	nop
 80013ec:	200003d9 	.word	0x200003d9

080013f0 <__sinit>:
 80013f0:	b510      	push	{r4, lr}
 80013f2:	4604      	mov	r4, r0
 80013f4:	f7ff fff0 	bl	80013d8 <__sfp_lock_acquire>
 80013f8:	6a23      	ldr	r3, [r4, #32]
 80013fa:	b11b      	cbz	r3, 8001404 <__sinit+0x14>
 80013fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001400:	f7ff bff0 	b.w	80013e4 <__sfp_lock_release>
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <__sinit+0x28>)
 8001406:	6223      	str	r3, [r4, #32]
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <__sinit+0x2c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1f5      	bne.n	80013fc <__sinit+0xc>
 8001410:	f7ff ffc4 	bl	800139c <global_stdio_init.part.0>
 8001414:	e7f2      	b.n	80013fc <__sinit+0xc>
 8001416:	bf00      	nop
 8001418:	0800135d 	.word	0x0800135d
 800141c:	200003d0 	.word	0x200003d0

08001420 <_fwalk_sglue>:
 8001420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001424:	4607      	mov	r7, r0
 8001426:	4688      	mov	r8, r1
 8001428:	4614      	mov	r4, r2
 800142a:	2600      	movs	r6, #0
 800142c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001430:	f1b9 0901 	subs.w	r9, r9, #1
 8001434:	d505      	bpl.n	8001442 <_fwalk_sglue+0x22>
 8001436:	6824      	ldr	r4, [r4, #0]
 8001438:	2c00      	cmp	r4, #0
 800143a:	d1f7      	bne.n	800142c <_fwalk_sglue+0xc>
 800143c:	4630      	mov	r0, r6
 800143e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001442:	89ab      	ldrh	r3, [r5, #12]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d907      	bls.n	8001458 <_fwalk_sglue+0x38>
 8001448:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800144c:	3301      	adds	r3, #1
 800144e:	d003      	beq.n	8001458 <_fwalk_sglue+0x38>
 8001450:	4629      	mov	r1, r5
 8001452:	4638      	mov	r0, r7
 8001454:	47c0      	blx	r8
 8001456:	4306      	orrs	r6, r0
 8001458:	3568      	adds	r5, #104	; 0x68
 800145a:	e7e9      	b.n	8001430 <_fwalk_sglue+0x10>

0800145c <iprintf>:
 800145c:	b40f      	push	{r0, r1, r2, r3}
 800145e:	b507      	push	{r0, r1, r2, lr}
 8001460:	4906      	ldr	r1, [pc, #24]	; (800147c <iprintf+0x20>)
 8001462:	ab04      	add	r3, sp, #16
 8001464:	6808      	ldr	r0, [r1, #0]
 8001466:	f853 2b04 	ldr.w	r2, [r3], #4
 800146a:	6881      	ldr	r1, [r0, #8]
 800146c:	9301      	str	r3, [sp, #4]
 800146e:	f000 f9e5 	bl	800183c <_vfiprintf_r>
 8001472:	b003      	add	sp, #12
 8001474:	f85d eb04 	ldr.w	lr, [sp], #4
 8001478:	b004      	add	sp, #16
 800147a:	4770      	bx	lr
 800147c:	20000058 	.word	0x20000058

08001480 <__sread>:
 8001480:	b510      	push	{r4, lr}
 8001482:	460c      	mov	r4, r1
 8001484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001488:	f000 f868 	bl	800155c <_read_r>
 800148c:	2800      	cmp	r0, #0
 800148e:	bfab      	itete	ge
 8001490:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001492:	89a3      	ldrhlt	r3, [r4, #12]
 8001494:	181b      	addge	r3, r3, r0
 8001496:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800149a:	bfac      	ite	ge
 800149c:	6563      	strge	r3, [r4, #84]	; 0x54
 800149e:	81a3      	strhlt	r3, [r4, #12]
 80014a0:	bd10      	pop	{r4, pc}

080014a2 <__swrite>:
 80014a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014a6:	461f      	mov	r7, r3
 80014a8:	898b      	ldrh	r3, [r1, #12]
 80014aa:	05db      	lsls	r3, r3, #23
 80014ac:	4605      	mov	r5, r0
 80014ae:	460c      	mov	r4, r1
 80014b0:	4616      	mov	r6, r2
 80014b2:	d505      	bpl.n	80014c0 <__swrite+0x1e>
 80014b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014b8:	2302      	movs	r3, #2
 80014ba:	2200      	movs	r2, #0
 80014bc:	f000 f83c 	bl	8001538 <_lseek_r>
 80014c0:	89a3      	ldrh	r3, [r4, #12]
 80014c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014ca:	81a3      	strh	r3, [r4, #12]
 80014cc:	4632      	mov	r2, r6
 80014ce:	463b      	mov	r3, r7
 80014d0:	4628      	mov	r0, r5
 80014d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80014d6:	f000 b853 	b.w	8001580 <_write_r>

080014da <__sseek>:
 80014da:	b510      	push	{r4, lr}
 80014dc:	460c      	mov	r4, r1
 80014de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014e2:	f000 f829 	bl	8001538 <_lseek_r>
 80014e6:	1c43      	adds	r3, r0, #1
 80014e8:	89a3      	ldrh	r3, [r4, #12]
 80014ea:	bf15      	itete	ne
 80014ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80014ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80014f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80014f6:	81a3      	strheq	r3, [r4, #12]
 80014f8:	bf18      	it	ne
 80014fa:	81a3      	strhne	r3, [r4, #12]
 80014fc:	bd10      	pop	{r4, pc}

080014fe <__sclose>:
 80014fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001502:	f000 b809 	b.w	8001518 <_close_r>

08001506 <memset>:
 8001506:	4402      	add	r2, r0
 8001508:	4603      	mov	r3, r0
 800150a:	4293      	cmp	r3, r2
 800150c:	d100      	bne.n	8001510 <memset+0xa>
 800150e:	4770      	bx	lr
 8001510:	f803 1b01 	strb.w	r1, [r3], #1
 8001514:	e7f9      	b.n	800150a <memset+0x4>
	...

08001518 <_close_r>:
 8001518:	b538      	push	{r3, r4, r5, lr}
 800151a:	4d06      	ldr	r5, [pc, #24]	; (8001534 <_close_r+0x1c>)
 800151c:	2300      	movs	r3, #0
 800151e:	4604      	mov	r4, r0
 8001520:	4608      	mov	r0, r1
 8001522:	602b      	str	r3, [r5, #0]
 8001524:	f7ff fe47 	bl	80011b6 <_close>
 8001528:	1c43      	adds	r3, r0, #1
 800152a:	d102      	bne.n	8001532 <_close_r+0x1a>
 800152c:	682b      	ldr	r3, [r5, #0]
 800152e:	b103      	cbz	r3, 8001532 <_close_r+0x1a>
 8001530:	6023      	str	r3, [r4, #0]
 8001532:	bd38      	pop	{r3, r4, r5, pc}
 8001534:	200003d4 	.word	0x200003d4

08001538 <_lseek_r>:
 8001538:	b538      	push	{r3, r4, r5, lr}
 800153a:	4d07      	ldr	r5, [pc, #28]	; (8001558 <_lseek_r+0x20>)
 800153c:	4604      	mov	r4, r0
 800153e:	4608      	mov	r0, r1
 8001540:	4611      	mov	r1, r2
 8001542:	2200      	movs	r2, #0
 8001544:	602a      	str	r2, [r5, #0]
 8001546:	461a      	mov	r2, r3
 8001548:	f7ff fe59 	bl	80011fe <_lseek>
 800154c:	1c43      	adds	r3, r0, #1
 800154e:	d102      	bne.n	8001556 <_lseek_r+0x1e>
 8001550:	682b      	ldr	r3, [r5, #0]
 8001552:	b103      	cbz	r3, 8001556 <_lseek_r+0x1e>
 8001554:	6023      	str	r3, [r4, #0]
 8001556:	bd38      	pop	{r3, r4, r5, pc}
 8001558:	200003d4 	.word	0x200003d4

0800155c <_read_r>:
 800155c:	b538      	push	{r3, r4, r5, lr}
 800155e:	4d07      	ldr	r5, [pc, #28]	; (800157c <_read_r+0x20>)
 8001560:	4604      	mov	r4, r0
 8001562:	4608      	mov	r0, r1
 8001564:	4611      	mov	r1, r2
 8001566:	2200      	movs	r2, #0
 8001568:	602a      	str	r2, [r5, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	f7ff fdea 	bl	8001144 <_read>
 8001570:	1c43      	adds	r3, r0, #1
 8001572:	d102      	bne.n	800157a <_read_r+0x1e>
 8001574:	682b      	ldr	r3, [r5, #0]
 8001576:	b103      	cbz	r3, 800157a <_read_r+0x1e>
 8001578:	6023      	str	r3, [r4, #0]
 800157a:	bd38      	pop	{r3, r4, r5, pc}
 800157c:	200003d4 	.word	0x200003d4

08001580 <_write_r>:
 8001580:	b538      	push	{r3, r4, r5, lr}
 8001582:	4d07      	ldr	r5, [pc, #28]	; (80015a0 <_write_r+0x20>)
 8001584:	4604      	mov	r4, r0
 8001586:	4608      	mov	r0, r1
 8001588:	4611      	mov	r1, r2
 800158a:	2200      	movs	r2, #0
 800158c:	602a      	str	r2, [r5, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	f7ff fdf5 	bl	800117e <_write>
 8001594:	1c43      	adds	r3, r0, #1
 8001596:	d102      	bne.n	800159e <_write_r+0x1e>
 8001598:	682b      	ldr	r3, [r5, #0]
 800159a:	b103      	cbz	r3, 800159e <_write_r+0x1e>
 800159c:	6023      	str	r3, [r4, #0]
 800159e:	bd38      	pop	{r3, r4, r5, pc}
 80015a0:	200003d4 	.word	0x200003d4

080015a4 <__errno>:
 80015a4:	4b01      	ldr	r3, [pc, #4]	; (80015ac <__errno+0x8>)
 80015a6:	6818      	ldr	r0, [r3, #0]
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	20000058 	.word	0x20000058

080015b0 <__libc_init_array>:
 80015b0:	b570      	push	{r4, r5, r6, lr}
 80015b2:	4d0d      	ldr	r5, [pc, #52]	; (80015e8 <__libc_init_array+0x38>)
 80015b4:	4c0d      	ldr	r4, [pc, #52]	; (80015ec <__libc_init_array+0x3c>)
 80015b6:	1b64      	subs	r4, r4, r5
 80015b8:	10a4      	asrs	r4, r4, #2
 80015ba:	2600      	movs	r6, #0
 80015bc:	42a6      	cmp	r6, r4
 80015be:	d109      	bne.n	80015d4 <__libc_init_array+0x24>
 80015c0:	4d0b      	ldr	r5, [pc, #44]	; (80015f0 <__libc_init_array+0x40>)
 80015c2:	4c0c      	ldr	r4, [pc, #48]	; (80015f4 <__libc_init_array+0x44>)
 80015c4:	f000 fdb8 	bl	8002138 <_init>
 80015c8:	1b64      	subs	r4, r4, r5
 80015ca:	10a4      	asrs	r4, r4, #2
 80015cc:	2600      	movs	r6, #0
 80015ce:	42a6      	cmp	r6, r4
 80015d0:	d105      	bne.n	80015de <__libc_init_array+0x2e>
 80015d2:	bd70      	pop	{r4, r5, r6, pc}
 80015d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80015d8:	4798      	blx	r3
 80015da:	3601      	adds	r6, #1
 80015dc:	e7ee      	b.n	80015bc <__libc_init_array+0xc>
 80015de:	f855 3b04 	ldr.w	r3, [r5], #4
 80015e2:	4798      	blx	r3
 80015e4:	3601      	adds	r6, #1
 80015e6:	e7f2      	b.n	80015ce <__libc_init_array+0x1e>
 80015e8:	08002194 	.word	0x08002194
 80015ec:	08002194 	.word	0x08002194
 80015f0:	08002194 	.word	0x08002194
 80015f4:	08002198 	.word	0x08002198

080015f8 <__retarget_lock_init_recursive>:
 80015f8:	4770      	bx	lr

080015fa <__retarget_lock_acquire_recursive>:
 80015fa:	4770      	bx	lr

080015fc <__retarget_lock_release_recursive>:
 80015fc:	4770      	bx	lr
	...

08001600 <_free_r>:
 8001600:	b538      	push	{r3, r4, r5, lr}
 8001602:	4605      	mov	r5, r0
 8001604:	2900      	cmp	r1, #0
 8001606:	d041      	beq.n	800168c <_free_r+0x8c>
 8001608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800160c:	1f0c      	subs	r4, r1, #4
 800160e:	2b00      	cmp	r3, #0
 8001610:	bfb8      	it	lt
 8001612:	18e4      	addlt	r4, r4, r3
 8001614:	f000 f8de 	bl	80017d4 <__malloc_lock>
 8001618:	4a1d      	ldr	r2, [pc, #116]	; (8001690 <_free_r+0x90>)
 800161a:	6813      	ldr	r3, [r2, #0]
 800161c:	b933      	cbnz	r3, 800162c <_free_r+0x2c>
 800161e:	6063      	str	r3, [r4, #4]
 8001620:	6014      	str	r4, [r2, #0]
 8001622:	4628      	mov	r0, r5
 8001624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001628:	f000 b8da 	b.w	80017e0 <__malloc_unlock>
 800162c:	42a3      	cmp	r3, r4
 800162e:	d908      	bls.n	8001642 <_free_r+0x42>
 8001630:	6820      	ldr	r0, [r4, #0]
 8001632:	1821      	adds	r1, r4, r0
 8001634:	428b      	cmp	r3, r1
 8001636:	bf01      	itttt	eq
 8001638:	6819      	ldreq	r1, [r3, #0]
 800163a:	685b      	ldreq	r3, [r3, #4]
 800163c:	1809      	addeq	r1, r1, r0
 800163e:	6021      	streq	r1, [r4, #0]
 8001640:	e7ed      	b.n	800161e <_free_r+0x1e>
 8001642:	461a      	mov	r2, r3
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	b10b      	cbz	r3, 800164c <_free_r+0x4c>
 8001648:	42a3      	cmp	r3, r4
 800164a:	d9fa      	bls.n	8001642 <_free_r+0x42>
 800164c:	6811      	ldr	r1, [r2, #0]
 800164e:	1850      	adds	r0, r2, r1
 8001650:	42a0      	cmp	r0, r4
 8001652:	d10b      	bne.n	800166c <_free_r+0x6c>
 8001654:	6820      	ldr	r0, [r4, #0]
 8001656:	4401      	add	r1, r0
 8001658:	1850      	adds	r0, r2, r1
 800165a:	4283      	cmp	r3, r0
 800165c:	6011      	str	r1, [r2, #0]
 800165e:	d1e0      	bne.n	8001622 <_free_r+0x22>
 8001660:	6818      	ldr	r0, [r3, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	6053      	str	r3, [r2, #4]
 8001666:	4408      	add	r0, r1
 8001668:	6010      	str	r0, [r2, #0]
 800166a:	e7da      	b.n	8001622 <_free_r+0x22>
 800166c:	d902      	bls.n	8001674 <_free_r+0x74>
 800166e:	230c      	movs	r3, #12
 8001670:	602b      	str	r3, [r5, #0]
 8001672:	e7d6      	b.n	8001622 <_free_r+0x22>
 8001674:	6820      	ldr	r0, [r4, #0]
 8001676:	1821      	adds	r1, r4, r0
 8001678:	428b      	cmp	r3, r1
 800167a:	bf04      	itt	eq
 800167c:	6819      	ldreq	r1, [r3, #0]
 800167e:	685b      	ldreq	r3, [r3, #4]
 8001680:	6063      	str	r3, [r4, #4]
 8001682:	bf04      	itt	eq
 8001684:	1809      	addeq	r1, r1, r0
 8001686:	6021      	streq	r1, [r4, #0]
 8001688:	6054      	str	r4, [r2, #4]
 800168a:	e7ca      	b.n	8001622 <_free_r+0x22>
 800168c:	bd38      	pop	{r3, r4, r5, pc}
 800168e:	bf00      	nop
 8001690:	200003dc 	.word	0x200003dc

08001694 <sbrk_aligned>:
 8001694:	b570      	push	{r4, r5, r6, lr}
 8001696:	4e0e      	ldr	r6, [pc, #56]	; (80016d0 <sbrk_aligned+0x3c>)
 8001698:	460c      	mov	r4, r1
 800169a:	6831      	ldr	r1, [r6, #0]
 800169c:	4605      	mov	r5, r0
 800169e:	b911      	cbnz	r1, 80016a6 <sbrk_aligned+0x12>
 80016a0:	f000 fcb6 	bl	8002010 <_sbrk_r>
 80016a4:	6030      	str	r0, [r6, #0]
 80016a6:	4621      	mov	r1, r4
 80016a8:	4628      	mov	r0, r5
 80016aa:	f000 fcb1 	bl	8002010 <_sbrk_r>
 80016ae:	1c43      	adds	r3, r0, #1
 80016b0:	d00a      	beq.n	80016c8 <sbrk_aligned+0x34>
 80016b2:	1cc4      	adds	r4, r0, #3
 80016b4:	f024 0403 	bic.w	r4, r4, #3
 80016b8:	42a0      	cmp	r0, r4
 80016ba:	d007      	beq.n	80016cc <sbrk_aligned+0x38>
 80016bc:	1a21      	subs	r1, r4, r0
 80016be:	4628      	mov	r0, r5
 80016c0:	f000 fca6 	bl	8002010 <_sbrk_r>
 80016c4:	3001      	adds	r0, #1
 80016c6:	d101      	bne.n	80016cc <sbrk_aligned+0x38>
 80016c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80016cc:	4620      	mov	r0, r4
 80016ce:	bd70      	pop	{r4, r5, r6, pc}
 80016d0:	200003e0 	.word	0x200003e0

080016d4 <_malloc_r>:
 80016d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016d8:	1ccd      	adds	r5, r1, #3
 80016da:	f025 0503 	bic.w	r5, r5, #3
 80016de:	3508      	adds	r5, #8
 80016e0:	2d0c      	cmp	r5, #12
 80016e2:	bf38      	it	cc
 80016e4:	250c      	movcc	r5, #12
 80016e6:	2d00      	cmp	r5, #0
 80016e8:	4607      	mov	r7, r0
 80016ea:	db01      	blt.n	80016f0 <_malloc_r+0x1c>
 80016ec:	42a9      	cmp	r1, r5
 80016ee:	d905      	bls.n	80016fc <_malloc_r+0x28>
 80016f0:	230c      	movs	r3, #12
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	2600      	movs	r6, #0
 80016f6:	4630      	mov	r0, r6
 80016f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80017d0 <_malloc_r+0xfc>
 8001700:	f000 f868 	bl	80017d4 <__malloc_lock>
 8001704:	f8d8 3000 	ldr.w	r3, [r8]
 8001708:	461c      	mov	r4, r3
 800170a:	bb5c      	cbnz	r4, 8001764 <_malloc_r+0x90>
 800170c:	4629      	mov	r1, r5
 800170e:	4638      	mov	r0, r7
 8001710:	f7ff ffc0 	bl	8001694 <sbrk_aligned>
 8001714:	1c43      	adds	r3, r0, #1
 8001716:	4604      	mov	r4, r0
 8001718:	d155      	bne.n	80017c6 <_malloc_r+0xf2>
 800171a:	f8d8 4000 	ldr.w	r4, [r8]
 800171e:	4626      	mov	r6, r4
 8001720:	2e00      	cmp	r6, #0
 8001722:	d145      	bne.n	80017b0 <_malloc_r+0xdc>
 8001724:	2c00      	cmp	r4, #0
 8001726:	d048      	beq.n	80017ba <_malloc_r+0xe6>
 8001728:	6823      	ldr	r3, [r4, #0]
 800172a:	4631      	mov	r1, r6
 800172c:	4638      	mov	r0, r7
 800172e:	eb04 0903 	add.w	r9, r4, r3
 8001732:	f000 fc6d 	bl	8002010 <_sbrk_r>
 8001736:	4581      	cmp	r9, r0
 8001738:	d13f      	bne.n	80017ba <_malloc_r+0xe6>
 800173a:	6821      	ldr	r1, [r4, #0]
 800173c:	1a6d      	subs	r5, r5, r1
 800173e:	4629      	mov	r1, r5
 8001740:	4638      	mov	r0, r7
 8001742:	f7ff ffa7 	bl	8001694 <sbrk_aligned>
 8001746:	3001      	adds	r0, #1
 8001748:	d037      	beq.n	80017ba <_malloc_r+0xe6>
 800174a:	6823      	ldr	r3, [r4, #0]
 800174c:	442b      	add	r3, r5
 800174e:	6023      	str	r3, [r4, #0]
 8001750:	f8d8 3000 	ldr.w	r3, [r8]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d038      	beq.n	80017ca <_malloc_r+0xf6>
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	42a2      	cmp	r2, r4
 800175c:	d12b      	bne.n	80017b6 <_malloc_r+0xe2>
 800175e:	2200      	movs	r2, #0
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	e00f      	b.n	8001784 <_malloc_r+0xb0>
 8001764:	6822      	ldr	r2, [r4, #0]
 8001766:	1b52      	subs	r2, r2, r5
 8001768:	d41f      	bmi.n	80017aa <_malloc_r+0xd6>
 800176a:	2a0b      	cmp	r2, #11
 800176c:	d917      	bls.n	800179e <_malloc_r+0xca>
 800176e:	1961      	adds	r1, r4, r5
 8001770:	42a3      	cmp	r3, r4
 8001772:	6025      	str	r5, [r4, #0]
 8001774:	bf18      	it	ne
 8001776:	6059      	strne	r1, [r3, #4]
 8001778:	6863      	ldr	r3, [r4, #4]
 800177a:	bf08      	it	eq
 800177c:	f8c8 1000 	streq.w	r1, [r8]
 8001780:	5162      	str	r2, [r4, r5]
 8001782:	604b      	str	r3, [r1, #4]
 8001784:	4638      	mov	r0, r7
 8001786:	f104 060b 	add.w	r6, r4, #11
 800178a:	f000 f829 	bl	80017e0 <__malloc_unlock>
 800178e:	f026 0607 	bic.w	r6, r6, #7
 8001792:	1d23      	adds	r3, r4, #4
 8001794:	1af2      	subs	r2, r6, r3
 8001796:	d0ae      	beq.n	80016f6 <_malloc_r+0x22>
 8001798:	1b9b      	subs	r3, r3, r6
 800179a:	50a3      	str	r3, [r4, r2]
 800179c:	e7ab      	b.n	80016f6 <_malloc_r+0x22>
 800179e:	42a3      	cmp	r3, r4
 80017a0:	6862      	ldr	r2, [r4, #4]
 80017a2:	d1dd      	bne.n	8001760 <_malloc_r+0x8c>
 80017a4:	f8c8 2000 	str.w	r2, [r8]
 80017a8:	e7ec      	b.n	8001784 <_malloc_r+0xb0>
 80017aa:	4623      	mov	r3, r4
 80017ac:	6864      	ldr	r4, [r4, #4]
 80017ae:	e7ac      	b.n	800170a <_malloc_r+0x36>
 80017b0:	4634      	mov	r4, r6
 80017b2:	6876      	ldr	r6, [r6, #4]
 80017b4:	e7b4      	b.n	8001720 <_malloc_r+0x4c>
 80017b6:	4613      	mov	r3, r2
 80017b8:	e7cc      	b.n	8001754 <_malloc_r+0x80>
 80017ba:	230c      	movs	r3, #12
 80017bc:	603b      	str	r3, [r7, #0]
 80017be:	4638      	mov	r0, r7
 80017c0:	f000 f80e 	bl	80017e0 <__malloc_unlock>
 80017c4:	e797      	b.n	80016f6 <_malloc_r+0x22>
 80017c6:	6025      	str	r5, [r4, #0]
 80017c8:	e7dc      	b.n	8001784 <_malloc_r+0xb0>
 80017ca:	605b      	str	r3, [r3, #4]
 80017cc:	deff      	udf	#255	; 0xff
 80017ce:	bf00      	nop
 80017d0:	200003dc 	.word	0x200003dc

080017d4 <__malloc_lock>:
 80017d4:	4801      	ldr	r0, [pc, #4]	; (80017dc <__malloc_lock+0x8>)
 80017d6:	f7ff bf10 	b.w	80015fa <__retarget_lock_acquire_recursive>
 80017da:	bf00      	nop
 80017dc:	200003d8 	.word	0x200003d8

080017e0 <__malloc_unlock>:
 80017e0:	4801      	ldr	r0, [pc, #4]	; (80017e8 <__malloc_unlock+0x8>)
 80017e2:	f7ff bf0b 	b.w	80015fc <__retarget_lock_release_recursive>
 80017e6:	bf00      	nop
 80017e8:	200003d8 	.word	0x200003d8

080017ec <__sfputc_r>:
 80017ec:	6893      	ldr	r3, [r2, #8]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	b410      	push	{r4}
 80017f4:	6093      	str	r3, [r2, #8]
 80017f6:	da07      	bge.n	8001808 <__sfputc_r+0x1c>
 80017f8:	6994      	ldr	r4, [r2, #24]
 80017fa:	42a3      	cmp	r3, r4
 80017fc:	db01      	blt.n	8001802 <__sfputc_r+0x16>
 80017fe:	290a      	cmp	r1, #10
 8001800:	d102      	bne.n	8001808 <__sfputc_r+0x1c>
 8001802:	bc10      	pop	{r4}
 8001804:	f000 bb6e 	b.w	8001ee4 <__swbuf_r>
 8001808:	6813      	ldr	r3, [r2, #0]
 800180a:	1c58      	adds	r0, r3, #1
 800180c:	6010      	str	r0, [r2, #0]
 800180e:	7019      	strb	r1, [r3, #0]
 8001810:	4608      	mov	r0, r1
 8001812:	bc10      	pop	{r4}
 8001814:	4770      	bx	lr

08001816 <__sfputs_r>:
 8001816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001818:	4606      	mov	r6, r0
 800181a:	460f      	mov	r7, r1
 800181c:	4614      	mov	r4, r2
 800181e:	18d5      	adds	r5, r2, r3
 8001820:	42ac      	cmp	r4, r5
 8001822:	d101      	bne.n	8001828 <__sfputs_r+0x12>
 8001824:	2000      	movs	r0, #0
 8001826:	e007      	b.n	8001838 <__sfputs_r+0x22>
 8001828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800182c:	463a      	mov	r2, r7
 800182e:	4630      	mov	r0, r6
 8001830:	f7ff ffdc 	bl	80017ec <__sfputc_r>
 8001834:	1c43      	adds	r3, r0, #1
 8001836:	d1f3      	bne.n	8001820 <__sfputs_r+0xa>
 8001838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800183c <_vfiprintf_r>:
 800183c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001840:	460d      	mov	r5, r1
 8001842:	b09d      	sub	sp, #116	; 0x74
 8001844:	4614      	mov	r4, r2
 8001846:	4698      	mov	r8, r3
 8001848:	4606      	mov	r6, r0
 800184a:	b118      	cbz	r0, 8001854 <_vfiprintf_r+0x18>
 800184c:	6a03      	ldr	r3, [r0, #32]
 800184e:	b90b      	cbnz	r3, 8001854 <_vfiprintf_r+0x18>
 8001850:	f7ff fdce 	bl	80013f0 <__sinit>
 8001854:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001856:	07d9      	lsls	r1, r3, #31
 8001858:	d405      	bmi.n	8001866 <_vfiprintf_r+0x2a>
 800185a:	89ab      	ldrh	r3, [r5, #12]
 800185c:	059a      	lsls	r2, r3, #22
 800185e:	d402      	bmi.n	8001866 <_vfiprintf_r+0x2a>
 8001860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001862:	f7ff feca 	bl	80015fa <__retarget_lock_acquire_recursive>
 8001866:	89ab      	ldrh	r3, [r5, #12]
 8001868:	071b      	lsls	r3, r3, #28
 800186a:	d501      	bpl.n	8001870 <_vfiprintf_r+0x34>
 800186c:	692b      	ldr	r3, [r5, #16]
 800186e:	b99b      	cbnz	r3, 8001898 <_vfiprintf_r+0x5c>
 8001870:	4629      	mov	r1, r5
 8001872:	4630      	mov	r0, r6
 8001874:	f000 fb74 	bl	8001f60 <__swsetup_r>
 8001878:	b170      	cbz	r0, 8001898 <_vfiprintf_r+0x5c>
 800187a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800187c:	07dc      	lsls	r4, r3, #31
 800187e:	d504      	bpl.n	800188a <_vfiprintf_r+0x4e>
 8001880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001884:	b01d      	add	sp, #116	; 0x74
 8001886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800188a:	89ab      	ldrh	r3, [r5, #12]
 800188c:	0598      	lsls	r0, r3, #22
 800188e:	d4f7      	bmi.n	8001880 <_vfiprintf_r+0x44>
 8001890:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001892:	f7ff feb3 	bl	80015fc <__retarget_lock_release_recursive>
 8001896:	e7f3      	b.n	8001880 <_vfiprintf_r+0x44>
 8001898:	2300      	movs	r3, #0
 800189a:	9309      	str	r3, [sp, #36]	; 0x24
 800189c:	2320      	movs	r3, #32
 800189e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80018a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80018a6:	2330      	movs	r3, #48	; 0x30
 80018a8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001a5c <_vfiprintf_r+0x220>
 80018ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80018b0:	f04f 0901 	mov.w	r9, #1
 80018b4:	4623      	mov	r3, r4
 80018b6:	469a      	mov	sl, r3
 80018b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80018bc:	b10a      	cbz	r2, 80018c2 <_vfiprintf_r+0x86>
 80018be:	2a25      	cmp	r2, #37	; 0x25
 80018c0:	d1f9      	bne.n	80018b6 <_vfiprintf_r+0x7a>
 80018c2:	ebba 0b04 	subs.w	fp, sl, r4
 80018c6:	d00b      	beq.n	80018e0 <_vfiprintf_r+0xa4>
 80018c8:	465b      	mov	r3, fp
 80018ca:	4622      	mov	r2, r4
 80018cc:	4629      	mov	r1, r5
 80018ce:	4630      	mov	r0, r6
 80018d0:	f7ff ffa1 	bl	8001816 <__sfputs_r>
 80018d4:	3001      	adds	r0, #1
 80018d6:	f000 80a9 	beq.w	8001a2c <_vfiprintf_r+0x1f0>
 80018da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80018dc:	445a      	add	r2, fp
 80018de:	9209      	str	r2, [sp, #36]	; 0x24
 80018e0:	f89a 3000 	ldrb.w	r3, [sl]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 80a1 	beq.w	8001a2c <_vfiprintf_r+0x1f0>
 80018ea:	2300      	movs	r3, #0
 80018ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80018f4:	f10a 0a01 	add.w	sl, sl, #1
 80018f8:	9304      	str	r3, [sp, #16]
 80018fa:	9307      	str	r3, [sp, #28]
 80018fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001900:	931a      	str	r3, [sp, #104]	; 0x68
 8001902:	4654      	mov	r4, sl
 8001904:	2205      	movs	r2, #5
 8001906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800190a:	4854      	ldr	r0, [pc, #336]	; (8001a5c <_vfiprintf_r+0x220>)
 800190c:	f7fe fc80 	bl	8000210 <memchr>
 8001910:	9a04      	ldr	r2, [sp, #16]
 8001912:	b9d8      	cbnz	r0, 800194c <_vfiprintf_r+0x110>
 8001914:	06d1      	lsls	r1, r2, #27
 8001916:	bf44      	itt	mi
 8001918:	2320      	movmi	r3, #32
 800191a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800191e:	0713      	lsls	r3, r2, #28
 8001920:	bf44      	itt	mi
 8001922:	232b      	movmi	r3, #43	; 0x2b
 8001924:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001928:	f89a 3000 	ldrb.w	r3, [sl]
 800192c:	2b2a      	cmp	r3, #42	; 0x2a
 800192e:	d015      	beq.n	800195c <_vfiprintf_r+0x120>
 8001930:	9a07      	ldr	r2, [sp, #28]
 8001932:	4654      	mov	r4, sl
 8001934:	2000      	movs	r0, #0
 8001936:	f04f 0c0a 	mov.w	ip, #10
 800193a:	4621      	mov	r1, r4
 800193c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001940:	3b30      	subs	r3, #48	; 0x30
 8001942:	2b09      	cmp	r3, #9
 8001944:	d94d      	bls.n	80019e2 <_vfiprintf_r+0x1a6>
 8001946:	b1b0      	cbz	r0, 8001976 <_vfiprintf_r+0x13a>
 8001948:	9207      	str	r2, [sp, #28]
 800194a:	e014      	b.n	8001976 <_vfiprintf_r+0x13a>
 800194c:	eba0 0308 	sub.w	r3, r0, r8
 8001950:	fa09 f303 	lsl.w	r3, r9, r3
 8001954:	4313      	orrs	r3, r2
 8001956:	9304      	str	r3, [sp, #16]
 8001958:	46a2      	mov	sl, r4
 800195a:	e7d2      	b.n	8001902 <_vfiprintf_r+0xc6>
 800195c:	9b03      	ldr	r3, [sp, #12]
 800195e:	1d19      	adds	r1, r3, #4
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	9103      	str	r1, [sp, #12]
 8001964:	2b00      	cmp	r3, #0
 8001966:	bfbb      	ittet	lt
 8001968:	425b      	neglt	r3, r3
 800196a:	f042 0202 	orrlt.w	r2, r2, #2
 800196e:	9307      	strge	r3, [sp, #28]
 8001970:	9307      	strlt	r3, [sp, #28]
 8001972:	bfb8      	it	lt
 8001974:	9204      	strlt	r2, [sp, #16]
 8001976:	7823      	ldrb	r3, [r4, #0]
 8001978:	2b2e      	cmp	r3, #46	; 0x2e
 800197a:	d10c      	bne.n	8001996 <_vfiprintf_r+0x15a>
 800197c:	7863      	ldrb	r3, [r4, #1]
 800197e:	2b2a      	cmp	r3, #42	; 0x2a
 8001980:	d134      	bne.n	80019ec <_vfiprintf_r+0x1b0>
 8001982:	9b03      	ldr	r3, [sp, #12]
 8001984:	1d1a      	adds	r2, r3, #4
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	9203      	str	r2, [sp, #12]
 800198a:	2b00      	cmp	r3, #0
 800198c:	bfb8      	it	lt
 800198e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001992:	3402      	adds	r4, #2
 8001994:	9305      	str	r3, [sp, #20]
 8001996:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001a60 <_vfiprintf_r+0x224>
 800199a:	7821      	ldrb	r1, [r4, #0]
 800199c:	2203      	movs	r2, #3
 800199e:	4650      	mov	r0, sl
 80019a0:	f7fe fc36 	bl	8000210 <memchr>
 80019a4:	b138      	cbz	r0, 80019b6 <_vfiprintf_r+0x17a>
 80019a6:	9b04      	ldr	r3, [sp, #16]
 80019a8:	eba0 000a 	sub.w	r0, r0, sl
 80019ac:	2240      	movs	r2, #64	; 0x40
 80019ae:	4082      	lsls	r2, r0
 80019b0:	4313      	orrs	r3, r2
 80019b2:	3401      	adds	r4, #1
 80019b4:	9304      	str	r3, [sp, #16]
 80019b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019ba:	482a      	ldr	r0, [pc, #168]	; (8001a64 <_vfiprintf_r+0x228>)
 80019bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80019c0:	2206      	movs	r2, #6
 80019c2:	f7fe fc25 	bl	8000210 <memchr>
 80019c6:	2800      	cmp	r0, #0
 80019c8:	d03f      	beq.n	8001a4a <_vfiprintf_r+0x20e>
 80019ca:	4b27      	ldr	r3, [pc, #156]	; (8001a68 <_vfiprintf_r+0x22c>)
 80019cc:	bb1b      	cbnz	r3, 8001a16 <_vfiprintf_r+0x1da>
 80019ce:	9b03      	ldr	r3, [sp, #12]
 80019d0:	3307      	adds	r3, #7
 80019d2:	f023 0307 	bic.w	r3, r3, #7
 80019d6:	3308      	adds	r3, #8
 80019d8:	9303      	str	r3, [sp, #12]
 80019da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019dc:	443b      	add	r3, r7
 80019de:	9309      	str	r3, [sp, #36]	; 0x24
 80019e0:	e768      	b.n	80018b4 <_vfiprintf_r+0x78>
 80019e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80019e6:	460c      	mov	r4, r1
 80019e8:	2001      	movs	r0, #1
 80019ea:	e7a6      	b.n	800193a <_vfiprintf_r+0xfe>
 80019ec:	2300      	movs	r3, #0
 80019ee:	3401      	adds	r4, #1
 80019f0:	9305      	str	r3, [sp, #20]
 80019f2:	4619      	mov	r1, r3
 80019f4:	f04f 0c0a 	mov.w	ip, #10
 80019f8:	4620      	mov	r0, r4
 80019fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80019fe:	3a30      	subs	r2, #48	; 0x30
 8001a00:	2a09      	cmp	r2, #9
 8001a02:	d903      	bls.n	8001a0c <_vfiprintf_r+0x1d0>
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0c6      	beq.n	8001996 <_vfiprintf_r+0x15a>
 8001a08:	9105      	str	r1, [sp, #20]
 8001a0a:	e7c4      	b.n	8001996 <_vfiprintf_r+0x15a>
 8001a0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001a10:	4604      	mov	r4, r0
 8001a12:	2301      	movs	r3, #1
 8001a14:	e7f0      	b.n	80019f8 <_vfiprintf_r+0x1bc>
 8001a16:	ab03      	add	r3, sp, #12
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	462a      	mov	r2, r5
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <_vfiprintf_r+0x230>)
 8001a1e:	a904      	add	r1, sp, #16
 8001a20:	4630      	mov	r0, r6
 8001a22:	f3af 8000 	nop.w
 8001a26:	4607      	mov	r7, r0
 8001a28:	1c78      	adds	r0, r7, #1
 8001a2a:	d1d6      	bne.n	80019da <_vfiprintf_r+0x19e>
 8001a2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001a2e:	07d9      	lsls	r1, r3, #31
 8001a30:	d405      	bmi.n	8001a3e <_vfiprintf_r+0x202>
 8001a32:	89ab      	ldrh	r3, [r5, #12]
 8001a34:	059a      	lsls	r2, r3, #22
 8001a36:	d402      	bmi.n	8001a3e <_vfiprintf_r+0x202>
 8001a38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001a3a:	f7ff fddf 	bl	80015fc <__retarget_lock_release_recursive>
 8001a3e:	89ab      	ldrh	r3, [r5, #12]
 8001a40:	065b      	lsls	r3, r3, #25
 8001a42:	f53f af1d 	bmi.w	8001880 <_vfiprintf_r+0x44>
 8001a46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001a48:	e71c      	b.n	8001884 <_vfiprintf_r+0x48>
 8001a4a:	ab03      	add	r3, sp, #12
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	462a      	mov	r2, r5
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <_vfiprintf_r+0x230>)
 8001a52:	a904      	add	r1, sp, #16
 8001a54:	4630      	mov	r0, r6
 8001a56:	f000 f879 	bl	8001b4c <_printf_i>
 8001a5a:	e7e4      	b.n	8001a26 <_vfiprintf_r+0x1ea>
 8001a5c:	08002160 	.word	0x08002160
 8001a60:	08002166 	.word	0x08002166
 8001a64:	0800216a 	.word	0x0800216a
 8001a68:	00000000 	.word	0x00000000
 8001a6c:	08001817 	.word	0x08001817

08001a70 <_printf_common>:
 8001a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a74:	4616      	mov	r6, r2
 8001a76:	4699      	mov	r9, r3
 8001a78:	688a      	ldr	r2, [r1, #8]
 8001a7a:	690b      	ldr	r3, [r1, #16]
 8001a7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001a80:	4293      	cmp	r3, r2
 8001a82:	bfb8      	it	lt
 8001a84:	4613      	movlt	r3, r2
 8001a86:	6033      	str	r3, [r6, #0]
 8001a88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001a8c:	4607      	mov	r7, r0
 8001a8e:	460c      	mov	r4, r1
 8001a90:	b10a      	cbz	r2, 8001a96 <_printf_common+0x26>
 8001a92:	3301      	adds	r3, #1
 8001a94:	6033      	str	r3, [r6, #0]
 8001a96:	6823      	ldr	r3, [r4, #0]
 8001a98:	0699      	lsls	r1, r3, #26
 8001a9a:	bf42      	ittt	mi
 8001a9c:	6833      	ldrmi	r3, [r6, #0]
 8001a9e:	3302      	addmi	r3, #2
 8001aa0:	6033      	strmi	r3, [r6, #0]
 8001aa2:	6825      	ldr	r5, [r4, #0]
 8001aa4:	f015 0506 	ands.w	r5, r5, #6
 8001aa8:	d106      	bne.n	8001ab8 <_printf_common+0x48>
 8001aaa:	f104 0a19 	add.w	sl, r4, #25
 8001aae:	68e3      	ldr	r3, [r4, #12]
 8001ab0:	6832      	ldr	r2, [r6, #0]
 8001ab2:	1a9b      	subs	r3, r3, r2
 8001ab4:	42ab      	cmp	r3, r5
 8001ab6:	dc26      	bgt.n	8001b06 <_printf_common+0x96>
 8001ab8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001abc:	1e13      	subs	r3, r2, #0
 8001abe:	6822      	ldr	r2, [r4, #0]
 8001ac0:	bf18      	it	ne
 8001ac2:	2301      	movne	r3, #1
 8001ac4:	0692      	lsls	r2, r2, #26
 8001ac6:	d42b      	bmi.n	8001b20 <_printf_common+0xb0>
 8001ac8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001acc:	4649      	mov	r1, r9
 8001ace:	4638      	mov	r0, r7
 8001ad0:	47c0      	blx	r8
 8001ad2:	3001      	adds	r0, #1
 8001ad4:	d01e      	beq.n	8001b14 <_printf_common+0xa4>
 8001ad6:	6823      	ldr	r3, [r4, #0]
 8001ad8:	6922      	ldr	r2, [r4, #16]
 8001ada:	f003 0306 	and.w	r3, r3, #6
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	bf02      	ittt	eq
 8001ae2:	68e5      	ldreq	r5, [r4, #12]
 8001ae4:	6833      	ldreq	r3, [r6, #0]
 8001ae6:	1aed      	subeq	r5, r5, r3
 8001ae8:	68a3      	ldr	r3, [r4, #8]
 8001aea:	bf0c      	ite	eq
 8001aec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001af0:	2500      	movne	r5, #0
 8001af2:	4293      	cmp	r3, r2
 8001af4:	bfc4      	itt	gt
 8001af6:	1a9b      	subgt	r3, r3, r2
 8001af8:	18ed      	addgt	r5, r5, r3
 8001afa:	2600      	movs	r6, #0
 8001afc:	341a      	adds	r4, #26
 8001afe:	42b5      	cmp	r5, r6
 8001b00:	d11a      	bne.n	8001b38 <_printf_common+0xc8>
 8001b02:	2000      	movs	r0, #0
 8001b04:	e008      	b.n	8001b18 <_printf_common+0xa8>
 8001b06:	2301      	movs	r3, #1
 8001b08:	4652      	mov	r2, sl
 8001b0a:	4649      	mov	r1, r9
 8001b0c:	4638      	mov	r0, r7
 8001b0e:	47c0      	blx	r8
 8001b10:	3001      	adds	r0, #1
 8001b12:	d103      	bne.n	8001b1c <_printf_common+0xac>
 8001b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b1c:	3501      	adds	r5, #1
 8001b1e:	e7c6      	b.n	8001aae <_printf_common+0x3e>
 8001b20:	18e1      	adds	r1, r4, r3
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	2030      	movs	r0, #48	; 0x30
 8001b26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b2a:	4422      	add	r2, r4
 8001b2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b34:	3302      	adds	r3, #2
 8001b36:	e7c7      	b.n	8001ac8 <_printf_common+0x58>
 8001b38:	2301      	movs	r3, #1
 8001b3a:	4622      	mov	r2, r4
 8001b3c:	4649      	mov	r1, r9
 8001b3e:	4638      	mov	r0, r7
 8001b40:	47c0      	blx	r8
 8001b42:	3001      	adds	r0, #1
 8001b44:	d0e6      	beq.n	8001b14 <_printf_common+0xa4>
 8001b46:	3601      	adds	r6, #1
 8001b48:	e7d9      	b.n	8001afe <_printf_common+0x8e>
	...

08001b4c <_printf_i>:
 8001b4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b50:	7e0f      	ldrb	r7, [r1, #24]
 8001b52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001b54:	2f78      	cmp	r7, #120	; 0x78
 8001b56:	4691      	mov	r9, r2
 8001b58:	4680      	mov	r8, r0
 8001b5a:	460c      	mov	r4, r1
 8001b5c:	469a      	mov	sl, r3
 8001b5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001b62:	d807      	bhi.n	8001b74 <_printf_i+0x28>
 8001b64:	2f62      	cmp	r7, #98	; 0x62
 8001b66:	d80a      	bhi.n	8001b7e <_printf_i+0x32>
 8001b68:	2f00      	cmp	r7, #0
 8001b6a:	f000 80d4 	beq.w	8001d16 <_printf_i+0x1ca>
 8001b6e:	2f58      	cmp	r7, #88	; 0x58
 8001b70:	f000 80c0 	beq.w	8001cf4 <_printf_i+0x1a8>
 8001b74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001b7c:	e03a      	b.n	8001bf4 <_printf_i+0xa8>
 8001b7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001b82:	2b15      	cmp	r3, #21
 8001b84:	d8f6      	bhi.n	8001b74 <_printf_i+0x28>
 8001b86:	a101      	add	r1, pc, #4	; (adr r1, 8001b8c <_printf_i+0x40>)
 8001b88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001b8c:	08001be5 	.word	0x08001be5
 8001b90:	08001bf9 	.word	0x08001bf9
 8001b94:	08001b75 	.word	0x08001b75
 8001b98:	08001b75 	.word	0x08001b75
 8001b9c:	08001b75 	.word	0x08001b75
 8001ba0:	08001b75 	.word	0x08001b75
 8001ba4:	08001bf9 	.word	0x08001bf9
 8001ba8:	08001b75 	.word	0x08001b75
 8001bac:	08001b75 	.word	0x08001b75
 8001bb0:	08001b75 	.word	0x08001b75
 8001bb4:	08001b75 	.word	0x08001b75
 8001bb8:	08001cfd 	.word	0x08001cfd
 8001bbc:	08001c25 	.word	0x08001c25
 8001bc0:	08001cb7 	.word	0x08001cb7
 8001bc4:	08001b75 	.word	0x08001b75
 8001bc8:	08001b75 	.word	0x08001b75
 8001bcc:	08001d1f 	.word	0x08001d1f
 8001bd0:	08001b75 	.word	0x08001b75
 8001bd4:	08001c25 	.word	0x08001c25
 8001bd8:	08001b75 	.word	0x08001b75
 8001bdc:	08001b75 	.word	0x08001b75
 8001be0:	08001cbf 	.word	0x08001cbf
 8001be4:	682b      	ldr	r3, [r5, #0]
 8001be6:	1d1a      	adds	r2, r3, #4
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	602a      	str	r2, [r5, #0]
 8001bec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001bf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e09f      	b.n	8001d38 <_printf_i+0x1ec>
 8001bf8:	6820      	ldr	r0, [r4, #0]
 8001bfa:	682b      	ldr	r3, [r5, #0]
 8001bfc:	0607      	lsls	r7, r0, #24
 8001bfe:	f103 0104 	add.w	r1, r3, #4
 8001c02:	6029      	str	r1, [r5, #0]
 8001c04:	d501      	bpl.n	8001c0a <_printf_i+0xbe>
 8001c06:	681e      	ldr	r6, [r3, #0]
 8001c08:	e003      	b.n	8001c12 <_printf_i+0xc6>
 8001c0a:	0646      	lsls	r6, r0, #25
 8001c0c:	d5fb      	bpl.n	8001c06 <_printf_i+0xba>
 8001c0e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001c12:	2e00      	cmp	r6, #0
 8001c14:	da03      	bge.n	8001c1e <_printf_i+0xd2>
 8001c16:	232d      	movs	r3, #45	; 0x2d
 8001c18:	4276      	negs	r6, r6
 8001c1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c1e:	485a      	ldr	r0, [pc, #360]	; (8001d88 <_printf_i+0x23c>)
 8001c20:	230a      	movs	r3, #10
 8001c22:	e012      	b.n	8001c4a <_printf_i+0xfe>
 8001c24:	682b      	ldr	r3, [r5, #0]
 8001c26:	6820      	ldr	r0, [r4, #0]
 8001c28:	1d19      	adds	r1, r3, #4
 8001c2a:	6029      	str	r1, [r5, #0]
 8001c2c:	0605      	lsls	r5, r0, #24
 8001c2e:	d501      	bpl.n	8001c34 <_printf_i+0xe8>
 8001c30:	681e      	ldr	r6, [r3, #0]
 8001c32:	e002      	b.n	8001c3a <_printf_i+0xee>
 8001c34:	0641      	lsls	r1, r0, #25
 8001c36:	d5fb      	bpl.n	8001c30 <_printf_i+0xe4>
 8001c38:	881e      	ldrh	r6, [r3, #0]
 8001c3a:	4853      	ldr	r0, [pc, #332]	; (8001d88 <_printf_i+0x23c>)
 8001c3c:	2f6f      	cmp	r7, #111	; 0x6f
 8001c3e:	bf0c      	ite	eq
 8001c40:	2308      	moveq	r3, #8
 8001c42:	230a      	movne	r3, #10
 8001c44:	2100      	movs	r1, #0
 8001c46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001c4a:	6865      	ldr	r5, [r4, #4]
 8001c4c:	60a5      	str	r5, [r4, #8]
 8001c4e:	2d00      	cmp	r5, #0
 8001c50:	bfa2      	ittt	ge
 8001c52:	6821      	ldrge	r1, [r4, #0]
 8001c54:	f021 0104 	bicge.w	r1, r1, #4
 8001c58:	6021      	strge	r1, [r4, #0]
 8001c5a:	b90e      	cbnz	r6, 8001c60 <_printf_i+0x114>
 8001c5c:	2d00      	cmp	r5, #0
 8001c5e:	d04b      	beq.n	8001cf8 <_printf_i+0x1ac>
 8001c60:	4615      	mov	r5, r2
 8001c62:	fbb6 f1f3 	udiv	r1, r6, r3
 8001c66:	fb03 6711 	mls	r7, r3, r1, r6
 8001c6a:	5dc7      	ldrb	r7, [r0, r7]
 8001c6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001c70:	4637      	mov	r7, r6
 8001c72:	42bb      	cmp	r3, r7
 8001c74:	460e      	mov	r6, r1
 8001c76:	d9f4      	bls.n	8001c62 <_printf_i+0x116>
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d10b      	bne.n	8001c94 <_printf_i+0x148>
 8001c7c:	6823      	ldr	r3, [r4, #0]
 8001c7e:	07de      	lsls	r6, r3, #31
 8001c80:	d508      	bpl.n	8001c94 <_printf_i+0x148>
 8001c82:	6923      	ldr	r3, [r4, #16]
 8001c84:	6861      	ldr	r1, [r4, #4]
 8001c86:	4299      	cmp	r1, r3
 8001c88:	bfde      	ittt	le
 8001c8a:	2330      	movle	r3, #48	; 0x30
 8001c8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001c90:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001c94:	1b52      	subs	r2, r2, r5
 8001c96:	6122      	str	r2, [r4, #16]
 8001c98:	f8cd a000 	str.w	sl, [sp]
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	aa03      	add	r2, sp, #12
 8001ca0:	4621      	mov	r1, r4
 8001ca2:	4640      	mov	r0, r8
 8001ca4:	f7ff fee4 	bl	8001a70 <_printf_common>
 8001ca8:	3001      	adds	r0, #1
 8001caa:	d14a      	bne.n	8001d42 <_printf_i+0x1f6>
 8001cac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cb0:	b004      	add	sp, #16
 8001cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cb6:	6823      	ldr	r3, [r4, #0]
 8001cb8:	f043 0320 	orr.w	r3, r3, #32
 8001cbc:	6023      	str	r3, [r4, #0]
 8001cbe:	4833      	ldr	r0, [pc, #204]	; (8001d8c <_printf_i+0x240>)
 8001cc0:	2778      	movs	r7, #120	; 0x78
 8001cc2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001cc6:	6823      	ldr	r3, [r4, #0]
 8001cc8:	6829      	ldr	r1, [r5, #0]
 8001cca:	061f      	lsls	r7, r3, #24
 8001ccc:	f851 6b04 	ldr.w	r6, [r1], #4
 8001cd0:	d402      	bmi.n	8001cd8 <_printf_i+0x18c>
 8001cd2:	065f      	lsls	r7, r3, #25
 8001cd4:	bf48      	it	mi
 8001cd6:	b2b6      	uxthmi	r6, r6
 8001cd8:	07df      	lsls	r7, r3, #31
 8001cda:	bf48      	it	mi
 8001cdc:	f043 0320 	orrmi.w	r3, r3, #32
 8001ce0:	6029      	str	r1, [r5, #0]
 8001ce2:	bf48      	it	mi
 8001ce4:	6023      	strmi	r3, [r4, #0]
 8001ce6:	b91e      	cbnz	r6, 8001cf0 <_printf_i+0x1a4>
 8001ce8:	6823      	ldr	r3, [r4, #0]
 8001cea:	f023 0320 	bic.w	r3, r3, #32
 8001cee:	6023      	str	r3, [r4, #0]
 8001cf0:	2310      	movs	r3, #16
 8001cf2:	e7a7      	b.n	8001c44 <_printf_i+0xf8>
 8001cf4:	4824      	ldr	r0, [pc, #144]	; (8001d88 <_printf_i+0x23c>)
 8001cf6:	e7e4      	b.n	8001cc2 <_printf_i+0x176>
 8001cf8:	4615      	mov	r5, r2
 8001cfa:	e7bd      	b.n	8001c78 <_printf_i+0x12c>
 8001cfc:	682b      	ldr	r3, [r5, #0]
 8001cfe:	6826      	ldr	r6, [r4, #0]
 8001d00:	6961      	ldr	r1, [r4, #20]
 8001d02:	1d18      	adds	r0, r3, #4
 8001d04:	6028      	str	r0, [r5, #0]
 8001d06:	0635      	lsls	r5, r6, #24
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	d501      	bpl.n	8001d10 <_printf_i+0x1c4>
 8001d0c:	6019      	str	r1, [r3, #0]
 8001d0e:	e002      	b.n	8001d16 <_printf_i+0x1ca>
 8001d10:	0670      	lsls	r0, r6, #25
 8001d12:	d5fb      	bpl.n	8001d0c <_printf_i+0x1c0>
 8001d14:	8019      	strh	r1, [r3, #0]
 8001d16:	2300      	movs	r3, #0
 8001d18:	6123      	str	r3, [r4, #16]
 8001d1a:	4615      	mov	r5, r2
 8001d1c:	e7bc      	b.n	8001c98 <_printf_i+0x14c>
 8001d1e:	682b      	ldr	r3, [r5, #0]
 8001d20:	1d1a      	adds	r2, r3, #4
 8001d22:	602a      	str	r2, [r5, #0]
 8001d24:	681d      	ldr	r5, [r3, #0]
 8001d26:	6862      	ldr	r2, [r4, #4]
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4628      	mov	r0, r5
 8001d2c:	f7fe fa70 	bl	8000210 <memchr>
 8001d30:	b108      	cbz	r0, 8001d36 <_printf_i+0x1ea>
 8001d32:	1b40      	subs	r0, r0, r5
 8001d34:	6060      	str	r0, [r4, #4]
 8001d36:	6863      	ldr	r3, [r4, #4]
 8001d38:	6123      	str	r3, [r4, #16]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d40:	e7aa      	b.n	8001c98 <_printf_i+0x14c>
 8001d42:	6923      	ldr	r3, [r4, #16]
 8001d44:	462a      	mov	r2, r5
 8001d46:	4649      	mov	r1, r9
 8001d48:	4640      	mov	r0, r8
 8001d4a:	47d0      	blx	sl
 8001d4c:	3001      	adds	r0, #1
 8001d4e:	d0ad      	beq.n	8001cac <_printf_i+0x160>
 8001d50:	6823      	ldr	r3, [r4, #0]
 8001d52:	079b      	lsls	r3, r3, #30
 8001d54:	d413      	bmi.n	8001d7e <_printf_i+0x232>
 8001d56:	68e0      	ldr	r0, [r4, #12]
 8001d58:	9b03      	ldr	r3, [sp, #12]
 8001d5a:	4298      	cmp	r0, r3
 8001d5c:	bfb8      	it	lt
 8001d5e:	4618      	movlt	r0, r3
 8001d60:	e7a6      	b.n	8001cb0 <_printf_i+0x164>
 8001d62:	2301      	movs	r3, #1
 8001d64:	4632      	mov	r2, r6
 8001d66:	4649      	mov	r1, r9
 8001d68:	4640      	mov	r0, r8
 8001d6a:	47d0      	blx	sl
 8001d6c:	3001      	adds	r0, #1
 8001d6e:	d09d      	beq.n	8001cac <_printf_i+0x160>
 8001d70:	3501      	adds	r5, #1
 8001d72:	68e3      	ldr	r3, [r4, #12]
 8001d74:	9903      	ldr	r1, [sp, #12]
 8001d76:	1a5b      	subs	r3, r3, r1
 8001d78:	42ab      	cmp	r3, r5
 8001d7a:	dcf2      	bgt.n	8001d62 <_printf_i+0x216>
 8001d7c:	e7eb      	b.n	8001d56 <_printf_i+0x20a>
 8001d7e:	2500      	movs	r5, #0
 8001d80:	f104 0619 	add.w	r6, r4, #25
 8001d84:	e7f5      	b.n	8001d72 <_printf_i+0x226>
 8001d86:	bf00      	nop
 8001d88:	08002171 	.word	0x08002171
 8001d8c:	08002182 	.word	0x08002182

08001d90 <__sflush_r>:
 8001d90:	898a      	ldrh	r2, [r1, #12]
 8001d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d94:	4605      	mov	r5, r0
 8001d96:	0710      	lsls	r0, r2, #28
 8001d98:	460c      	mov	r4, r1
 8001d9a:	d457      	bmi.n	8001e4c <__sflush_r+0xbc>
 8001d9c:	684b      	ldr	r3, [r1, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	dc04      	bgt.n	8001dac <__sflush_r+0x1c>
 8001da2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	dc01      	bgt.n	8001dac <__sflush_r+0x1c>
 8001da8:	2000      	movs	r0, #0
 8001daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001dae:	2e00      	cmp	r6, #0
 8001db0:	d0fa      	beq.n	8001da8 <__sflush_r+0x18>
 8001db2:	2300      	movs	r3, #0
 8001db4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001db8:	682f      	ldr	r7, [r5, #0]
 8001dba:	6a21      	ldr	r1, [r4, #32]
 8001dbc:	602b      	str	r3, [r5, #0]
 8001dbe:	d032      	beq.n	8001e26 <__sflush_r+0x96>
 8001dc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001dc2:	89a3      	ldrh	r3, [r4, #12]
 8001dc4:	075a      	lsls	r2, r3, #29
 8001dc6:	d505      	bpl.n	8001dd4 <__sflush_r+0x44>
 8001dc8:	6863      	ldr	r3, [r4, #4]
 8001dca:	1ac0      	subs	r0, r0, r3
 8001dcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001dce:	b10b      	cbz	r3, 8001dd4 <__sflush_r+0x44>
 8001dd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001dd2:	1ac0      	subs	r0, r0, r3
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001dda:	6a21      	ldr	r1, [r4, #32]
 8001ddc:	4628      	mov	r0, r5
 8001dde:	47b0      	blx	r6
 8001de0:	1c43      	adds	r3, r0, #1
 8001de2:	89a3      	ldrh	r3, [r4, #12]
 8001de4:	d106      	bne.n	8001df4 <__sflush_r+0x64>
 8001de6:	6829      	ldr	r1, [r5, #0]
 8001de8:	291d      	cmp	r1, #29
 8001dea:	d82b      	bhi.n	8001e44 <__sflush_r+0xb4>
 8001dec:	4a28      	ldr	r2, [pc, #160]	; (8001e90 <__sflush_r+0x100>)
 8001dee:	410a      	asrs	r2, r1
 8001df0:	07d6      	lsls	r6, r2, #31
 8001df2:	d427      	bmi.n	8001e44 <__sflush_r+0xb4>
 8001df4:	2200      	movs	r2, #0
 8001df6:	6062      	str	r2, [r4, #4]
 8001df8:	04d9      	lsls	r1, r3, #19
 8001dfa:	6922      	ldr	r2, [r4, #16]
 8001dfc:	6022      	str	r2, [r4, #0]
 8001dfe:	d504      	bpl.n	8001e0a <__sflush_r+0x7a>
 8001e00:	1c42      	adds	r2, r0, #1
 8001e02:	d101      	bne.n	8001e08 <__sflush_r+0x78>
 8001e04:	682b      	ldr	r3, [r5, #0]
 8001e06:	b903      	cbnz	r3, 8001e0a <__sflush_r+0x7a>
 8001e08:	6560      	str	r0, [r4, #84]	; 0x54
 8001e0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e0c:	602f      	str	r7, [r5, #0]
 8001e0e:	2900      	cmp	r1, #0
 8001e10:	d0ca      	beq.n	8001da8 <__sflush_r+0x18>
 8001e12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e16:	4299      	cmp	r1, r3
 8001e18:	d002      	beq.n	8001e20 <__sflush_r+0x90>
 8001e1a:	4628      	mov	r0, r5
 8001e1c:	f7ff fbf0 	bl	8001600 <_free_r>
 8001e20:	2000      	movs	r0, #0
 8001e22:	6360      	str	r0, [r4, #52]	; 0x34
 8001e24:	e7c1      	b.n	8001daa <__sflush_r+0x1a>
 8001e26:	2301      	movs	r3, #1
 8001e28:	4628      	mov	r0, r5
 8001e2a:	47b0      	blx	r6
 8001e2c:	1c41      	adds	r1, r0, #1
 8001e2e:	d1c8      	bne.n	8001dc2 <__sflush_r+0x32>
 8001e30:	682b      	ldr	r3, [r5, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0c5      	beq.n	8001dc2 <__sflush_r+0x32>
 8001e36:	2b1d      	cmp	r3, #29
 8001e38:	d001      	beq.n	8001e3e <__sflush_r+0xae>
 8001e3a:	2b16      	cmp	r3, #22
 8001e3c:	d101      	bne.n	8001e42 <__sflush_r+0xb2>
 8001e3e:	602f      	str	r7, [r5, #0]
 8001e40:	e7b2      	b.n	8001da8 <__sflush_r+0x18>
 8001e42:	89a3      	ldrh	r3, [r4, #12]
 8001e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e48:	81a3      	strh	r3, [r4, #12]
 8001e4a:	e7ae      	b.n	8001daa <__sflush_r+0x1a>
 8001e4c:	690f      	ldr	r7, [r1, #16]
 8001e4e:	2f00      	cmp	r7, #0
 8001e50:	d0aa      	beq.n	8001da8 <__sflush_r+0x18>
 8001e52:	0793      	lsls	r3, r2, #30
 8001e54:	680e      	ldr	r6, [r1, #0]
 8001e56:	bf08      	it	eq
 8001e58:	694b      	ldreq	r3, [r1, #20]
 8001e5a:	600f      	str	r7, [r1, #0]
 8001e5c:	bf18      	it	ne
 8001e5e:	2300      	movne	r3, #0
 8001e60:	1bf6      	subs	r6, r6, r7
 8001e62:	608b      	str	r3, [r1, #8]
 8001e64:	2e00      	cmp	r6, #0
 8001e66:	dd9f      	ble.n	8001da8 <__sflush_r+0x18>
 8001e68:	6a21      	ldr	r1, [r4, #32]
 8001e6a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001e6e:	4633      	mov	r3, r6
 8001e70:	463a      	mov	r2, r7
 8001e72:	4628      	mov	r0, r5
 8001e74:	47e0      	blx	ip
 8001e76:	2800      	cmp	r0, #0
 8001e78:	dc06      	bgt.n	8001e88 <__sflush_r+0xf8>
 8001e7a:	89a3      	ldrh	r3, [r4, #12]
 8001e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e80:	81a3      	strh	r3, [r4, #12]
 8001e82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e86:	e790      	b.n	8001daa <__sflush_r+0x1a>
 8001e88:	4407      	add	r7, r0
 8001e8a:	1a36      	subs	r6, r6, r0
 8001e8c:	e7ea      	b.n	8001e64 <__sflush_r+0xd4>
 8001e8e:	bf00      	nop
 8001e90:	dfbffffe 	.word	0xdfbffffe

08001e94 <_fflush_r>:
 8001e94:	b538      	push	{r3, r4, r5, lr}
 8001e96:	690b      	ldr	r3, [r1, #16]
 8001e98:	4605      	mov	r5, r0
 8001e9a:	460c      	mov	r4, r1
 8001e9c:	b913      	cbnz	r3, 8001ea4 <_fflush_r+0x10>
 8001e9e:	2500      	movs	r5, #0
 8001ea0:	4628      	mov	r0, r5
 8001ea2:	bd38      	pop	{r3, r4, r5, pc}
 8001ea4:	b118      	cbz	r0, 8001eae <_fflush_r+0x1a>
 8001ea6:	6a03      	ldr	r3, [r0, #32]
 8001ea8:	b90b      	cbnz	r3, 8001eae <_fflush_r+0x1a>
 8001eaa:	f7ff faa1 	bl	80013f0 <__sinit>
 8001eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f3      	beq.n	8001e9e <_fflush_r+0xa>
 8001eb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001eb8:	07d0      	lsls	r0, r2, #31
 8001eba:	d404      	bmi.n	8001ec6 <_fflush_r+0x32>
 8001ebc:	0599      	lsls	r1, r3, #22
 8001ebe:	d402      	bmi.n	8001ec6 <_fflush_r+0x32>
 8001ec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ec2:	f7ff fb9a 	bl	80015fa <__retarget_lock_acquire_recursive>
 8001ec6:	4628      	mov	r0, r5
 8001ec8:	4621      	mov	r1, r4
 8001eca:	f7ff ff61 	bl	8001d90 <__sflush_r>
 8001ece:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ed0:	07da      	lsls	r2, r3, #31
 8001ed2:	4605      	mov	r5, r0
 8001ed4:	d4e4      	bmi.n	8001ea0 <_fflush_r+0xc>
 8001ed6:	89a3      	ldrh	r3, [r4, #12]
 8001ed8:	059b      	lsls	r3, r3, #22
 8001eda:	d4e1      	bmi.n	8001ea0 <_fflush_r+0xc>
 8001edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ede:	f7ff fb8d 	bl	80015fc <__retarget_lock_release_recursive>
 8001ee2:	e7dd      	b.n	8001ea0 <_fflush_r+0xc>

08001ee4 <__swbuf_r>:
 8001ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ee6:	460e      	mov	r6, r1
 8001ee8:	4614      	mov	r4, r2
 8001eea:	4605      	mov	r5, r0
 8001eec:	b118      	cbz	r0, 8001ef6 <__swbuf_r+0x12>
 8001eee:	6a03      	ldr	r3, [r0, #32]
 8001ef0:	b90b      	cbnz	r3, 8001ef6 <__swbuf_r+0x12>
 8001ef2:	f7ff fa7d 	bl	80013f0 <__sinit>
 8001ef6:	69a3      	ldr	r3, [r4, #24]
 8001ef8:	60a3      	str	r3, [r4, #8]
 8001efa:	89a3      	ldrh	r3, [r4, #12]
 8001efc:	071a      	lsls	r2, r3, #28
 8001efe:	d525      	bpl.n	8001f4c <__swbuf_r+0x68>
 8001f00:	6923      	ldr	r3, [r4, #16]
 8001f02:	b31b      	cbz	r3, 8001f4c <__swbuf_r+0x68>
 8001f04:	6823      	ldr	r3, [r4, #0]
 8001f06:	6922      	ldr	r2, [r4, #16]
 8001f08:	1a98      	subs	r0, r3, r2
 8001f0a:	6963      	ldr	r3, [r4, #20]
 8001f0c:	b2f6      	uxtb	r6, r6
 8001f0e:	4283      	cmp	r3, r0
 8001f10:	4637      	mov	r7, r6
 8001f12:	dc04      	bgt.n	8001f1e <__swbuf_r+0x3a>
 8001f14:	4621      	mov	r1, r4
 8001f16:	4628      	mov	r0, r5
 8001f18:	f7ff ffbc 	bl	8001e94 <_fflush_r>
 8001f1c:	b9e0      	cbnz	r0, 8001f58 <__swbuf_r+0x74>
 8001f1e:	68a3      	ldr	r3, [r4, #8]
 8001f20:	3b01      	subs	r3, #1
 8001f22:	60a3      	str	r3, [r4, #8]
 8001f24:	6823      	ldr	r3, [r4, #0]
 8001f26:	1c5a      	adds	r2, r3, #1
 8001f28:	6022      	str	r2, [r4, #0]
 8001f2a:	701e      	strb	r6, [r3, #0]
 8001f2c:	6962      	ldr	r2, [r4, #20]
 8001f2e:	1c43      	adds	r3, r0, #1
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d004      	beq.n	8001f3e <__swbuf_r+0x5a>
 8001f34:	89a3      	ldrh	r3, [r4, #12]
 8001f36:	07db      	lsls	r3, r3, #31
 8001f38:	d506      	bpl.n	8001f48 <__swbuf_r+0x64>
 8001f3a:	2e0a      	cmp	r6, #10
 8001f3c:	d104      	bne.n	8001f48 <__swbuf_r+0x64>
 8001f3e:	4621      	mov	r1, r4
 8001f40:	4628      	mov	r0, r5
 8001f42:	f7ff ffa7 	bl	8001e94 <_fflush_r>
 8001f46:	b938      	cbnz	r0, 8001f58 <__swbuf_r+0x74>
 8001f48:	4638      	mov	r0, r7
 8001f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f4c:	4621      	mov	r1, r4
 8001f4e:	4628      	mov	r0, r5
 8001f50:	f000 f806 	bl	8001f60 <__swsetup_r>
 8001f54:	2800      	cmp	r0, #0
 8001f56:	d0d5      	beq.n	8001f04 <__swbuf_r+0x20>
 8001f58:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001f5c:	e7f4      	b.n	8001f48 <__swbuf_r+0x64>
	...

08001f60 <__swsetup_r>:
 8001f60:	b538      	push	{r3, r4, r5, lr}
 8001f62:	4b2a      	ldr	r3, [pc, #168]	; (800200c <__swsetup_r+0xac>)
 8001f64:	4605      	mov	r5, r0
 8001f66:	6818      	ldr	r0, [r3, #0]
 8001f68:	460c      	mov	r4, r1
 8001f6a:	b118      	cbz	r0, 8001f74 <__swsetup_r+0x14>
 8001f6c:	6a03      	ldr	r3, [r0, #32]
 8001f6e:	b90b      	cbnz	r3, 8001f74 <__swsetup_r+0x14>
 8001f70:	f7ff fa3e 	bl	80013f0 <__sinit>
 8001f74:	89a3      	ldrh	r3, [r4, #12]
 8001f76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001f7a:	0718      	lsls	r0, r3, #28
 8001f7c:	d422      	bmi.n	8001fc4 <__swsetup_r+0x64>
 8001f7e:	06d9      	lsls	r1, r3, #27
 8001f80:	d407      	bmi.n	8001f92 <__swsetup_r+0x32>
 8001f82:	2309      	movs	r3, #9
 8001f84:	602b      	str	r3, [r5, #0]
 8001f86:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001f8a:	81a3      	strh	r3, [r4, #12]
 8001f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f90:	e034      	b.n	8001ffc <__swsetup_r+0x9c>
 8001f92:	0758      	lsls	r0, r3, #29
 8001f94:	d512      	bpl.n	8001fbc <__swsetup_r+0x5c>
 8001f96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f98:	b141      	cbz	r1, 8001fac <__swsetup_r+0x4c>
 8001f9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f9e:	4299      	cmp	r1, r3
 8001fa0:	d002      	beq.n	8001fa8 <__swsetup_r+0x48>
 8001fa2:	4628      	mov	r0, r5
 8001fa4:	f7ff fb2c 	bl	8001600 <_free_r>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	6363      	str	r3, [r4, #52]	; 0x34
 8001fac:	89a3      	ldrh	r3, [r4, #12]
 8001fae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001fb2:	81a3      	strh	r3, [r4, #12]
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	6063      	str	r3, [r4, #4]
 8001fb8:	6923      	ldr	r3, [r4, #16]
 8001fba:	6023      	str	r3, [r4, #0]
 8001fbc:	89a3      	ldrh	r3, [r4, #12]
 8001fbe:	f043 0308 	orr.w	r3, r3, #8
 8001fc2:	81a3      	strh	r3, [r4, #12]
 8001fc4:	6923      	ldr	r3, [r4, #16]
 8001fc6:	b94b      	cbnz	r3, 8001fdc <__swsetup_r+0x7c>
 8001fc8:	89a3      	ldrh	r3, [r4, #12]
 8001fca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001fce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fd2:	d003      	beq.n	8001fdc <__swsetup_r+0x7c>
 8001fd4:	4621      	mov	r1, r4
 8001fd6:	4628      	mov	r0, r5
 8001fd8:	f000 f850 	bl	800207c <__smakebuf_r>
 8001fdc:	89a0      	ldrh	r0, [r4, #12]
 8001fde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001fe2:	f010 0301 	ands.w	r3, r0, #1
 8001fe6:	d00a      	beq.n	8001ffe <__swsetup_r+0x9e>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60a3      	str	r3, [r4, #8]
 8001fec:	6963      	ldr	r3, [r4, #20]
 8001fee:	425b      	negs	r3, r3
 8001ff0:	61a3      	str	r3, [r4, #24]
 8001ff2:	6923      	ldr	r3, [r4, #16]
 8001ff4:	b943      	cbnz	r3, 8002008 <__swsetup_r+0xa8>
 8001ff6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001ffa:	d1c4      	bne.n	8001f86 <__swsetup_r+0x26>
 8001ffc:	bd38      	pop	{r3, r4, r5, pc}
 8001ffe:	0781      	lsls	r1, r0, #30
 8002000:	bf58      	it	pl
 8002002:	6963      	ldrpl	r3, [r4, #20]
 8002004:	60a3      	str	r3, [r4, #8]
 8002006:	e7f4      	b.n	8001ff2 <__swsetup_r+0x92>
 8002008:	2000      	movs	r0, #0
 800200a:	e7f7      	b.n	8001ffc <__swsetup_r+0x9c>
 800200c:	20000058 	.word	0x20000058

08002010 <_sbrk_r>:
 8002010:	b538      	push	{r3, r4, r5, lr}
 8002012:	4d06      	ldr	r5, [pc, #24]	; (800202c <_sbrk_r+0x1c>)
 8002014:	2300      	movs	r3, #0
 8002016:	4604      	mov	r4, r0
 8002018:	4608      	mov	r0, r1
 800201a:	602b      	str	r3, [r5, #0]
 800201c:	f7ff f8fc 	bl	8001218 <_sbrk>
 8002020:	1c43      	adds	r3, r0, #1
 8002022:	d102      	bne.n	800202a <_sbrk_r+0x1a>
 8002024:	682b      	ldr	r3, [r5, #0]
 8002026:	b103      	cbz	r3, 800202a <_sbrk_r+0x1a>
 8002028:	6023      	str	r3, [r4, #0]
 800202a:	bd38      	pop	{r3, r4, r5, pc}
 800202c:	200003d4 	.word	0x200003d4

08002030 <__swhatbuf_r>:
 8002030:	b570      	push	{r4, r5, r6, lr}
 8002032:	460c      	mov	r4, r1
 8002034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002038:	2900      	cmp	r1, #0
 800203a:	b096      	sub	sp, #88	; 0x58
 800203c:	4615      	mov	r5, r2
 800203e:	461e      	mov	r6, r3
 8002040:	da0d      	bge.n	800205e <__swhatbuf_r+0x2e>
 8002042:	89a3      	ldrh	r3, [r4, #12]
 8002044:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002048:	f04f 0100 	mov.w	r1, #0
 800204c:	bf0c      	ite	eq
 800204e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002052:	2340      	movne	r3, #64	; 0x40
 8002054:	2000      	movs	r0, #0
 8002056:	6031      	str	r1, [r6, #0]
 8002058:	602b      	str	r3, [r5, #0]
 800205a:	b016      	add	sp, #88	; 0x58
 800205c:	bd70      	pop	{r4, r5, r6, pc}
 800205e:	466a      	mov	r2, sp
 8002060:	f000 f848 	bl	80020f4 <_fstat_r>
 8002064:	2800      	cmp	r0, #0
 8002066:	dbec      	blt.n	8002042 <__swhatbuf_r+0x12>
 8002068:	9901      	ldr	r1, [sp, #4]
 800206a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800206e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002072:	4259      	negs	r1, r3
 8002074:	4159      	adcs	r1, r3
 8002076:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800207a:	e7eb      	b.n	8002054 <__swhatbuf_r+0x24>

0800207c <__smakebuf_r>:
 800207c:	898b      	ldrh	r3, [r1, #12]
 800207e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002080:	079d      	lsls	r5, r3, #30
 8002082:	4606      	mov	r6, r0
 8002084:	460c      	mov	r4, r1
 8002086:	d507      	bpl.n	8002098 <__smakebuf_r+0x1c>
 8002088:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800208c:	6023      	str	r3, [r4, #0]
 800208e:	6123      	str	r3, [r4, #16]
 8002090:	2301      	movs	r3, #1
 8002092:	6163      	str	r3, [r4, #20]
 8002094:	b002      	add	sp, #8
 8002096:	bd70      	pop	{r4, r5, r6, pc}
 8002098:	ab01      	add	r3, sp, #4
 800209a:	466a      	mov	r2, sp
 800209c:	f7ff ffc8 	bl	8002030 <__swhatbuf_r>
 80020a0:	9900      	ldr	r1, [sp, #0]
 80020a2:	4605      	mov	r5, r0
 80020a4:	4630      	mov	r0, r6
 80020a6:	f7ff fb15 	bl	80016d4 <_malloc_r>
 80020aa:	b948      	cbnz	r0, 80020c0 <__smakebuf_r+0x44>
 80020ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020b0:	059a      	lsls	r2, r3, #22
 80020b2:	d4ef      	bmi.n	8002094 <__smakebuf_r+0x18>
 80020b4:	f023 0303 	bic.w	r3, r3, #3
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	81a3      	strh	r3, [r4, #12]
 80020be:	e7e3      	b.n	8002088 <__smakebuf_r+0xc>
 80020c0:	89a3      	ldrh	r3, [r4, #12]
 80020c2:	6020      	str	r0, [r4, #0]
 80020c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020c8:	81a3      	strh	r3, [r4, #12]
 80020ca:	9b00      	ldr	r3, [sp, #0]
 80020cc:	6163      	str	r3, [r4, #20]
 80020ce:	9b01      	ldr	r3, [sp, #4]
 80020d0:	6120      	str	r0, [r4, #16]
 80020d2:	b15b      	cbz	r3, 80020ec <__smakebuf_r+0x70>
 80020d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80020d8:	4630      	mov	r0, r6
 80020da:	f000 f81d 	bl	8002118 <_isatty_r>
 80020de:	b128      	cbz	r0, 80020ec <__smakebuf_r+0x70>
 80020e0:	89a3      	ldrh	r3, [r4, #12]
 80020e2:	f023 0303 	bic.w	r3, r3, #3
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	81a3      	strh	r3, [r4, #12]
 80020ec:	89a3      	ldrh	r3, [r4, #12]
 80020ee:	431d      	orrs	r5, r3
 80020f0:	81a5      	strh	r5, [r4, #12]
 80020f2:	e7cf      	b.n	8002094 <__smakebuf_r+0x18>

080020f4 <_fstat_r>:
 80020f4:	b538      	push	{r3, r4, r5, lr}
 80020f6:	4d07      	ldr	r5, [pc, #28]	; (8002114 <_fstat_r+0x20>)
 80020f8:	2300      	movs	r3, #0
 80020fa:	4604      	mov	r4, r0
 80020fc:	4608      	mov	r0, r1
 80020fe:	4611      	mov	r1, r2
 8002100:	602b      	str	r3, [r5, #0]
 8002102:	f7ff f863 	bl	80011cc <_fstat>
 8002106:	1c43      	adds	r3, r0, #1
 8002108:	d102      	bne.n	8002110 <_fstat_r+0x1c>
 800210a:	682b      	ldr	r3, [r5, #0]
 800210c:	b103      	cbz	r3, 8002110 <_fstat_r+0x1c>
 800210e:	6023      	str	r3, [r4, #0]
 8002110:	bd38      	pop	{r3, r4, r5, pc}
 8002112:	bf00      	nop
 8002114:	200003d4 	.word	0x200003d4

08002118 <_isatty_r>:
 8002118:	b538      	push	{r3, r4, r5, lr}
 800211a:	4d06      	ldr	r5, [pc, #24]	; (8002134 <_isatty_r+0x1c>)
 800211c:	2300      	movs	r3, #0
 800211e:	4604      	mov	r4, r0
 8002120:	4608      	mov	r0, r1
 8002122:	602b      	str	r3, [r5, #0]
 8002124:	f7ff f861 	bl	80011ea <_isatty>
 8002128:	1c43      	adds	r3, r0, #1
 800212a:	d102      	bne.n	8002132 <_isatty_r+0x1a>
 800212c:	682b      	ldr	r3, [r5, #0]
 800212e:	b103      	cbz	r3, 8002132 <_isatty_r+0x1a>
 8002130:	6023      	str	r3, [r4, #0]
 8002132:	bd38      	pop	{r3, r4, r5, pc}
 8002134:	200003d4 	.word	0x200003d4

08002138 <_init>:
 8002138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800213a:	bf00      	nop
 800213c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800213e:	bc08      	pop	{r3}
 8002140:	469e      	mov	lr, r3
 8002142:	4770      	bx	lr

08002144 <_fini>:
 8002144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002146:	bf00      	nop
 8002148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800214a:	bc08      	pop	{r3}
 800214c:	469e      	mov	lr, r3
 800214e:	4770      	bx	lr

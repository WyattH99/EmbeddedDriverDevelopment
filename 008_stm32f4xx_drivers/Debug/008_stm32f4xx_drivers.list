
008_stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c20  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000de4  08000de4  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000de4  08000de4  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08000de4  08000de4  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000de4  08000de4  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000de4  08000de4  00010de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000de8  08000de8  00010de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08000dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000024  08000e10  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000004c  08000e10  0002004c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000123b  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000457  00000000  00000000  000212cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000150  00000000  00000000  00021728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f1  00000000  00000000  00021878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002493  00000000  00000000  00021969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000178b  00000000  00000000  00023dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009b18  00000000  00000000  00025587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000490  00000000  00000000  0002f0a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0002f530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000024 	.word	0x20000024
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000dcc 	.word	0x08000dcc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000028 	.word	0x20000028
 8000200:	08000dcc 	.word	0x08000dcc

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <GPIO_PeriClockControl>:
 * @return            -  void
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi){
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	460b      	mov	r3, r1
 800021e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){ // Enable
 8000220:	78fb      	ldrb	r3, [r7, #3]
 8000222:	2b01      	cmp	r3, #1
 8000224:	d157      	bne.n	80002d6 <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA){
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a59      	ldr	r2, [pc, #356]	; (8000390 <GPIO_PeriClockControl+0x17c>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800022e:	4b59      	ldr	r3, [pc, #356]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000232:	4a58      	ldr	r2, [pc, #352]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000234:	f043 0301 	orr.w	r3, r3, #1
 8000238:	6313      	str	r3, [r2, #48]	; 0x30
		}else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}

}
 800023a:	e0a3      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB){
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a56      	ldr	r2, [pc, #344]	; (8000398 <GPIO_PeriClockControl+0x184>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000244:	4b53      	ldr	r3, [pc, #332]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a52      	ldr	r2, [pc, #328]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800024a:	f043 0302 	orr.w	r3, r3, #2
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000250:	e098      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC){
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a51      	ldr	r2, [pc, #324]	; (800039c <GPIO_PeriClockControl+0x188>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800025a:	4b4e      	ldr	r3, [pc, #312]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025e:	4a4d      	ldr	r2, [pc, #308]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000260:	f043 0304 	orr.w	r3, r3, #4
 8000264:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000266:	e08d      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOD){
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a4d      	ldr	r2, [pc, #308]	; (80003a0 <GPIO_PeriClockControl+0x18c>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d106      	bne.n	800027e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000270:	4b48      	ldr	r3, [pc, #288]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000274:	4a47      	ldr	r2, [pc, #284]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000276:	f043 0308 	orr.w	r3, r3, #8
 800027a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800027c:	e082      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE){
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a48      	ldr	r2, [pc, #288]	; (80003a4 <GPIO_PeriClockControl+0x190>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000286:	4b43      	ldr	r3, [pc, #268]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028a:	4a42      	ldr	r2, [pc, #264]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800028c:	f043 0310 	orr.w	r3, r3, #16
 8000290:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000292:	e077      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF){
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a44      	ldr	r2, [pc, #272]	; (80003a8 <GPIO_PeriClockControl+0x194>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d106      	bne.n	80002aa <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800029c:	4b3d      	ldr	r3, [pc, #244]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a3c      	ldr	r2, [pc, #240]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002a2:	f043 0320 	orr.w	r3, r3, #32
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a8:	e06c      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOG){
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a3f      	ldr	r2, [pc, #252]	; (80003ac <GPIO_PeriClockControl+0x198>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d106      	bne.n	80002c0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80002b2:	4b38      	ldr	r3, [pc, #224]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	4a37      	ldr	r2, [pc, #220]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002be:	e061      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOH){
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a3b      	ldr	r2, [pc, #236]	; (80003b0 <GPIO_PeriClockControl+0x19c>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d15d      	bne.n	8000384 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 80002c8:	4b32      	ldr	r3, [pc, #200]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002cc:	4a31      	ldr	r2, [pc, #196]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002d4:	e056      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA){
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a2d      	ldr	r2, [pc, #180]	; (8000390 <GPIO_PeriClockControl+0x17c>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d106      	bne.n	80002ec <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 80002de:	4b2d      	ldr	r3, [pc, #180]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e2:	4a2c      	ldr	r2, [pc, #176]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002e4:	f023 0301 	bic.w	r3, r3, #1
 80002e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ea:	e04b      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB){
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a2a      	ldr	r2, [pc, #168]	; (8000398 <GPIO_PeriClockControl+0x184>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d106      	bne.n	8000302 <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 80002f4:	4b27      	ldr	r3, [pc, #156]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f8:	4a26      	ldr	r2, [pc, #152]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002fa:	f023 0302 	bic.w	r3, r3, #2
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000300:	e040      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC){
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a25      	ldr	r2, [pc, #148]	; (800039c <GPIO_PeriClockControl+0x188>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d106      	bne.n	8000318 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 800030a:	4b22      	ldr	r3, [pc, #136]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800030c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030e:	4a21      	ldr	r2, [pc, #132]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000310:	f023 0304 	bic.w	r3, r3, #4
 8000314:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000316:	e035      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOD){
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a21      	ldr	r2, [pc, #132]	; (80003a0 <GPIO_PeriClockControl+0x18c>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d106      	bne.n	800032e <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 8000320:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000324:	4a1b      	ldr	r2, [pc, #108]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000326:	f023 0308 	bic.w	r3, r3, #8
 800032a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800032c:	e02a      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE){
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a1c      	ldr	r2, [pc, #112]	; (80003a4 <GPIO_PeriClockControl+0x190>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d106      	bne.n	8000344 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 8000336:	4b17      	ldr	r3, [pc, #92]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033a:	4a16      	ldr	r2, [pc, #88]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800033c:	f023 0310 	bic.w	r3, r3, #16
 8000340:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000342:	e01f      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF){
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a18      	ldr	r2, [pc, #96]	; (80003a8 <GPIO_PeriClockControl+0x194>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d106      	bne.n	800035a <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000350:	4a10      	ldr	r2, [pc, #64]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000352:	f023 0320 	bic.w	r3, r3, #32
 8000356:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000358:	e014      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOG){
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a13      	ldr	r2, [pc, #76]	; (80003ac <GPIO_PeriClockControl+0x198>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d106      	bne.n	8000370 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8000362:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000366:	4a0b      	ldr	r2, [pc, #44]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000368:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800036c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036e:	e009      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOH){
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a0f      	ldr	r2, [pc, #60]	; (80003b0 <GPIO_PeriClockControl+0x19c>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d105      	bne.n	8000384 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037c:	4a05      	ldr	r2, [pc, #20]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800037e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000382:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	bc80      	pop	{r7}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40020000 	.word	0x40020000
 8000394:	40023800 	.word	0x40023800
 8000398:	40020400 	.word	0x40020400
 800039c:	40020800 	.word	0x40020800
 80003a0:	40020c00 	.word	0x40020c00
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40021400 	.word	0x40021400
 80003ac:	40021800 	.word	0x40021800
 80003b0:	40021c00 	.word	0x40021c00

080003b4 <GPIO_Init>:


/*
 * Initialize and De-Initialize
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]

	// Enable Peripheral Clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2101      	movs	r1, #1
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff ff26 	bl	8000214 <GPIO_PeriClockControl>

	uint32_t temp = 0; // Temporary Register
 80003c8:	2300      	movs	r3, #0
 80003ca:	60fb      	str	r3, [r7, #12]

	// 1. Configure Mode of GPIO Pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	795b      	ldrb	r3, [r3, #5]
 80003d0:	2b03      	cmp	r3, #3
 80003d2:	d821      	bhi.n	8000418 <GPIO_Init+0x64>
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	795b      	ldrb	r3, [r3, #5]
 80003d8:	461a      	mov	r2, r3
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	791b      	ldrb	r3, [r3, #4]
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	fa02 f303 	lsl.w	r3, r2, r3
 80003e4:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	791b      	ldrb	r3, [r3, #4]
 80003f0:	4619      	mov	r1, r3
 80003f2:	2303      	movs	r3, #3
 80003f4:	408b      	lsls	r3, r1
 80003f6:	43db      	mvns	r3, r3
 80003f8:	4619      	mov	r1, r3
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	400a      	ands	r2, r1
 8000400:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // Set
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	6819      	ldr	r1, [r3, #0]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	68fa      	ldr	r2, [r7, #12]
 800040e:	430a      	orrs	r2, r1
 8000410:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	e0b8      	b.n	800058a <GPIO_Init+0x1d6>
	}else{
		// TODO: Interrupt Mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	795b      	ldrb	r3, [r3, #5]
 800041c:	2b04      	cmp	r3, #4
 800041e:	d117      	bne.n	8000450 <GPIO_Init+0x9c>
			// Configure the Falling Trigger Selection Register
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000420:	4b43      	ldr	r3, [pc, #268]	; (8000530 <GPIO_Init+0x17c>)
 8000422:	68db      	ldr	r3, [r3, #12]
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	7912      	ldrb	r2, [r2, #4]
 8000428:	4611      	mov	r1, r2
 800042a:	2201      	movs	r2, #1
 800042c:	408a      	lsls	r2, r1
 800042e:	4611      	mov	r1, r2
 8000430:	4a3f      	ldr	r2, [pc, #252]	; (8000530 <GPIO_Init+0x17c>)
 8000432:	430b      	orrs	r3, r1
 8000434:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear RTSR
 8000436:	4b3e      	ldr	r3, [pc, #248]	; (8000530 <GPIO_Init+0x17c>)
 8000438:	689b      	ldr	r3, [r3, #8]
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	7912      	ldrb	r2, [r2, #4]
 800043e:	4611      	mov	r1, r2
 8000440:	2201      	movs	r2, #1
 8000442:	408a      	lsls	r2, r1
 8000444:	43d2      	mvns	r2, r2
 8000446:	4611      	mov	r1, r2
 8000448:	4a39      	ldr	r2, [pc, #228]	; (8000530 <GPIO_Init+0x17c>)
 800044a:	400b      	ands	r3, r1
 800044c:	6093      	str	r3, [r2, #8]
 800044e:	e035      	b.n	80004bc <GPIO_Init+0x108>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	795b      	ldrb	r3, [r3, #5]
 8000454:	2b05      	cmp	r3, #5
 8000456:	d117      	bne.n	8000488 <GPIO_Init+0xd4>
			// Configure the Rising Trigger Selection Register
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000458:	4b35      	ldr	r3, [pc, #212]	; (8000530 <GPIO_Init+0x17c>)
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	687a      	ldr	r2, [r7, #4]
 800045e:	7912      	ldrb	r2, [r2, #4]
 8000460:	4611      	mov	r1, r2
 8000462:	2201      	movs	r2, #1
 8000464:	408a      	lsls	r2, r1
 8000466:	4611      	mov	r1, r2
 8000468:	4a31      	ldr	r2, [pc, #196]	; (8000530 <GPIO_Init+0x17c>)
 800046a:	430b      	orrs	r3, r1
 800046c:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear FTSR
 800046e:	4b30      	ldr	r3, [pc, #192]	; (8000530 <GPIO_Init+0x17c>)
 8000470:	68db      	ldr	r3, [r3, #12]
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	7912      	ldrb	r2, [r2, #4]
 8000476:	4611      	mov	r1, r2
 8000478:	2201      	movs	r2, #1
 800047a:	408a      	lsls	r2, r1
 800047c:	43d2      	mvns	r2, r2
 800047e:	4611      	mov	r1, r2
 8000480:	4a2b      	ldr	r2, [pc, #172]	; (8000530 <GPIO_Init+0x17c>)
 8000482:	400b      	ands	r3, r1
 8000484:	60d3      	str	r3, [r2, #12]
 8000486:	e019      	b.n	80004bc <GPIO_Init+0x108>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	795b      	ldrb	r3, [r3, #5]
 800048c:	2b06      	cmp	r3, #6
 800048e:	d115      	bne.n	80004bc <GPIO_Init+0x108>
			// Configure Both Falling and Rising
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000490:	4b27      	ldr	r3, [pc, #156]	; (8000530 <GPIO_Init+0x17c>)
 8000492:	68db      	ldr	r3, [r3, #12]
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	7912      	ldrb	r2, [r2, #4]
 8000498:	4611      	mov	r1, r2
 800049a:	2201      	movs	r2, #1
 800049c:	408a      	lsls	r2, r1
 800049e:	4611      	mov	r1, r2
 80004a0:	4a23      	ldr	r2, [pc, #140]	; (8000530 <GPIO_Init+0x17c>)
 80004a2:	430b      	orrs	r3, r1
 80004a4:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a6:	4b22      	ldr	r3, [pc, #136]	; (8000530 <GPIO_Init+0x17c>)
 80004a8:	689b      	ldr	r3, [r3, #8]
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	7912      	ldrb	r2, [r2, #4]
 80004ae:	4611      	mov	r1, r2
 80004b0:	2201      	movs	r2, #1
 80004b2:	408a      	lsls	r2, r1
 80004b4:	4611      	mov	r1, r2
 80004b6:	4a1e      	ldr	r2, [pc, #120]	; (8000530 <GPIO_Init+0x17c>)
 80004b8:	430b      	orrs	r3, r1
 80004ba:	6093      	str	r3, [r2, #8]
		}

		// Configure the GPIO port Selection in SYSCFG_EXTICR
		uint8_t ExtiCR_Number = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	791b      	ldrb	r3, [r3, #4]
 80004c0:	089b      	lsrs	r3, r3, #2
 80004c2:	72fb      	strb	r3, [r7, #11]
		uint8_t ExtiCR_ShiftOffset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	791b      	ldrb	r3, [r3, #4]
 80004c8:	f003 0303 	and.w	r3, r3, #3
 80004cc:	72bb      	strb	r3, [r7, #10]
		uint8_t portcode = GPIO_BASEADDR_TO_PORTCODE(pGPIOHandle->pGPIOx);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a18      	ldr	r2, [pc, #96]	; (8000534 <GPIO_Init+0x180>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d03b      	beq.n	8000550 <GPIO_Init+0x19c>
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a16      	ldr	r2, [pc, #88]	; (8000538 <GPIO_Init+0x184>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d024      	beq.n	800052c <GPIO_Init+0x178>
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a15      	ldr	r2, [pc, #84]	; (800053c <GPIO_Init+0x188>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d01d      	beq.n	8000528 <GPIO_Init+0x174>
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a13      	ldr	r2, [pc, #76]	; (8000540 <GPIO_Init+0x18c>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d016      	beq.n	8000524 <GPIO_Init+0x170>
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a12      	ldr	r2, [pc, #72]	; (8000544 <GPIO_Init+0x190>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d00f      	beq.n	8000520 <GPIO_Init+0x16c>
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a10      	ldr	r2, [pc, #64]	; (8000548 <GPIO_Init+0x194>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d008      	beq.n	800051c <GPIO_Init+0x168>
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a0f      	ldr	r2, [pc, #60]	; (800054c <GPIO_Init+0x198>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d101      	bne.n	8000518 <GPIO_Init+0x164>
 8000514:	2306      	movs	r3, #6
 8000516:	e01c      	b.n	8000552 <GPIO_Init+0x19e>
 8000518:	2300      	movs	r3, #0
 800051a:	e01a      	b.n	8000552 <GPIO_Init+0x19e>
 800051c:	2305      	movs	r3, #5
 800051e:	e018      	b.n	8000552 <GPIO_Init+0x19e>
 8000520:	2304      	movs	r3, #4
 8000522:	e016      	b.n	8000552 <GPIO_Init+0x19e>
 8000524:	2303      	movs	r3, #3
 8000526:	e014      	b.n	8000552 <GPIO_Init+0x19e>
 8000528:	2302      	movs	r3, #2
 800052a:	e012      	b.n	8000552 <GPIO_Init+0x19e>
 800052c:	2301      	movs	r3, #1
 800052e:	e010      	b.n	8000552 <GPIO_Init+0x19e>
 8000530:	40013c00 	.word	0x40013c00
 8000534:	40020000 	.word	0x40020000
 8000538:	40020400 	.word	0x40020400
 800053c:	40020800 	.word	0x40020800
 8000540:	40020c00 	.word	0x40020c00
 8000544:	40021000 	.word	0x40021000
 8000548:	40021400 	.word	0x40021400
 800054c:	40021800 	.word	0x40021800
 8000550:	2300      	movs	r3, #0
 8000552:	727b      	strb	r3, [r7, #9]
		SYSCFG_PCLK_EN();
 8000554:	4b6a      	ldr	r3, [pc, #424]	; (8000700 <GPIO_Init+0x34c>)
 8000556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000558:	4a69      	ldr	r2, [pc, #420]	; (8000700 <GPIO_Init+0x34c>)
 800055a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[ExtiCR_Number] = portcode << (ExtiCR_ShiftOffset * 4);
 8000560:	7a7a      	ldrb	r2, [r7, #9]
 8000562:	7abb      	ldrb	r3, [r7, #10]
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	fa02 f103 	lsl.w	r1, r2, r3
 800056a:	4a66      	ldr	r2, [pc, #408]	; (8000704 <GPIO_Init+0x350>)
 800056c:	7afb      	ldrb	r3, [r7, #11]
 800056e:	3302      	adds	r3, #2
 8000570:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000574:	4b64      	ldr	r3, [pc, #400]	; (8000708 <GPIO_Init+0x354>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	7912      	ldrb	r2, [r2, #4]
 800057c:	4611      	mov	r1, r2
 800057e:	2201      	movs	r2, #1
 8000580:	408a      	lsls	r2, r1
 8000582:	4611      	mov	r1, r2
 8000584:	4a60      	ldr	r2, [pc, #384]	; (8000708 <GPIO_Init+0x354>)
 8000586:	430b      	orrs	r3, r1
 8000588:	6013      	str	r3, [r2, #0]
	}

	// 2. Configure Speed
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	799b      	ldrb	r3, [r3, #6]
 800058e:	461a      	mov	r2, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	791b      	ldrb	r3, [r3, #4]
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	fa02 f303 	lsl.w	r3, r2, r3
 800059a:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	689a      	ldr	r2, [r3, #8]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	791b      	ldrb	r3, [r3, #4]
 80005a6:	4619      	mov	r1, r3
 80005a8:	2303      	movs	r3, #3
 80005aa:	408b      	lsls	r3, r1
 80005ac:	43db      	mvns	r3, r3
 80005ae:	4619      	mov	r1, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	400a      	ands	r2, r1
 80005b6:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	6899      	ldr	r1, [r3, #8]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	68fa      	ldr	r2, [r7, #12]
 80005c4:	430a      	orrs	r2, r1
 80005c6:	609a      	str	r2, [r3, #8]
	temp = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]

	// 3. Configure Pull-up Pull-down Settings
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	79db      	ldrb	r3, [r3, #7]
 80005d0:	461a      	mov	r2, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	791b      	ldrb	r3, [r3, #4]
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	fa02 f303 	lsl.w	r3, r2, r3
 80005dc:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	68da      	ldr	r2, [r3, #12]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	791b      	ldrb	r3, [r3, #4]
 80005e8:	4619      	mov	r1, r3
 80005ea:	2303      	movs	r3, #3
 80005ec:	408b      	lsls	r3, r1
 80005ee:	43db      	mvns	r3, r3
 80005f0:	4619      	mov	r1, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	400a      	ands	r2, r1
 80005f8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	68d9      	ldr	r1, [r3, #12]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	68fa      	ldr	r2, [r7, #12]
 8000606:	430a      	orrs	r2, r1
 8000608:	60da      	str	r2, [r3, #12]
	temp = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]

	// 4. Configure the Output Type
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	7a1b      	ldrb	r3, [r3, #8]
 8000612:	461a      	mov	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	791b      	ldrb	r3, [r3, #4]
 8000618:	fa02 f303 	lsl.w	r3, r2, r3
 800061c:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	685a      	ldr	r2, [r3, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	791b      	ldrb	r3, [r3, #4]
 8000628:	4619      	mov	r1, r3
 800062a:	2301      	movs	r3, #1
 800062c:	408b      	lsls	r3, r1
 800062e:	43db      	mvns	r3, r3
 8000630:	4619      	mov	r1, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	400a      	ands	r2, r1
 8000638:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	6859      	ldr	r1, [r3, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	68fa      	ldr	r2, [r7, #12]
 8000646:	430a      	orrs	r2, r1
 8000648:	605a      	str	r2, [r3, #4]
	temp = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]

	// 5. Configure Alternate Functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFUN){
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	795b      	ldrb	r3, [r3, #5]
 8000652:	2b02      	cmp	r3, #2
 8000654:	d150      	bne.n	80006f8 <GPIO_Init+0x344>
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= GPIO_PIN_NO_7){
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	791b      	ldrb	r3, [r3, #4]
 800065a:	2b07      	cmp	r3, #7
 800065c:	d826      	bhi.n	80006ac <GPIO_Init+0x2f8>
				// AFRL Registers
				temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	7a5b      	ldrb	r3, [r3, #9]
 8000662:	461a      	mov	r2, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	791b      	ldrb	r3, [r3, #4]
 8000668:	f003 0307 	and.w	r3, r3, #7
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	fa02 f303 	lsl.w	r3, r2, r3
 8000672:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->AFRL &= ~(0xF << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8))); // Clear
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	6a1a      	ldr	r2, [r3, #32]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	791b      	ldrb	r3, [r3, #4]
 800067e:	f003 0307 	and.w	r3, r3, #7
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	210f      	movs	r1, #15
 8000686:	fa01 f303 	lsl.w	r3, r1, r3
 800068a:	43db      	mvns	r3, r3
 800068c:	4619      	mov	r1, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	400a      	ands	r2, r1
 8000694:	621a      	str	r2, [r3, #32]
				pGPIOHandle->pGPIOx->AFRL |= temp;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	6a19      	ldr	r1, [r3, #32]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	430a      	orrs	r2, r1
 80006a4:	621a      	str	r2, [r3, #32]
				temp = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->AFRH |= temp;
				temp = 0;
			}
	}

}
 80006aa:	e025      	b.n	80006f8 <GPIO_Init+0x344>
				temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	7a5b      	ldrb	r3, [r3, #9]
 80006b0:	461a      	mov	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	791b      	ldrb	r3, [r3, #4]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	fa02 f303 	lsl.w	r3, r2, r3
 80006c0:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->AFRH &= ~(0xF << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8))); // Clear
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	791b      	ldrb	r3, [r3, #4]
 80006cc:	f003 0307 	and.w	r3, r3, #7
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	210f      	movs	r1, #15
 80006d4:	fa01 f303 	lsl.w	r3, r1, r3
 80006d8:	43db      	mvns	r3, r3
 80006da:	4619      	mov	r1, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	400a      	ands	r2, r1
 80006e2:	625a      	str	r2, [r3, #36]	; 0x24
				pGPIOHandle->pGPIOx->AFRH |= temp;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	68fa      	ldr	r2, [r7, #12]
 80006f0:	430a      	orrs	r2, r1
 80006f2:	625a      	str	r2, [r3, #36]	; 0x24
				temp = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
}
 80006f8:	bf00      	nop
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40013800 	.word	0x40013800
 8000708:	40013c00 	.word	0x40013c00

0800070c <GPIO_ReadFromInputPin>:


/*
 * Data Read and Write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	691a      	ldr	r2, [r3, #16]
 800071c:	78fb      	ldrb	r3, [r7, #3]
 800071e:	fa22 f303 	lsr.w	r3, r2, r3
 8000722:	b2db      	uxtb	r3, r3
 8000724:	f003 0301 	and.w	r3, r3, #1
 8000728:	73fb      	strb	r3, [r7, #15]
	return value;
 800072a:	7bfb      	ldrb	r3, [r7, #15]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3714      	adds	r7, #20
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr

08000736 <I2C_GenerateStartCondition>:
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx);
static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx);
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx);

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 8000736:	b480      	push	{r7}
 8000738:	b083      	sub	sp, #12
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	601a      	str	r2, [r3, #0]
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <I2C_ExecuteAddressPhase>:

static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1; // Makes space for the R/nW bit
 8000760:	78fb      	ldrb	r3, [r7, #3]
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1 << 0);
 8000766:	78fb      	ldrb	r3, [r7, #3]
 8000768:	f023 0301 	bic.w	r3, r3, #1
 800076c:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 800076e:	78fa      	ldrb	r2, [r7, #3]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	611a      	str	r2, [r3, #16]
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr

0800077e <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx){
 800077e:	b480      	push	{r7}
 8000780:	b085      	sub	sp, #20
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead = pI2Cx->SR1;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	60fb      	str	r3, [r7, #12]
	dummyRead = pI2Cx->SR2;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	60fb      	str	r3, [r7, #12]
	(void)dummyRead;
}
 8000792:	bf00      	nop
 8000794:	3714      	adds	r7, #20
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr

0800079c <I2C_GenerateStopCondition>:

static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	601a      	str	r2, [r3, #0]
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr
	...

080007bc <I2C_PeriClockControl>:


// Peripheral Clock Setup
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	460b      	mov	r3, r1
 80007c6:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 80007c8:	78fb      	ldrb	r3, [r7, #3]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d120      	bne.n	8000810 <I2C_PeriClockControl+0x54>
		// Enable
		if(pI2Cx == I2C1){
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4a22      	ldr	r2, [pc, #136]	; (800085c <I2C_PeriClockControl+0xa0>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d106      	bne.n	80007e4 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 80007d6:	4b22      	ldr	r3, [pc, #136]	; (8000860 <I2C_PeriClockControl+0xa4>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	4a21      	ldr	r2, [pc, #132]	; (8000860 <I2C_PeriClockControl+0xa4>)
 80007dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007e0:	6413      	str	r3, [r2, #64]	; 0x40
			I2C2_PCLK_DI();
		}else if(pI2Cx == I2C3){
			I2C3_PCLK_DI();
		}
	}
}
 80007e2:	e035      	b.n	8000850 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C2){
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a1f      	ldr	r2, [pc, #124]	; (8000864 <I2C_PeriClockControl+0xa8>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d106      	bne.n	80007fa <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 80007ec:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <I2C_PeriClockControl+0xa4>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	4a1b      	ldr	r2, [pc, #108]	; (8000860 <I2C_PeriClockControl+0xa4>)
 80007f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007f6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007f8:	e02a      	b.n	8000850 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C3){
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a1a      	ldr	r2, [pc, #104]	; (8000868 <I2C_PeriClockControl+0xac>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d126      	bne.n	8000850 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <I2C_PeriClockControl+0xa4>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	4a16      	ldr	r2, [pc, #88]	; (8000860 <I2C_PeriClockControl+0xa4>)
 8000808:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800080c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800080e:	e01f      	b.n	8000850 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1){
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a12      	ldr	r2, [pc, #72]	; (800085c <I2C_PeriClockControl+0xa0>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d106      	bne.n	8000826 <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <I2C_PeriClockControl+0xa4>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	4a10      	ldr	r2, [pc, #64]	; (8000860 <I2C_PeriClockControl+0xa4>)
 800081e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000822:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000824:	e014      	b.n	8000850 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C2){
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <I2C_PeriClockControl+0xa8>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d106      	bne.n	800083c <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <I2C_PeriClockControl+0xa4>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <I2C_PeriClockControl+0xa4>)
 8000834:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000838:	6413      	str	r3, [r2, #64]	; 0x40
}
 800083a:	e009      	b.n	8000850 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C3){
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4a0a      	ldr	r2, [pc, #40]	; (8000868 <I2C_PeriClockControl+0xac>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d105      	bne.n	8000850 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <I2C_PeriClockControl+0xa4>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000848:	4a05      	ldr	r2, [pc, #20]	; (8000860 <I2C_PeriClockControl+0xa4>)
 800084a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800084e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40005400 	.word	0x40005400
 8000860:	40023800 	.word	0x40023800
 8000864:	40005800 	.word	0x40005800
 8000868:	40005c00 	.word	0x40005c00

0800086c <I2C_PeripheralControl>:

// I2C Peripheral Control
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	460b      	mov	r3, r1
 8000876:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000878:	78fb      	ldrb	r3, [r7, #3]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d106      	bne.n	800088c <I2C_PeripheralControl+0x20>
		// Enable
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f043 0201 	orr.w	r2, r3, #1
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	601a      	str	r2, [r3, #0]
	}else{
		// Disable
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}

}
 800088a:	e005      	b.n	8000898 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f023 0201 	bic.w	r2, r3, #1
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	601a      	str	r2, [r3, #0]
}
 8000898:	bf00      	nop
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr

080008a2 <RCC_GetPLLOutputClock>:

// Not implemented, just a placeholder
uint32_t RCC_GetPLLOutputClock(void){
 80008a2:	b480      	push	{r7}
 80008a4:	b083      	sub	sp, #12
 80008a6:	af00      	add	r7, sp, #0
	uint32_t temp = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	607b      	str	r3, [r7, #4]
	return temp;
 80008ac:	687b      	ldr	r3, [r7, #4]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr

080008b8 <RCC_GetPCLK1Value>:

uint16_t AHB_PreScaler[8] = {2, 4, 8, 16, 64, 128, 512};
uint16_t APB1_PreScaler[4] = {2, 4, 8, 16};

uint32_t RCC_GetPCLK1Value(void){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, ahbp, apb1p;
	clksrc = (RCC->CFGR >> 2) & 0x3;
 80008be:	4b26      	ldr	r3, [pc, #152]	; (8000958 <RCC_GetPCLK1Value+0xa0>)
 80008c0:	689b      	ldr	r3, [r3, #8]
 80008c2:	089b      	lsrs	r3, r3, #2
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	f003 0303 	and.w	r3, r3, #3
 80008ca:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0){
 80008cc:	7a7b      	ldrb	r3, [r7, #9]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d102      	bne.n	80008d8 <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 80008d2:	4b22      	ldr	r3, [pc, #136]	; (800095c <RCC_GetPCLK1Value+0xa4>)
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	e00b      	b.n	80008f0 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1){
 80008d8:	7a7b      	ldrb	r3, [r7, #9]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d102      	bne.n	80008e4 <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 80008de:	4b20      	ldr	r3, [pc, #128]	; (8000960 <RCC_GetPCLK1Value+0xa8>)
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	e005      	b.n	80008f0 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 2){
 80008e4:	7a7b      	ldrb	r3, [r7, #9]
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d102      	bne.n	80008f0 <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 80008ea:	f7ff ffda 	bl	80008a2 <RCC_GetPLLOutputClock>
 80008ee:	60f8      	str	r0, [r7, #12]
	}

	// AHB Pre-scaler
	temp = (RCC->CFGR >> 4) & 0xF;
 80008f0:	4b19      	ldr	r3, [pc, #100]	; (8000958 <RCC_GetPCLK1Value+0xa0>)
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	091b      	lsrs	r3, r3, #4
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	f003 030f 	and.w	r3, r3, #15
 80008fc:	723b      	strb	r3, [r7, #8]
	if(temp < 8){
 80008fe:	7a3b      	ldrb	r3, [r7, #8]
 8000900:	2b07      	cmp	r3, #7
 8000902:	d802      	bhi.n	800090a <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 8000904:	2301      	movs	r3, #1
 8000906:	72fb      	strb	r3, [r7, #11]
 8000908:	e005      	b.n	8000916 <RCC_GetPCLK1Value+0x5e>
	}else{
		ahbp = AHB_PreScaler[temp-8];
 800090a:	7a3b      	ldrb	r3, [r7, #8]
 800090c:	3b08      	subs	r3, #8
 800090e:	4a15      	ldr	r2, [pc, #84]	; (8000964 <RCC_GetPCLK1Value+0xac>)
 8000910:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000914:	72fb      	strb	r3, [r7, #11]
	}

	// APB1 Pre-scaler
	temp = (RCC->CFGR >> 10) & 0x7;
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <RCC_GetPCLK1Value+0xa0>)
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	0a9b      	lsrs	r3, r3, #10
 800091c:	b2db      	uxtb	r3, r3
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	723b      	strb	r3, [r7, #8]
	if(temp < 8){
 8000924:	7a3b      	ldrb	r3, [r7, #8]
 8000926:	2b07      	cmp	r3, #7
 8000928:	d802      	bhi.n	8000930 <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 800092a:	2301      	movs	r3, #1
 800092c:	72bb      	strb	r3, [r7, #10]
 800092e:	e005      	b.n	800093c <RCC_GetPCLK1Value+0x84>
	}else{
		apb1p = APB1_PreScaler[temp-4];
 8000930:	7a3b      	ldrb	r3, [r7, #8]
 8000932:	3b04      	subs	r3, #4
 8000934:	4a0c      	ldr	r2, [pc, #48]	; (8000968 <RCC_GetPCLK1Value+0xb0>)
 8000936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800093a:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1p;
 800093c:	7afb      	ldrb	r3, [r7, #11]
 800093e:	68fa      	ldr	r2, [r7, #12]
 8000940:	fbb2 f2f3 	udiv	r2, r2, r3
 8000944:	7abb      	ldrb	r3, [r7, #10]
 8000946:	fbb2 f3f3 	udiv	r3, r2, r3
 800094a:	607b      	str	r3, [r7, #4]

	return pclk1;
 800094c:	687b      	ldr	r3, [r7, #4]
}
 800094e:	4618      	mov	r0, r3
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800
 800095c:	00f42400 	.word	0x00f42400
 8000960:	007a1200 	.word	0x007a1200
 8000964:	20000000 	.word	0x20000000
 8000968:	20000010 	.word	0x20000010

0800096c <I2C_Init>:

void I2C_Init(I2C_Handle_t *pI2C_Handle){
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]

	// Enable the Clock for the I2Cx Peripheral
	I2C_PeriClockControl(pI2C_Handle->pI2Cx, ENABLE);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2101      	movs	r1, #1
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff ff1c 	bl	80007bc <I2C_PeriClockControl>

	// ACK Control Bit
	tempreg |= pI2C_Handle->I2C_Config.I2C_ACKControl << 10;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	7a5b      	ldrb	r3, [r3, #9]
 8000988:	029b      	lsls	r3, r3, #10
 800098a:	461a      	mov	r2, r3
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	4313      	orrs	r3, r2
 8000990:	60fb      	str	r3, [r7, #12]
	pI2C_Handle->pI2Cx->CR1 = tempreg;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	601a      	str	r2, [r3, #0]

	// Configure the FREQ field of CR2
	tempreg = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
	tempreg |= (RCC_GetPCLK1Value() / 1000000U); // Divide by 1MHz to only get 16 instead of 16MHz
 800099e:	f7ff ff8b 	bl	80008b8 <RCC_GetPCLK1Value>
 80009a2:	4603      	mov	r3, r0
 80009a4:	4a4e      	ldr	r2, [pc, #312]	; (8000ae0 <I2C_Init+0x174>)
 80009a6:	fba2 2303 	umull	r2, r3, r2, r3
 80009aa:	0c9b      	lsrs	r3, r3, #18
 80009ac:	68fa      	ldr	r2, [r7, #12]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	60fb      	str	r3, [r7, #12]
	pI2C_Handle->pI2Cx->CR2 = (tempreg & 0x3F);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	68fa      	ldr	r2, [r7, #12]
 80009b8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80009bc:	605a      	str	r2, [r3, #4]

	// Device Own Address
	tempreg |= pI2C_Handle->I2C_Config.I2C_DeviceAddress << 1;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	7a1b      	ldrb	r3, [r3, #8]
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	461a      	mov	r2, r3
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d2:	60fb      	str	r3, [r7, #12]
	pI2C_Handle->pI2Cx->OAR1 |= tempreg;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	6899      	ldr	r1, [r3, #8]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	430a      	orrs	r2, r1
 80009e2:	609a      	str	r2, [r3, #8]

	// Clock Control Calculations
	uint16_t ccr_value = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
	if(pI2C_Handle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	4a3c      	ldr	r2, [pc, #240]	; (8000ae4 <I2C_Init+0x178>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d813      	bhi.n	8000a1e <I2C_Init+0xb2>
		// Standard Mode
		tempreg &= ~(1 << 15);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009fc:	60fb      	str	r3, [r7, #12]
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2C_Handle->I2C_Config.I2C_SCLSpeed);
 80009fe:	f7ff ff5b 	bl	80008b8 <RCC_GetPCLK1Value>
 8000a02:	4602      	mov	r2, r0
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0e:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000a10:	897b      	ldrh	r3, [r7, #10]
 8000a12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	e02d      	b.n	8000a7a <I2C_Init+0x10e>
	}else{
		// Fast Mode
		tempreg |= (1 << 15);
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a24:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2C_Handle->I2C_Config.I2C_FMDutyCycle << 14);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	7a9b      	ldrb	r3, [r3, #10]
 8000a2a:	039b      	lsls	r3, r3, #14
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	60fb      	str	r3, [r7, #12]
		if(pI2C_Handle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	7a9b      	ldrb	r3, [r3, #10]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d10b      	bne.n	8000a54 <I2C_Init+0xe8>
			ccr_value = RCC_GetPCLK1Value() / (3 * pI2C_Handle->I2C_Config.I2C_SCLSpeed);
 8000a3c:	f7ff ff3c 	bl	80008b8 <RCC_GetPCLK1Value>
 8000a40:	4601      	mov	r1, r0
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	685a      	ldr	r2, [r3, #4]
 8000a46:	4613      	mov	r3, r2
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	4413      	add	r3, r2
 8000a4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a50:	817b      	strh	r3, [r7, #10]
 8000a52:	e00c      	b.n	8000a6e <I2C_Init+0x102>
		}else{
			ccr_value = RCC_GetPCLK1Value() / (25 * pI2C_Handle->I2C_Config.I2C_SCLSpeed);
 8000a54:	f7ff ff30 	bl	80008b8 <RCC_GetPCLK1Value>
 8000a58:	4601      	mov	r1, r0
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	685a      	ldr	r2, [r3, #4]
 8000a5e:	4613      	mov	r3, r2
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	4413      	add	r3, r2
 8000a64:	009a      	lsls	r2, r3, #2
 8000a66:	4413      	add	r3, r2
 8000a68:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a6c:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000a6e:	897b      	ldrh	r3, [r7, #10]
 8000a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a74:	68fa      	ldr	r2, [r7, #12]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	60fb      	str	r3, [r7, #12]
	}

	pI2C_Handle->pI2Cx->CCR |= tempreg;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	69d9      	ldr	r1, [r3, #28]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	68fa      	ldr	r2, [r7, #12]
 8000a86:	430a      	orrs	r2, r1
 8000a88:	61da      	str	r2, [r3, #28]

	// TRISE
	if(pI2C_Handle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	4a15      	ldr	r2, [pc, #84]	; (8000ae4 <I2C_Init+0x178>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d809      	bhi.n	8000aa8 <I2C_Init+0x13c>
		// Standard Mode
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000a94:	f7ff ff10 	bl	80008b8 <RCC_GetPCLK1Value>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	4a11      	ldr	r2, [pc, #68]	; (8000ae0 <I2C_Init+0x174>)
 8000a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa0:	0c9b      	lsrs	r3, r3, #18
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	e00d      	b.n	8000ac4 <I2C_Init+0x158>
	}else{
		// Fast Mode
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 8000aa8:	f7ff ff06 	bl	80008b8 <RCC_GetPCLK1Value>
 8000aac:	4603      	mov	r3, r0
 8000aae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000ab2:	fb02 f303 	mul.w	r3, r2, r3
 8000ab6:	0a5b      	lsrs	r3, r3, #9
 8000ab8:	4a0b      	ldr	r2, [pc, #44]	; (8000ae8 <I2C_Init+0x17c>)
 8000aba:	fba2 2303 	umull	r2, r3, r2, r3
 8000abe:	09db      	lsrs	r3, r3, #7
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	60fb      	str	r3, [r7, #12]
	}

	pI2C_Handle->pI2Cx->TRISE |= (tempreg & 0x3F);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	6a19      	ldr	r1, [r3, #32]
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	621a      	str	r2, [r3, #32]
}
 8000ad8:	bf00      	nop
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	431bde83 	.word	0x431bde83
 8000ae4:	000186a0 	.word	0x000186a0
 8000ae8:	00044b83 	.word	0x00044b83

08000aec <I2C_MasterSendData>:
}




void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint8_t Length, uint8_t SlaveAddr){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	4611      	mov	r1, r2
 8000af8:	461a      	mov	r2, r3
 8000afa:	460b      	mov	r3, r1
 8000afc:	71fb      	strb	r3, [r7, #7]
 8000afe:	4613      	mov	r3, r2
 8000b00:	71bb      	strb	r3, [r7, #6]
	// 1. Generate the Start Condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fe15 	bl	8000736 <I2C_GenerateStartCondition>

	// 2. Confirm that start generation is completed by checking the SB Flag in the SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 8000b0c:	bf00      	nop
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2101      	movs	r1, #1
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 f84f 	bl	8000bb8 <I2C_GetFlagStatus>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d0f6      	beq.n	8000b0e <I2C_MasterSendData+0x22>

	// 3. Send the Address of the slave with R/nW bit set to W(0) (total 8 bits)
	I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, SlaveAddr);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	79ba      	ldrb	r2, [r7, #6]
 8000b26:	4611      	mov	r1, r2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fe13 	bl	8000754 <I2C_ExecuteAddressPhase>

	// 4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 8000b2e:	bf00      	nop
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2102      	movs	r1, #2
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f83e 	bl	8000bb8 <I2C_GetFlagStatus>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d0f6      	beq.n	8000b30 <I2C_MasterSendData+0x44>

	// 5. Clear the ADDR Flag according to its software sequence
	I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fe19 	bl	800077e <I2C_ClearADDRFlag>

	// 6. Send the data until Length becomes 0
	while(Length > 0){
 8000b4c:	e014      	b.n	8000b78 <I2C_MasterSendData+0x8c>
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)); // Wait till TXE is set
 8000b4e:	bf00      	nop
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2180      	movs	r1, #128	; 0x80
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 f82e 	bl	8000bb8 <I2C_GetFlagStatus>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d0f6      	beq.n	8000b50 <I2C_MasterSendData+0x64>
		pI2CHandle->pI2Cx->DR = *pTxBuffer;
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	781a      	ldrb	r2, [r3, #0]
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	60bb      	str	r3, [r7, #8]
		Length--;
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	3b01      	subs	r3, #1
 8000b76:	71fb      	strb	r3, [r7, #7]
	while(Length > 0){
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d1e7      	bne.n	8000b4e <I2C_MasterSendData+0x62>
	}

	// 7. When Length becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 8000b7e:	bf00      	nop
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2180      	movs	r1, #128	; 0x80
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 f816 	bl	8000bb8 <I2C_GetFlagStatus>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d0f6      	beq.n	8000b80 <I2C_MasterSendData+0x94>
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));
 8000b92:	bf00      	nop
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2104      	movs	r1, #4
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f80c 	bl	8000bb8 <I2C_GetFlagStatus>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d0f6      	beq.n	8000b94 <I2C_MasterSendData+0xa8>

	// 8. Generate STOP condition and master need not to wait for the completion of stop condition
	I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fdf6 	bl	800079c <I2C_GenerateStopCondition>


}
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <I2C_GetFlagStatus>:

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName){
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName){
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	695a      	ldr	r2, [r3, #20]
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <I2C_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e000      	b.n	8000bd4 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000bd2:	2300      	movs	r3, #0
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
	...

08000be0 <delay>:

I2C_Handle_t I2C1Handle;

uint8_t some_data[] = "I2C > SPI\n";

void delay(void){
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<500000/2; i++){
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	e002      	b.n	8000bf2 <delay+0x12>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <delay+0x28>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d9f8      	bls.n	8000bec <delay+0xc>

	}
}
 8000bfa:	bf00      	nop
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	0003d08f 	.word	0x0003d08f

08000c0c <I2C1_GPIOInits>:

void I2C1_GPIOInits(void){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	; 0x28
 8000c10:	af00      	add	r7, sp, #0

	GPIO_Handle_t I2CPins;

	// Common Settings between Pins
	I2CPins.pGPIOx = GPIOB;
 8000c12:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <I2C1_GPIOInits+0x64>)
 8000c14:	61fb      	str	r3, [r7, #28]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFUN;
 8000c16:	2302      	movs	r3, #2
 8000c18:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000c22:	2301      	movs	r3, #1
 8000c24:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD; // External Pull-UP Used
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22


	// SCL
	GPIO_Handle_t I2C_SCL_Pin = I2CPins;
 8000c34:	f107 0310 	add.w	r3, r7, #16
 8000c38:	f107 021c 	add.w	r2, r7, #28
 8000c3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	I2C_SCL_Pin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
 8000c42:	2308      	movs	r3, #8
 8000c44:	753b      	strb	r3, [r7, #20]
	GPIO_Init(&I2C_SCL_Pin);
 8000c46:	f107 0310 	add.w	r3, r7, #16
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fbb2 	bl	80003b4 <GPIO_Init>

	// SDA
	GPIO_Handle_t I2C_SDA_Pin = I2CPins;
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	f107 021c 	add.w	r2, r7, #28
 8000c56:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	I2C_SDA_Pin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 8000c5c:	2309      	movs	r3, #9
 8000c5e:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2C_SDA_Pin);
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fba6 	bl	80003b4 <GPIO_Init>

}
 8000c68:	bf00      	nop
 8000c6a:	3728      	adds	r7, #40	; 0x28
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40020400 	.word	0x40020400

08000c74 <I2C1_Inits>:


void I2C1_Inits(void){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0

	I2C1Handle.pI2Cx = I2C1;
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <I2C1_Inits+0x2c>)
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <I2C1_Inits+0x30>)
 8000c7c:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <I2C1_Inits+0x2c>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <I2C1_Inits+0x2c>)
 8000c86:	2261      	movs	r2, #97	; 0x61
 8000c88:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000c8a:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <I2C1_Inits+0x2c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000c90:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <I2C1_Inits+0x2c>)
 8000c92:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <I2C1_Inits+0x34>)
 8000c94:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 8000c96:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <I2C1_Inits+0x2c>)
 8000c98:	f7ff fe68 	bl	800096c <I2C_Init>

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000040 	.word	0x20000040
 8000ca4:	40005400 	.word	0x40005400
 8000ca8:	000186a0 	.word	0x000186a0

08000cac <GPIO_ButtonInit>:

void GPIO_ButtonInit(void){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioButton;
	// Configure the Button
	GpioButton.pGPIOx = GPIOC;
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <GPIO_ButtonInit+0x2c>)
 8000cb4:	607b      	str	r3, [r7, #4]
	GpioButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000cb6:	230d      	movs	r3, #13
 8000cb8:	723b      	strb	r3, [r7, #8]
	GpioButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	727b      	strb	r3, [r7, #9]
	GpioButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	72fb      	strb	r3, [r7, #11]
	GpioButton.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(&GpioButton);
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fb73 	bl	80003b4 <GPIO_Init>
}
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40020800 	.word	0x40020800

08000cdc <main>:



int main(void){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0

	// GPIO Button
	GPIO_ButtonInit();
 8000ce0:	f7ff ffe4 	bl	8000cac <GPIO_ButtonInit>

	// Initialize the GPIO pins
	I2C1_GPIOInits();
 8000ce4:	f7ff ff92 	bl	8000c0c <I2C1_GPIOInits>

	// Initialize the I2C1 Peripheral
	I2C1_Inits();
 8000ce8:	f7ff ffc4 	bl	8000c74 <I2C1_Inits>

	// Enable the I2C1 Peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 8000cec:	2101      	movs	r1, #1
 8000cee:	480c      	ldr	r0, [pc, #48]	; (8000d20 <main+0x44>)
 8000cf0:	f7ff fdbc 	bl	800086c <I2C_PeripheralControl>

	while(1){
		// Wait for button press
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) != BUTTON_PRESSED);
 8000cf4:	bf00      	nop
 8000cf6:	210d      	movs	r1, #13
 8000cf8:	480a      	ldr	r0, [pc, #40]	; (8000d24 <main+0x48>)
 8000cfa:	f7ff fd07 	bl	800070c <GPIO_ReadFromInputPin>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d1f8      	bne.n	8000cf6 <main+0x1a>
		// For the De-bouncing of the Button
		delay();
 8000d04:	f7ff ff6c 	bl	8000be0 <delay>

		// Send some data
		I2C_MasterSendData(&I2C1Handle, some_data, strlen((char*)some_data), SLAVE_ADDR);
 8000d08:	4807      	ldr	r0, [pc, #28]	; (8000d28 <main+0x4c>)
 8000d0a:	f7ff fa7b 	bl	8000204 <strlen>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	2368      	movs	r3, #104	; 0x68
 8000d14:	4904      	ldr	r1, [pc, #16]	; (8000d28 <main+0x4c>)
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <main+0x50>)
 8000d18:	f7ff fee8 	bl	8000aec <I2C_MasterSendData>
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) != BUTTON_PRESSED);
 8000d1c:	e7ea      	b.n	8000cf4 <main+0x18>
 8000d1e:	bf00      	nop
 8000d20:	40005400 	.word	0x40005400
 8000d24:	40020800 	.word	0x40020800
 8000d28:	20000018 	.word	0x20000018
 8000d2c:	20000040 	.word	0x20000040

08000d30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d30:	480d      	ldr	r0, [pc, #52]	; (8000d68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d32:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d34:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d38:	480c      	ldr	r0, [pc, #48]	; (8000d6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d3a:	490d      	ldr	r1, [pc, #52]	; (8000d70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d3c:	4a0d      	ldr	r2, [pc, #52]	; (8000d74 <LoopForever+0xe>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d40:	e002      	b.n	8000d48 <LoopCopyDataInit>

08000d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d46:	3304      	adds	r3, #4

08000d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d4c:	d3f9      	bcc.n	8000d42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d50:	4c0a      	ldr	r4, [pc, #40]	; (8000d7c <LoopForever+0x16>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d54:	e001      	b.n	8000d5a <LoopFillZerobss>

08000d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d58:	3204      	adds	r2, #4

08000d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d5c:	d3fb      	bcc.n	8000d56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d5e:	f000 f811 	bl	8000d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d62:	f7ff ffbb 	bl	8000cdc <main>

08000d66 <LoopForever>:

LoopForever:
  b LoopForever
 8000d66:	e7fe      	b.n	8000d66 <LoopForever>
  ldr   r0, =_estack
 8000d68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d70:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000d74:	08000dec 	.word	0x08000dec
  ldr r2, =_sbss
 8000d78:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000d7c:	2000004c 	.word	0x2000004c

08000d80 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <ADC_IRQHandler>
	...

08000d84 <__libc_init_array>:
 8000d84:	b570      	push	{r4, r5, r6, lr}
 8000d86:	4d0d      	ldr	r5, [pc, #52]	; (8000dbc <__libc_init_array+0x38>)
 8000d88:	4c0d      	ldr	r4, [pc, #52]	; (8000dc0 <__libc_init_array+0x3c>)
 8000d8a:	1b64      	subs	r4, r4, r5
 8000d8c:	10a4      	asrs	r4, r4, #2
 8000d8e:	2600      	movs	r6, #0
 8000d90:	42a6      	cmp	r6, r4
 8000d92:	d109      	bne.n	8000da8 <__libc_init_array+0x24>
 8000d94:	4d0b      	ldr	r5, [pc, #44]	; (8000dc4 <__libc_init_array+0x40>)
 8000d96:	4c0c      	ldr	r4, [pc, #48]	; (8000dc8 <__libc_init_array+0x44>)
 8000d98:	f000 f818 	bl	8000dcc <_init>
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	10a4      	asrs	r4, r4, #2
 8000da0:	2600      	movs	r6, #0
 8000da2:	42a6      	cmp	r6, r4
 8000da4:	d105      	bne.n	8000db2 <__libc_init_array+0x2e>
 8000da6:	bd70      	pop	{r4, r5, r6, pc}
 8000da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dac:	4798      	blx	r3
 8000dae:	3601      	adds	r6, #1
 8000db0:	e7ee      	b.n	8000d90 <__libc_init_array+0xc>
 8000db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000db6:	4798      	blx	r3
 8000db8:	3601      	adds	r6, #1
 8000dba:	e7f2      	b.n	8000da2 <__libc_init_array+0x1e>
 8000dbc:	08000de4 	.word	0x08000de4
 8000dc0:	08000de4 	.word	0x08000de4
 8000dc4:	08000de4 	.word	0x08000de4
 8000dc8:	08000de8 	.word	0x08000de8

08000dcc <_init>:
 8000dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dce:	bf00      	nop
 8000dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dd2:	bc08      	pop	{r3}
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	4770      	bx	lr

08000dd8 <_fini>:
 8000dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dda:	bf00      	nop
 8000ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dde:	bc08      	pop	{r3}
 8000de0:	469e      	mov	lr, r3
 8000de2:	4770      	bx	lr

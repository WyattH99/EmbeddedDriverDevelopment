
002_Sample_Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015c4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08001794  08001794  00011794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018d0  080018d0  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  080018d0  080018d0  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018d0  080018d0  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018d0  080018d0  000118d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018d4  080018d4  000118d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  080018d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  200000a4  0800197c  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  0800197c  00020210  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ce  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000aee  00000000  00000000  00020111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003da  00000000  00000000  00020bff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000140  00000000  00000000  00020fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000dd  00000000  00000000  00021120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002bb2  00000000  00000000  000211fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001379  00000000  00000000  00023daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000983d  00000000  00000000  00025128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000e80  00000000  00000000  0002e968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0002f7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a4 	.word	0x200000a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800177c 	.word	0x0800177c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a8 	.word	0x200000a8
 800020c:	0800177c 	.word	0x0800177c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <array_fill_numbers>:
int numbers[] = { 456,345,678,567,890,456,3456,123,765,456,896,456,678,987,000,145,90};

int someData = 90;

void array_fill_numbers(int pNumbers[], unsigned int len)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]

    for ( unsigned int i = 0 ; i < len ; i++)
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	e015      	b.n	80002ec <array_fill_numbers+0x3c>
    {
        pNumbers[i] = rand() % 1000;
 80002c0:	f000 fa2e 	bl	8000720 <rand>
 80002c4:	4602      	mov	r2, r0
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	6879      	ldr	r1, [r7, #4]
 80002cc:	4419      	add	r1, r3
 80002ce:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <array_fill_numbers+0x50>)
 80002d0:	fb83 0302 	smull	r0, r3, r3, r2
 80002d4:	1198      	asrs	r0, r3, #6
 80002d6:	17d3      	asrs	r3, r2, #31
 80002d8:	1ac3      	subs	r3, r0, r3
 80002da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002de:	fb00 f303 	mul.w	r3, r0, r3
 80002e2:	1ad3      	subs	r3, r2, r3
 80002e4:	600b      	str	r3, [r1, #0]
    for ( unsigned int i = 0 ; i < len ; i++)
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	3301      	adds	r3, #1
 80002ea:	60fb      	str	r3, [r7, #12]
 80002ec:	68fa      	ldr	r2, [r7, #12]
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	429a      	cmp	r2, r3
 80002f2:	d3e5      	bcc.n	80002c0 <array_fill_numbers+0x10>
    }

}
 80002f4:	bf00      	nop
 80002f6:	bf00      	nop
 80002f8:	3710      	adds	r7, #16
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	10624dd3 	.word	0x10624dd3

08000304 <display_numbers>:

void display_numbers(int *pNumbers, unsigned int len, char *pMessage)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af00      	add	r7, sp, #0
 800030a:	60f8      	str	r0, [r7, #12]
 800030c:	60b9      	str	r1, [r7, #8]
 800030e:	607a      	str	r2, [r7, #4]
    printf("%s",pMessage);
 8000310:	6879      	ldr	r1, [r7, #4]
 8000312:	480e      	ldr	r0, [pc, #56]	; (800034c <display_numbers+0x48>)
 8000314:	f000 fb04 	bl	8000920 <iprintf>

    for (unsigned i = 0 ; i < len ; i++)
 8000318:	2300      	movs	r3, #0
 800031a:	617b      	str	r3, [r7, #20]
 800031c:	e00b      	b.n	8000336 <display_numbers+0x32>
    {
        printf("%5d  ",pNumbers[i]);
 800031e:	697b      	ldr	r3, [r7, #20]
 8000320:	009b      	lsls	r3, r3, #2
 8000322:	68fa      	ldr	r2, [r7, #12]
 8000324:	4413      	add	r3, r2
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4619      	mov	r1, r3
 800032a:	4809      	ldr	r0, [pc, #36]	; (8000350 <display_numbers+0x4c>)
 800032c:	f000 faf8 	bl	8000920 <iprintf>
    for (unsigned i = 0 ; i < len ; i++)
 8000330:	697b      	ldr	r3, [r7, #20]
 8000332:	3301      	adds	r3, #1
 8000334:	617b      	str	r3, [r7, #20]
 8000336:	697a      	ldr	r2, [r7, #20]
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	429a      	cmp	r2, r3
 800033c:	d3ef      	bcc.n	800031e <display_numbers+0x1a>
    }

    printf("\n");
 800033e:	200a      	movs	r0, #10
 8000340:	f000 fb00 	bl	8000944 <putchar>
}
 8000344:	bf00      	nop
 8000346:	3718      	adds	r7, #24
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	08001794 	.word	0x08001794
 8000350:	08001798 	.word	0x08001798

08000354 <swap_numbers>:


void swap_numbers(int *x,int *y)
{
 8000354:	b480      	push	{r7}
 8000356:	b085      	sub	sp, #20
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	6039      	str	r1, [r7, #0]
     int temp=*x;
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	60fb      	str	r3, [r7, #12]
     *x=*y;
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	601a      	str	r2, [r3, #0]
     *y=temp;
 800036c:	683b      	ldr	r3, [r7, #0]
 800036e:	68fa      	ldr	r2, [r7, #12]
 8000370:	601a      	str	r2, [r3, #0]
     void (*jump_addr) (void);
     jump_addr = (void*)0x20000009;
     jump_addr();
#endif

     someData = 10;
 8000372:	4b04      	ldr	r3, [pc, #16]	; (8000384 <swap_numbers+0x30>)
 8000374:	220a      	movs	r2, #10
 8000376:	601a      	str	r2, [r3, #0]
}
 8000378:	bf00      	nop
 800037a:	3714      	adds	r7, #20
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	20000044 	.word	0x20000044

08000388 <bubble_sort>:


void bubble_sort(int *pNumbers , unsigned int len)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	6039      	str	r1, [r7, #0]

    int i,j,flag=0;
 8000392:	2300      	movs	r3, #0
 8000394:	60fb      	str	r3, [r7, #12]

    for(i=0;i<len-1;i++)
 8000396:	2300      	movs	r3, #0
 8000398:	617b      	str	r3, [r7, #20]
 800039a:	e02f      	b.n	80003fc <bubble_sort+0x74>
    {
        flag=0;
 800039c:	2300      	movs	r3, #0
 800039e:	60fb      	str	r3, [r7, #12]

        for(j=0;j<len-1-i;j++)
 80003a0:	2300      	movs	r3, #0
 80003a2:	613b      	str	r3, [r7, #16]
 80003a4:	e01d      	b.n	80003e2 <bubble_sort+0x5a>
        {
            if(pNumbers[j] > pNumbers[j+1])
 80003a6:	693b      	ldr	r3, [r7, #16]
 80003a8:	009b      	lsls	r3, r3, #2
 80003aa:	687a      	ldr	r2, [r7, #4]
 80003ac:	4413      	add	r3, r2
 80003ae:	681a      	ldr	r2, [r3, #0]
 80003b0:	693b      	ldr	r3, [r7, #16]
 80003b2:	3301      	adds	r3, #1
 80003b4:	009b      	lsls	r3, r3, #2
 80003b6:	6879      	ldr	r1, [r7, #4]
 80003b8:	440b      	add	r3, r1
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	429a      	cmp	r2, r3
 80003be:	dd0d      	ble.n	80003dc <bubble_sort+0x54>
            {
                swap_numbers(&pNumbers[j],&pNumbers[j+1]);
 80003c0:	693b      	ldr	r3, [r7, #16]
 80003c2:	009b      	lsls	r3, r3, #2
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	18d0      	adds	r0, r2, r3
 80003c8:	693b      	ldr	r3, [r7, #16]
 80003ca:	3301      	adds	r3, #1
 80003cc:	009b      	lsls	r3, r3, #2
 80003ce:	687a      	ldr	r2, [r7, #4]
 80003d0:	4413      	add	r3, r2
 80003d2:	4619      	mov	r1, r3
 80003d4:	f7ff ffbe 	bl	8000354 <swap_numbers>
                flag=1;
 80003d8:	2301      	movs	r3, #1
 80003da:	60fb      	str	r3, [r7, #12]
        for(j=0;j<len-1-i;j++)
 80003dc:	693b      	ldr	r3, [r7, #16]
 80003de:	3301      	adds	r3, #1
 80003e0:	613b      	str	r3, [r7, #16]
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	683a      	ldr	r2, [r7, #0]
 80003e6:	1ad3      	subs	r3, r2, r3
 80003e8:	1e5a      	subs	r2, r3, #1
 80003ea:	693b      	ldr	r3, [r7, #16]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d8da      	bhi.n	80003a6 <bubble_sort+0x1e>
            }
        }

        if(flag==0)
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d008      	beq.n	8000408 <bubble_sort+0x80>
    for(i=0;i<len-1;i++)
 80003f6:	697b      	ldr	r3, [r7, #20]
 80003f8:	3301      	adds	r3, #1
 80003fa:	617b      	str	r3, [r7, #20]
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	1e5a      	subs	r2, r3, #1
 8000400:	697b      	ldr	r3, [r7, #20]
 8000402:	429a      	cmp	r2, r3
 8000404:	d8ca      	bhi.n	800039c <bubble_sort+0x14>
            break;
    }
}
 8000406:	e000      	b.n	800040a <bubble_sort+0x82>
            break;
 8000408:	bf00      	nop
}
 800040a:	bf00      	nop
 800040c:	3718      	adds	r7, #24
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <insertion_sort>:

void insertion_sort(int *pNumbers , unsigned int len)
{
 8000412:	b480      	push	{r7}
 8000414:	b087      	sub	sp, #28
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
 800041a:	6039      	str	r1, [r7, #0]

     int i,j,num;

     for(i=1 ; i<len ; i++)
 800041c:	2301      	movs	r3, #1
 800041e:	617b      	str	r3, [r7, #20]
 8000420:	e02c      	b.n	800047c <insertion_sort+0x6a>
     {
         j=i-1;
 8000422:	697b      	ldr	r3, [r7, #20]
 8000424:	3b01      	subs	r3, #1
 8000426:	613b      	str	r3, [r7, #16]

         num = pNumbers[i];
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	4413      	add	r3, r2
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	60fb      	str	r3, [r7, #12]

         while( (j>-1) && (pNumbers[j] > num) )
 8000434:	e00d      	b.n	8000452 <insertion_sort+0x40>
         {
             pNumbers[j+1] = pNumbers[j];
 8000436:	693b      	ldr	r3, [r7, #16]
 8000438:	009b      	lsls	r3, r3, #2
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	441a      	add	r2, r3
 800043e:	693b      	ldr	r3, [r7, #16]
 8000440:	3301      	adds	r3, #1
 8000442:	009b      	lsls	r3, r3, #2
 8000444:	6879      	ldr	r1, [r7, #4]
 8000446:	440b      	add	r3, r1
 8000448:	6812      	ldr	r2, [r2, #0]
 800044a:	601a      	str	r2, [r3, #0]
             j--;
 800044c:	693b      	ldr	r3, [r7, #16]
 800044e:	3b01      	subs	r3, #1
 8000450:	613b      	str	r3, [r7, #16]
         while( (j>-1) && (pNumbers[j] > num) )
 8000452:	693b      	ldr	r3, [r7, #16]
 8000454:	2b00      	cmp	r3, #0
 8000456:	db07      	blt.n	8000468 <insertion_sort+0x56>
 8000458:	693b      	ldr	r3, [r7, #16]
 800045a:	009b      	lsls	r3, r3, #2
 800045c:	687a      	ldr	r2, [r7, #4]
 800045e:	4413      	add	r3, r2
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	68fa      	ldr	r2, [r7, #12]
 8000464:	429a      	cmp	r2, r3
 8000466:	dbe6      	blt.n	8000436 <insertion_sort+0x24>
         }

         pNumbers[j+1]=num;
 8000468:	693b      	ldr	r3, [r7, #16]
 800046a:	3301      	adds	r3, #1
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	4413      	add	r3, r2
 8000472:	68fa      	ldr	r2, [r7, #12]
 8000474:	601a      	str	r2, [r3, #0]
     for(i=1 ; i<len ; i++)
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	3301      	adds	r3, #1
 800047a:	617b      	str	r3, [r7, #20]
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	683a      	ldr	r2, [r7, #0]
 8000480:	429a      	cmp	r2, r3
 8000482:	d8ce      	bhi.n	8000422 <insertion_sort+0x10>
     }


}
 8000484:	bf00      	nop
 8000486:	bf00      	nop
 8000488:	371c      	adds	r7, #28
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr

08000490 <main>:



int main()
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0

    unsigned int len = sizeof(numbers)/sizeof(int);
 8000496:	2311      	movs	r3, #17
 8000498:	607b      	str	r3, [r7, #4]

    array_fill_numbers(numbers,len);
 800049a:	6879      	ldr	r1, [r7, #4]
 800049c:	4813      	ldr	r0, [pc, #76]	; (80004ec <main+0x5c>)
 800049e:	f7ff ff07 	bl	80002b0 <array_fill_numbers>

    display_numbers(numbers,len,"B-unsorted array :");
 80004a2:	4a13      	ldr	r2, [pc, #76]	; (80004f0 <main+0x60>)
 80004a4:	6879      	ldr	r1, [r7, #4]
 80004a6:	4811      	ldr	r0, [pc, #68]	; (80004ec <main+0x5c>)
 80004a8:	f7ff ff2c 	bl	8000304 <display_numbers>

    bubble_sort(numbers,len);
 80004ac:	6879      	ldr	r1, [r7, #4]
 80004ae:	480f      	ldr	r0, [pc, #60]	; (80004ec <main+0x5c>)
 80004b0:	f7ff ff6a 	bl	8000388 <bubble_sort>

    display_numbers(numbers,len,"B-sorted array   :");
 80004b4:	4a0f      	ldr	r2, [pc, #60]	; (80004f4 <main+0x64>)
 80004b6:	6879      	ldr	r1, [r7, #4]
 80004b8:	480c      	ldr	r0, [pc, #48]	; (80004ec <main+0x5c>)
 80004ba:	f7ff ff23 	bl	8000304 <display_numbers>

    array_fill_numbers(numbers,len);
 80004be:	6879      	ldr	r1, [r7, #4]
 80004c0:	480a      	ldr	r0, [pc, #40]	; (80004ec <main+0x5c>)
 80004c2:	f7ff fef5 	bl	80002b0 <array_fill_numbers>

    display_numbers(numbers,len,"I-unsorted array :");
 80004c6:	4a0c      	ldr	r2, [pc, #48]	; (80004f8 <main+0x68>)
 80004c8:	6879      	ldr	r1, [r7, #4]
 80004ca:	4808      	ldr	r0, [pc, #32]	; (80004ec <main+0x5c>)
 80004cc:	f7ff ff1a 	bl	8000304 <display_numbers>

    insertion_sort(numbers,len);
 80004d0:	6879      	ldr	r1, [r7, #4]
 80004d2:	4806      	ldr	r0, [pc, #24]	; (80004ec <main+0x5c>)
 80004d4:	f7ff ff9d 	bl	8000412 <insertion_sort>

    display_numbers(numbers,len,"I-sorted array   :");
 80004d8:	4a08      	ldr	r2, [pc, #32]	; (80004fc <main+0x6c>)
 80004da:	6879      	ldr	r1, [r7, #4]
 80004dc:	4803      	ldr	r0, [pc, #12]	; (80004ec <main+0x5c>)
 80004de:	f7ff ff11 	bl	8000304 <display_numbers>



    return 0;
 80004e2:	2300      	movs	r3, #0
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000000 	.word	0x20000000
 80004f0:	080017a0 	.word	0x080017a0
 80004f4:	080017b4 	.word	0x080017b4
 80004f8:	080017c8 	.word	0x080017c8
 80004fc:	080017dc 	.word	0x080017dc

08000500 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <ITM_SendChar+0x44>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <ITM_SendChar+0x44>)
 8000510:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000514:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <ITM_SendChar+0x48>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a0b      	ldr	r2, [pc, #44]	; (8000548 <ITM_SendChar+0x48>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000522:	bf00      	nop
 8000524:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	2b00      	cmp	r3, #0
 8000530:	d0f8      	beq.n	8000524 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000532:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	6013      	str	r3, [r2, #0]
}
 800053a:	bf00      	nop
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr
 8000544:	e000edfc 	.word	0xe000edfc
 8000548:	e0000e00 	.word	0xe0000e00

0800054c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return 1;
 8000550:	2301      	movs	r3, #1
}
 8000552:	4618      	mov	r0, r3
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr

0800055a <_kill>:

int _kill(int pid, int sig)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	b082      	sub	sp, #8
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000564:	f000 fa88 	bl	8000a78 <__errno>
 8000568:	4603      	mov	r3, r0
 800056a:	2216      	movs	r2, #22
 800056c:	601a      	str	r2, [r3, #0]
  return -1;
 800056e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000572:	4618      	mov	r0, r3
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <_exit>:

void _exit (int status)
{
 800057a:	b580      	push	{r7, lr}
 800057c:	b082      	sub	sp, #8
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000582:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f7ff ffe7 	bl	800055a <_kill>
  while (1) {}    /* Make sure we hang here */
 800058c:	e7fe      	b.n	800058c <_exit+0x12>

0800058e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	b086      	sub	sp, #24
 8000592:	af00      	add	r7, sp, #0
 8000594:	60f8      	str	r0, [r7, #12]
 8000596:	60b9      	str	r1, [r7, #8]
 8000598:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	e00a      	b.n	80005b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005a0:	f3af 8000 	nop.w
 80005a4:	4601      	mov	r1, r0
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	1c5a      	adds	r2, r3, #1
 80005aa:	60ba      	str	r2, [r7, #8]
 80005ac:	b2ca      	uxtb	r2, r1
 80005ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	3301      	adds	r3, #1
 80005b4:	617b      	str	r3, [r7, #20]
 80005b6:	697a      	ldr	r2, [r7, #20]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	dbf0      	blt.n	80005a0 <_read+0x12>
  }

  return len;
 80005be:	687b      	ldr	r3, [r7, #4]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
 80005d8:	e009      	b.n	80005ee <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	1c5a      	adds	r2, r3, #1
 80005de:	60ba      	str	r2, [r7, #8]
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff ff8c 	bl	8000500 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	3301      	adds	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	697a      	ldr	r2, [r7, #20]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	dbf1      	blt.n	80005da <_write+0x12>
  }
  return len;
 80005f6:	687b      	ldr	r3, [r7, #4]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3718      	adds	r7, #24
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <_close>:

int _close(int file)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800060c:	4618      	mov	r0, r3
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr

08000616 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000616:	b480      	push	{r7}
 8000618:	b083      	sub	sp, #12
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
 800061e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000626:	605a      	str	r2, [r3, #4]
  return 0;
 8000628:	2300      	movs	r3, #0
}
 800062a:	4618      	mov	r0, r3
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr

08000634 <_isatty>:

int _isatty(int file)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800063c:	2301      	movs	r3, #1
}
 800063e:	4618      	mov	r0, r3
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr

08000648 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000654:	2300      	movs	r3, #0
}
 8000656:	4618      	mov	r0, r3
 8000658:	3714      	adds	r7, #20
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000668:	4a14      	ldr	r2, [pc, #80]	; (80006bc <_sbrk+0x5c>)
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <_sbrk+0x60>)
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000674:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <_sbrk+0x64>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d102      	bne.n	8000682 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <_sbrk+0x64>)
 800067e:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <_sbrk+0x68>)
 8000680:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <_sbrk+0x64>)
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4413      	add	r3, r2
 800068a:	693a      	ldr	r2, [r7, #16]
 800068c:	429a      	cmp	r2, r3
 800068e:	d207      	bcs.n	80006a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000690:	f000 f9f2 	bl	8000a78 <__errno>
 8000694:	4603      	mov	r3, r0
 8000696:	220c      	movs	r2, #12
 8000698:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800069a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800069e:	e009      	b.n	80006b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <_sbrk+0x64>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006a6:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <_sbrk+0x64>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4413      	add	r3, r2
 80006ae:	4a05      	ldr	r2, [pc, #20]	; (80006c4 <_sbrk+0x64>)
 80006b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006b2:	68fb      	ldr	r3, [r7, #12]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3718      	adds	r7, #24
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20020000 	.word	0x20020000
 80006c0:	00000400 	.word	0x00000400
 80006c4:	200000c0 	.word	0x200000c0
 80006c8:	20000210 	.word	0x20000210

080006cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006cc:	480d      	ldr	r0, [pc, #52]	; (8000704 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d4:	480c      	ldr	r0, [pc, #48]	; (8000708 <LoopForever+0x6>)
  ldr r1, =_edata
 80006d6:	490d      	ldr	r1, [pc, #52]	; (800070c <LoopForever+0xa>)
  ldr r2, =_sidata
 80006d8:	4a0d      	ldr	r2, [pc, #52]	; (8000710 <LoopForever+0xe>)
  movs r3, #0
 80006da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006dc:	e002      	b.n	80006e4 <LoopCopyDataInit>

080006de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e2:	3304      	adds	r3, #4

080006e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e8:	d3f9      	bcc.n	80006de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ea:	4a0a      	ldr	r2, [pc, #40]	; (8000714 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006ec:	4c0a      	ldr	r4, [pc, #40]	; (8000718 <LoopForever+0x16>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f0:	e001      	b.n	80006f6 <LoopFillZerobss>

080006f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f4:	3204      	adds	r2, #4

080006f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f8:	d3fb      	bcc.n	80006f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006fa:	f000 f9c3 	bl	8000a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006fe:	f7ff fec7 	bl	8000490 <main>

08000702 <LoopForever>:

LoopForever:
  b LoopForever
 8000702:	e7fe      	b.n	8000702 <LoopForever>
  ldr   r0, =_estack
 8000704:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800070c:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8000710:	080018d8 	.word	0x080018d8
  ldr r2, =_sbss
 8000714:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8000718:	20000210 	.word	0x20000210

0800071c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800071c:	e7fe      	b.n	800071c <ADC_IRQHandler>
	...

08000720 <rand>:
 8000720:	4b16      	ldr	r3, [pc, #88]	; (800077c <rand+0x5c>)
 8000722:	b510      	push	{r4, lr}
 8000724:	681c      	ldr	r4, [r3, #0]
 8000726:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000728:	b9b3      	cbnz	r3, 8000758 <rand+0x38>
 800072a:	2018      	movs	r0, #24
 800072c:	f000 fa3a 	bl	8000ba4 <malloc>
 8000730:	4602      	mov	r2, r0
 8000732:	6320      	str	r0, [r4, #48]	; 0x30
 8000734:	b920      	cbnz	r0, 8000740 <rand+0x20>
 8000736:	4b12      	ldr	r3, [pc, #72]	; (8000780 <rand+0x60>)
 8000738:	4812      	ldr	r0, [pc, #72]	; (8000784 <rand+0x64>)
 800073a:	2152      	movs	r1, #82	; 0x52
 800073c:	f000 f9ca 	bl	8000ad4 <__assert_func>
 8000740:	4911      	ldr	r1, [pc, #68]	; (8000788 <rand+0x68>)
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <rand+0x6c>)
 8000744:	e9c0 1300 	strd	r1, r3, [r0]
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <rand+0x70>)
 800074a:	6083      	str	r3, [r0, #8]
 800074c:	230b      	movs	r3, #11
 800074e:	8183      	strh	r3, [r0, #12]
 8000750:	2100      	movs	r1, #0
 8000752:	2001      	movs	r0, #1
 8000754:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8000758:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800075a:	480e      	ldr	r0, [pc, #56]	; (8000794 <rand+0x74>)
 800075c:	690b      	ldr	r3, [r1, #16]
 800075e:	694c      	ldr	r4, [r1, #20]
 8000760:	4a0d      	ldr	r2, [pc, #52]	; (8000798 <rand+0x78>)
 8000762:	4358      	muls	r0, r3
 8000764:	fb02 0004 	mla	r0, r2, r4, r0
 8000768:	fba3 3202 	umull	r3, r2, r3, r2
 800076c:	3301      	adds	r3, #1
 800076e:	eb40 0002 	adc.w	r0, r0, r2
 8000772:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8000776:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800077a:	bd10      	pop	{r4, pc}
 800077c:	200000a0 	.word	0x200000a0
 8000780:	080017ef 	.word	0x080017ef
 8000784:	08001806 	.word	0x08001806
 8000788:	abcd330e 	.word	0xabcd330e
 800078c:	e66d1234 	.word	0xe66d1234
 8000790:	0005deec 	.word	0x0005deec
 8000794:	5851f42d 	.word	0x5851f42d
 8000798:	4c957f2d 	.word	0x4c957f2d

0800079c <std>:
 800079c:	2300      	movs	r3, #0
 800079e:	b510      	push	{r4, lr}
 80007a0:	4604      	mov	r4, r0
 80007a2:	e9c0 3300 	strd	r3, r3, [r0]
 80007a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80007aa:	6083      	str	r3, [r0, #8]
 80007ac:	8181      	strh	r1, [r0, #12]
 80007ae:	6643      	str	r3, [r0, #100]	; 0x64
 80007b0:	81c2      	strh	r2, [r0, #14]
 80007b2:	6183      	str	r3, [r0, #24]
 80007b4:	4619      	mov	r1, r3
 80007b6:	2208      	movs	r2, #8
 80007b8:	305c      	adds	r0, #92	; 0x5c
 80007ba:	f000 f90e 	bl	80009da <memset>
 80007be:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <std+0x58>)
 80007c0:	6263      	str	r3, [r4, #36]	; 0x24
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <std+0x5c>)
 80007c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80007c6:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <std+0x60>)
 80007c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <std+0x64>)
 80007cc:	6323      	str	r3, [r4, #48]	; 0x30
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <std+0x68>)
 80007d0:	6224      	str	r4, [r4, #32]
 80007d2:	429c      	cmp	r4, r3
 80007d4:	d006      	beq.n	80007e4 <std+0x48>
 80007d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80007da:	4294      	cmp	r4, r2
 80007dc:	d002      	beq.n	80007e4 <std+0x48>
 80007de:	33d0      	adds	r3, #208	; 0xd0
 80007e0:	429c      	cmp	r4, r3
 80007e2:	d105      	bne.n	80007f0 <std+0x54>
 80007e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80007e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007ec:	f000 b96e 	b.w	8000acc <__retarget_lock_init_recursive>
 80007f0:	bd10      	pop	{r4, pc}
 80007f2:	bf00      	nop
 80007f4:	08000955 	.word	0x08000955
 80007f8:	08000977 	.word	0x08000977
 80007fc:	080009af 	.word	0x080009af
 8000800:	080009d3 	.word	0x080009d3
 8000804:	200000c4 	.word	0x200000c4

08000808 <stdio_exit_handler>:
 8000808:	4a02      	ldr	r2, [pc, #8]	; (8000814 <stdio_exit_handler+0xc>)
 800080a:	4903      	ldr	r1, [pc, #12]	; (8000818 <stdio_exit_handler+0x10>)
 800080c:	4803      	ldr	r0, [pc, #12]	; (800081c <stdio_exit_handler+0x14>)
 800080e:	f000 b869 	b.w	80008e4 <_fwalk_sglue>
 8000812:	bf00      	nop
 8000814:	20000048 	.word	0x20000048
 8000818:	080013b5 	.word	0x080013b5
 800081c:	20000054 	.word	0x20000054

08000820 <cleanup_stdio>:
 8000820:	6841      	ldr	r1, [r0, #4]
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <cleanup_stdio+0x34>)
 8000824:	4299      	cmp	r1, r3
 8000826:	b510      	push	{r4, lr}
 8000828:	4604      	mov	r4, r0
 800082a:	d001      	beq.n	8000830 <cleanup_stdio+0x10>
 800082c:	f000 fdc2 	bl	80013b4 <_fflush_r>
 8000830:	68a1      	ldr	r1, [r4, #8]
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <cleanup_stdio+0x38>)
 8000834:	4299      	cmp	r1, r3
 8000836:	d002      	beq.n	800083e <cleanup_stdio+0x1e>
 8000838:	4620      	mov	r0, r4
 800083a:	f000 fdbb 	bl	80013b4 <_fflush_r>
 800083e:	68e1      	ldr	r1, [r4, #12]
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <cleanup_stdio+0x3c>)
 8000842:	4299      	cmp	r1, r3
 8000844:	d004      	beq.n	8000850 <cleanup_stdio+0x30>
 8000846:	4620      	mov	r0, r4
 8000848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800084c:	f000 bdb2 	b.w	80013b4 <_fflush_r>
 8000850:	bd10      	pop	{r4, pc}
 8000852:	bf00      	nop
 8000854:	200000c4 	.word	0x200000c4
 8000858:	2000012c 	.word	0x2000012c
 800085c:	20000194 	.word	0x20000194

08000860 <global_stdio_init.part.0>:
 8000860:	b510      	push	{r4, lr}
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <global_stdio_init.part.0+0x30>)
 8000864:	4c0b      	ldr	r4, [pc, #44]	; (8000894 <global_stdio_init.part.0+0x34>)
 8000866:	4a0c      	ldr	r2, [pc, #48]	; (8000898 <global_stdio_init.part.0+0x38>)
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	4620      	mov	r0, r4
 800086c:	2200      	movs	r2, #0
 800086e:	2104      	movs	r1, #4
 8000870:	f7ff ff94 	bl	800079c <std>
 8000874:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000878:	2201      	movs	r2, #1
 800087a:	2109      	movs	r1, #9
 800087c:	f7ff ff8e 	bl	800079c <std>
 8000880:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000884:	2202      	movs	r2, #2
 8000886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800088a:	2112      	movs	r1, #18
 800088c:	f7ff bf86 	b.w	800079c <std>
 8000890:	200001fc 	.word	0x200001fc
 8000894:	200000c4 	.word	0x200000c4
 8000898:	08000809 	.word	0x08000809

0800089c <__sfp_lock_acquire>:
 800089c:	4801      	ldr	r0, [pc, #4]	; (80008a4 <__sfp_lock_acquire+0x8>)
 800089e:	f000 b916 	b.w	8000ace <__retarget_lock_acquire_recursive>
 80008a2:	bf00      	nop
 80008a4:	20000205 	.word	0x20000205

080008a8 <__sfp_lock_release>:
 80008a8:	4801      	ldr	r0, [pc, #4]	; (80008b0 <__sfp_lock_release+0x8>)
 80008aa:	f000 b911 	b.w	8000ad0 <__retarget_lock_release_recursive>
 80008ae:	bf00      	nop
 80008b0:	20000205 	.word	0x20000205

080008b4 <__sinit>:
 80008b4:	b510      	push	{r4, lr}
 80008b6:	4604      	mov	r4, r0
 80008b8:	f7ff fff0 	bl	800089c <__sfp_lock_acquire>
 80008bc:	6a23      	ldr	r3, [r4, #32]
 80008be:	b11b      	cbz	r3, 80008c8 <__sinit+0x14>
 80008c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008c4:	f7ff bff0 	b.w	80008a8 <__sfp_lock_release>
 80008c8:	4b04      	ldr	r3, [pc, #16]	; (80008dc <__sinit+0x28>)
 80008ca:	6223      	str	r3, [r4, #32]
 80008cc:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <__sinit+0x2c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d1f5      	bne.n	80008c0 <__sinit+0xc>
 80008d4:	f7ff ffc4 	bl	8000860 <global_stdio_init.part.0>
 80008d8:	e7f2      	b.n	80008c0 <__sinit+0xc>
 80008da:	bf00      	nop
 80008dc:	08000821 	.word	0x08000821
 80008e0:	200001fc 	.word	0x200001fc

080008e4 <_fwalk_sglue>:
 80008e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008e8:	4607      	mov	r7, r0
 80008ea:	4688      	mov	r8, r1
 80008ec:	4614      	mov	r4, r2
 80008ee:	2600      	movs	r6, #0
 80008f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80008f4:	f1b9 0901 	subs.w	r9, r9, #1
 80008f8:	d505      	bpl.n	8000906 <_fwalk_sglue+0x22>
 80008fa:	6824      	ldr	r4, [r4, #0]
 80008fc:	2c00      	cmp	r4, #0
 80008fe:	d1f7      	bne.n	80008f0 <_fwalk_sglue+0xc>
 8000900:	4630      	mov	r0, r6
 8000902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000906:	89ab      	ldrh	r3, [r5, #12]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d907      	bls.n	800091c <_fwalk_sglue+0x38>
 800090c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000910:	3301      	adds	r3, #1
 8000912:	d003      	beq.n	800091c <_fwalk_sglue+0x38>
 8000914:	4629      	mov	r1, r5
 8000916:	4638      	mov	r0, r7
 8000918:	47c0      	blx	r8
 800091a:	4306      	orrs	r6, r0
 800091c:	3568      	adds	r5, #104	; 0x68
 800091e:	e7e9      	b.n	80008f4 <_fwalk_sglue+0x10>

08000920 <iprintf>:
 8000920:	b40f      	push	{r0, r1, r2, r3}
 8000922:	b507      	push	{r0, r1, r2, lr}
 8000924:	4906      	ldr	r1, [pc, #24]	; (8000940 <iprintf+0x20>)
 8000926:	ab04      	add	r3, sp, #16
 8000928:	6808      	ldr	r0, [r1, #0]
 800092a:	f853 2b04 	ldr.w	r2, [r3], #4
 800092e:	6881      	ldr	r1, [r0, #8]
 8000930:	9301      	str	r3, [sp, #4]
 8000932:	f000 fa13 	bl	8000d5c <_vfiprintf_r>
 8000936:	b003      	add	sp, #12
 8000938:	f85d eb04 	ldr.w	lr, [sp], #4
 800093c:	b004      	add	sp, #16
 800093e:	4770      	bx	lr
 8000940:	200000a0 	.word	0x200000a0

08000944 <putchar>:
 8000944:	4b02      	ldr	r3, [pc, #8]	; (8000950 <putchar+0xc>)
 8000946:	4601      	mov	r1, r0
 8000948:	6818      	ldr	r0, [r3, #0]
 800094a:	6882      	ldr	r2, [r0, #8]
 800094c:	f000 bd6c 	b.w	8001428 <_putc_r>
 8000950:	200000a0 	.word	0x200000a0

08000954 <__sread>:
 8000954:	b510      	push	{r4, lr}
 8000956:	460c      	mov	r4, r1
 8000958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800095c:	f000 f868 	bl	8000a30 <_read_r>
 8000960:	2800      	cmp	r0, #0
 8000962:	bfab      	itete	ge
 8000964:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000966:	89a3      	ldrhlt	r3, [r4, #12]
 8000968:	181b      	addge	r3, r3, r0
 800096a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800096e:	bfac      	ite	ge
 8000970:	6563      	strge	r3, [r4, #84]	; 0x54
 8000972:	81a3      	strhlt	r3, [r4, #12]
 8000974:	bd10      	pop	{r4, pc}

08000976 <__swrite>:
 8000976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800097a:	461f      	mov	r7, r3
 800097c:	898b      	ldrh	r3, [r1, #12]
 800097e:	05db      	lsls	r3, r3, #23
 8000980:	4605      	mov	r5, r0
 8000982:	460c      	mov	r4, r1
 8000984:	4616      	mov	r6, r2
 8000986:	d505      	bpl.n	8000994 <__swrite+0x1e>
 8000988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800098c:	2302      	movs	r3, #2
 800098e:	2200      	movs	r2, #0
 8000990:	f000 f83c 	bl	8000a0c <_lseek_r>
 8000994:	89a3      	ldrh	r3, [r4, #12]
 8000996:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800099a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800099e:	81a3      	strh	r3, [r4, #12]
 80009a0:	4632      	mov	r2, r6
 80009a2:	463b      	mov	r3, r7
 80009a4:	4628      	mov	r0, r5
 80009a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80009aa:	f000 b853 	b.w	8000a54 <_write_r>

080009ae <__sseek>:
 80009ae:	b510      	push	{r4, lr}
 80009b0:	460c      	mov	r4, r1
 80009b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009b6:	f000 f829 	bl	8000a0c <_lseek_r>
 80009ba:	1c43      	adds	r3, r0, #1
 80009bc:	89a3      	ldrh	r3, [r4, #12]
 80009be:	bf15      	itete	ne
 80009c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80009c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80009c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80009ca:	81a3      	strheq	r3, [r4, #12]
 80009cc:	bf18      	it	ne
 80009ce:	81a3      	strhne	r3, [r4, #12]
 80009d0:	bd10      	pop	{r4, pc}

080009d2 <__sclose>:
 80009d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009d6:	f000 b809 	b.w	80009ec <_close_r>

080009da <memset>:
 80009da:	4402      	add	r2, r0
 80009dc:	4603      	mov	r3, r0
 80009de:	4293      	cmp	r3, r2
 80009e0:	d100      	bne.n	80009e4 <memset+0xa>
 80009e2:	4770      	bx	lr
 80009e4:	f803 1b01 	strb.w	r1, [r3], #1
 80009e8:	e7f9      	b.n	80009de <memset+0x4>
	...

080009ec <_close_r>:
 80009ec:	b538      	push	{r3, r4, r5, lr}
 80009ee:	4d06      	ldr	r5, [pc, #24]	; (8000a08 <_close_r+0x1c>)
 80009f0:	2300      	movs	r3, #0
 80009f2:	4604      	mov	r4, r0
 80009f4:	4608      	mov	r0, r1
 80009f6:	602b      	str	r3, [r5, #0]
 80009f8:	f7ff fe02 	bl	8000600 <_close>
 80009fc:	1c43      	adds	r3, r0, #1
 80009fe:	d102      	bne.n	8000a06 <_close_r+0x1a>
 8000a00:	682b      	ldr	r3, [r5, #0]
 8000a02:	b103      	cbz	r3, 8000a06 <_close_r+0x1a>
 8000a04:	6023      	str	r3, [r4, #0]
 8000a06:	bd38      	pop	{r3, r4, r5, pc}
 8000a08:	20000200 	.word	0x20000200

08000a0c <_lseek_r>:
 8000a0c:	b538      	push	{r3, r4, r5, lr}
 8000a0e:	4d07      	ldr	r5, [pc, #28]	; (8000a2c <_lseek_r+0x20>)
 8000a10:	4604      	mov	r4, r0
 8000a12:	4608      	mov	r0, r1
 8000a14:	4611      	mov	r1, r2
 8000a16:	2200      	movs	r2, #0
 8000a18:	602a      	str	r2, [r5, #0]
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	f7ff fe14 	bl	8000648 <_lseek>
 8000a20:	1c43      	adds	r3, r0, #1
 8000a22:	d102      	bne.n	8000a2a <_lseek_r+0x1e>
 8000a24:	682b      	ldr	r3, [r5, #0]
 8000a26:	b103      	cbz	r3, 8000a2a <_lseek_r+0x1e>
 8000a28:	6023      	str	r3, [r4, #0]
 8000a2a:	bd38      	pop	{r3, r4, r5, pc}
 8000a2c:	20000200 	.word	0x20000200

08000a30 <_read_r>:
 8000a30:	b538      	push	{r3, r4, r5, lr}
 8000a32:	4d07      	ldr	r5, [pc, #28]	; (8000a50 <_read_r+0x20>)
 8000a34:	4604      	mov	r4, r0
 8000a36:	4608      	mov	r0, r1
 8000a38:	4611      	mov	r1, r2
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	602a      	str	r2, [r5, #0]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	f7ff fda5 	bl	800058e <_read>
 8000a44:	1c43      	adds	r3, r0, #1
 8000a46:	d102      	bne.n	8000a4e <_read_r+0x1e>
 8000a48:	682b      	ldr	r3, [r5, #0]
 8000a4a:	b103      	cbz	r3, 8000a4e <_read_r+0x1e>
 8000a4c:	6023      	str	r3, [r4, #0]
 8000a4e:	bd38      	pop	{r3, r4, r5, pc}
 8000a50:	20000200 	.word	0x20000200

08000a54 <_write_r>:
 8000a54:	b538      	push	{r3, r4, r5, lr}
 8000a56:	4d07      	ldr	r5, [pc, #28]	; (8000a74 <_write_r+0x20>)
 8000a58:	4604      	mov	r4, r0
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	2200      	movs	r2, #0
 8000a60:	602a      	str	r2, [r5, #0]
 8000a62:	461a      	mov	r2, r3
 8000a64:	f7ff fdb0 	bl	80005c8 <_write>
 8000a68:	1c43      	adds	r3, r0, #1
 8000a6a:	d102      	bne.n	8000a72 <_write_r+0x1e>
 8000a6c:	682b      	ldr	r3, [r5, #0]
 8000a6e:	b103      	cbz	r3, 8000a72 <_write_r+0x1e>
 8000a70:	6023      	str	r3, [r4, #0]
 8000a72:	bd38      	pop	{r3, r4, r5, pc}
 8000a74:	20000200 	.word	0x20000200

08000a78 <__errno>:
 8000a78:	4b01      	ldr	r3, [pc, #4]	; (8000a80 <__errno+0x8>)
 8000a7a:	6818      	ldr	r0, [r3, #0]
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	200000a0 	.word	0x200000a0

08000a84 <__libc_init_array>:
 8000a84:	b570      	push	{r4, r5, r6, lr}
 8000a86:	4d0d      	ldr	r5, [pc, #52]	; (8000abc <__libc_init_array+0x38>)
 8000a88:	4c0d      	ldr	r4, [pc, #52]	; (8000ac0 <__libc_init_array+0x3c>)
 8000a8a:	1b64      	subs	r4, r4, r5
 8000a8c:	10a4      	asrs	r4, r4, #2
 8000a8e:	2600      	movs	r6, #0
 8000a90:	42a6      	cmp	r6, r4
 8000a92:	d109      	bne.n	8000aa8 <__libc_init_array+0x24>
 8000a94:	4d0b      	ldr	r5, [pc, #44]	; (8000ac4 <__libc_init_array+0x40>)
 8000a96:	4c0c      	ldr	r4, [pc, #48]	; (8000ac8 <__libc_init_array+0x44>)
 8000a98:	f000 fe70 	bl	800177c <_init>
 8000a9c:	1b64      	subs	r4, r4, r5
 8000a9e:	10a4      	asrs	r4, r4, #2
 8000aa0:	2600      	movs	r6, #0
 8000aa2:	42a6      	cmp	r6, r4
 8000aa4:	d105      	bne.n	8000ab2 <__libc_init_array+0x2e>
 8000aa6:	bd70      	pop	{r4, r5, r6, pc}
 8000aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aac:	4798      	blx	r3
 8000aae:	3601      	adds	r6, #1
 8000ab0:	e7ee      	b.n	8000a90 <__libc_init_array+0xc>
 8000ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ab6:	4798      	blx	r3
 8000ab8:	3601      	adds	r6, #1
 8000aba:	e7f2      	b.n	8000aa2 <__libc_init_array+0x1e>
 8000abc:	080018d0 	.word	0x080018d0
 8000ac0:	080018d0 	.word	0x080018d0
 8000ac4:	080018d0 	.word	0x080018d0
 8000ac8:	080018d4 	.word	0x080018d4

08000acc <__retarget_lock_init_recursive>:
 8000acc:	4770      	bx	lr

08000ace <__retarget_lock_acquire_recursive>:
 8000ace:	4770      	bx	lr

08000ad0 <__retarget_lock_release_recursive>:
 8000ad0:	4770      	bx	lr
	...

08000ad4 <__assert_func>:
 8000ad4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000ad6:	4614      	mov	r4, r2
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <__assert_func+0x2c>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4605      	mov	r5, r0
 8000ae0:	68d8      	ldr	r0, [r3, #12]
 8000ae2:	b14c      	cbz	r4, 8000af8 <__assert_func+0x24>
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <__assert_func+0x30>)
 8000ae6:	9100      	str	r1, [sp, #0]
 8000ae8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000aec:	4906      	ldr	r1, [pc, #24]	; (8000b08 <__assert_func+0x34>)
 8000aee:	462b      	mov	r3, r5
 8000af0:	f000 fc88 	bl	8001404 <fiprintf>
 8000af4:	f000 fd72 	bl	80015dc <abort>
 8000af8:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <__assert_func+0x38>)
 8000afa:	461c      	mov	r4, r3
 8000afc:	e7f3      	b.n	8000ae6 <__assert_func+0x12>
 8000afe:	bf00      	nop
 8000b00:	200000a0 	.word	0x200000a0
 8000b04:	0800185e 	.word	0x0800185e
 8000b08:	0800186b 	.word	0x0800186b
 8000b0c:	08001899 	.word	0x08001899

08000b10 <_free_r>:
 8000b10:	b538      	push	{r3, r4, r5, lr}
 8000b12:	4605      	mov	r5, r0
 8000b14:	2900      	cmp	r1, #0
 8000b16:	d041      	beq.n	8000b9c <_free_r+0x8c>
 8000b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b1c:	1f0c      	subs	r4, r1, #4
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	bfb8      	it	lt
 8000b22:	18e4      	addlt	r4, r4, r3
 8000b24:	f000 f8e6 	bl	8000cf4 <__malloc_lock>
 8000b28:	4a1d      	ldr	r2, [pc, #116]	; (8000ba0 <_free_r+0x90>)
 8000b2a:	6813      	ldr	r3, [r2, #0]
 8000b2c:	b933      	cbnz	r3, 8000b3c <_free_r+0x2c>
 8000b2e:	6063      	str	r3, [r4, #4]
 8000b30:	6014      	str	r4, [r2, #0]
 8000b32:	4628      	mov	r0, r5
 8000b34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b38:	f000 b8e2 	b.w	8000d00 <__malloc_unlock>
 8000b3c:	42a3      	cmp	r3, r4
 8000b3e:	d908      	bls.n	8000b52 <_free_r+0x42>
 8000b40:	6820      	ldr	r0, [r4, #0]
 8000b42:	1821      	adds	r1, r4, r0
 8000b44:	428b      	cmp	r3, r1
 8000b46:	bf01      	itttt	eq
 8000b48:	6819      	ldreq	r1, [r3, #0]
 8000b4a:	685b      	ldreq	r3, [r3, #4]
 8000b4c:	1809      	addeq	r1, r1, r0
 8000b4e:	6021      	streq	r1, [r4, #0]
 8000b50:	e7ed      	b.n	8000b2e <_free_r+0x1e>
 8000b52:	461a      	mov	r2, r3
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	b10b      	cbz	r3, 8000b5c <_free_r+0x4c>
 8000b58:	42a3      	cmp	r3, r4
 8000b5a:	d9fa      	bls.n	8000b52 <_free_r+0x42>
 8000b5c:	6811      	ldr	r1, [r2, #0]
 8000b5e:	1850      	adds	r0, r2, r1
 8000b60:	42a0      	cmp	r0, r4
 8000b62:	d10b      	bne.n	8000b7c <_free_r+0x6c>
 8000b64:	6820      	ldr	r0, [r4, #0]
 8000b66:	4401      	add	r1, r0
 8000b68:	1850      	adds	r0, r2, r1
 8000b6a:	4283      	cmp	r3, r0
 8000b6c:	6011      	str	r1, [r2, #0]
 8000b6e:	d1e0      	bne.n	8000b32 <_free_r+0x22>
 8000b70:	6818      	ldr	r0, [r3, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	6053      	str	r3, [r2, #4]
 8000b76:	4408      	add	r0, r1
 8000b78:	6010      	str	r0, [r2, #0]
 8000b7a:	e7da      	b.n	8000b32 <_free_r+0x22>
 8000b7c:	d902      	bls.n	8000b84 <_free_r+0x74>
 8000b7e:	230c      	movs	r3, #12
 8000b80:	602b      	str	r3, [r5, #0]
 8000b82:	e7d6      	b.n	8000b32 <_free_r+0x22>
 8000b84:	6820      	ldr	r0, [r4, #0]
 8000b86:	1821      	adds	r1, r4, r0
 8000b88:	428b      	cmp	r3, r1
 8000b8a:	bf04      	itt	eq
 8000b8c:	6819      	ldreq	r1, [r3, #0]
 8000b8e:	685b      	ldreq	r3, [r3, #4]
 8000b90:	6063      	str	r3, [r4, #4]
 8000b92:	bf04      	itt	eq
 8000b94:	1809      	addeq	r1, r1, r0
 8000b96:	6021      	streq	r1, [r4, #0]
 8000b98:	6054      	str	r4, [r2, #4]
 8000b9a:	e7ca      	b.n	8000b32 <_free_r+0x22>
 8000b9c:	bd38      	pop	{r3, r4, r5, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000208 	.word	0x20000208

08000ba4 <malloc>:
 8000ba4:	4b02      	ldr	r3, [pc, #8]	; (8000bb0 <malloc+0xc>)
 8000ba6:	4601      	mov	r1, r0
 8000ba8:	6818      	ldr	r0, [r3, #0]
 8000baa:	f000 b823 	b.w	8000bf4 <_malloc_r>
 8000bae:	bf00      	nop
 8000bb0:	200000a0 	.word	0x200000a0

08000bb4 <sbrk_aligned>:
 8000bb4:	b570      	push	{r4, r5, r6, lr}
 8000bb6:	4e0e      	ldr	r6, [pc, #56]	; (8000bf0 <sbrk_aligned+0x3c>)
 8000bb8:	460c      	mov	r4, r1
 8000bba:	6831      	ldr	r1, [r6, #0]
 8000bbc:	4605      	mov	r5, r0
 8000bbe:	b911      	cbnz	r1, 8000bc6 <sbrk_aligned+0x12>
 8000bc0:	f000 fcfc 	bl	80015bc <_sbrk_r>
 8000bc4:	6030      	str	r0, [r6, #0]
 8000bc6:	4621      	mov	r1, r4
 8000bc8:	4628      	mov	r0, r5
 8000bca:	f000 fcf7 	bl	80015bc <_sbrk_r>
 8000bce:	1c43      	adds	r3, r0, #1
 8000bd0:	d00a      	beq.n	8000be8 <sbrk_aligned+0x34>
 8000bd2:	1cc4      	adds	r4, r0, #3
 8000bd4:	f024 0403 	bic.w	r4, r4, #3
 8000bd8:	42a0      	cmp	r0, r4
 8000bda:	d007      	beq.n	8000bec <sbrk_aligned+0x38>
 8000bdc:	1a21      	subs	r1, r4, r0
 8000bde:	4628      	mov	r0, r5
 8000be0:	f000 fcec 	bl	80015bc <_sbrk_r>
 8000be4:	3001      	adds	r0, #1
 8000be6:	d101      	bne.n	8000bec <sbrk_aligned+0x38>
 8000be8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000bec:	4620      	mov	r0, r4
 8000bee:	bd70      	pop	{r4, r5, r6, pc}
 8000bf0:	2000020c 	.word	0x2000020c

08000bf4 <_malloc_r>:
 8000bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bf8:	1ccd      	adds	r5, r1, #3
 8000bfa:	f025 0503 	bic.w	r5, r5, #3
 8000bfe:	3508      	adds	r5, #8
 8000c00:	2d0c      	cmp	r5, #12
 8000c02:	bf38      	it	cc
 8000c04:	250c      	movcc	r5, #12
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	4607      	mov	r7, r0
 8000c0a:	db01      	blt.n	8000c10 <_malloc_r+0x1c>
 8000c0c:	42a9      	cmp	r1, r5
 8000c0e:	d905      	bls.n	8000c1c <_malloc_r+0x28>
 8000c10:	230c      	movs	r3, #12
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	2600      	movs	r6, #0
 8000c16:	4630      	mov	r0, r6
 8000c18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000cf0 <_malloc_r+0xfc>
 8000c20:	f000 f868 	bl	8000cf4 <__malloc_lock>
 8000c24:	f8d8 3000 	ldr.w	r3, [r8]
 8000c28:	461c      	mov	r4, r3
 8000c2a:	bb5c      	cbnz	r4, 8000c84 <_malloc_r+0x90>
 8000c2c:	4629      	mov	r1, r5
 8000c2e:	4638      	mov	r0, r7
 8000c30:	f7ff ffc0 	bl	8000bb4 <sbrk_aligned>
 8000c34:	1c43      	adds	r3, r0, #1
 8000c36:	4604      	mov	r4, r0
 8000c38:	d155      	bne.n	8000ce6 <_malloc_r+0xf2>
 8000c3a:	f8d8 4000 	ldr.w	r4, [r8]
 8000c3e:	4626      	mov	r6, r4
 8000c40:	2e00      	cmp	r6, #0
 8000c42:	d145      	bne.n	8000cd0 <_malloc_r+0xdc>
 8000c44:	2c00      	cmp	r4, #0
 8000c46:	d048      	beq.n	8000cda <_malloc_r+0xe6>
 8000c48:	6823      	ldr	r3, [r4, #0]
 8000c4a:	4631      	mov	r1, r6
 8000c4c:	4638      	mov	r0, r7
 8000c4e:	eb04 0903 	add.w	r9, r4, r3
 8000c52:	f000 fcb3 	bl	80015bc <_sbrk_r>
 8000c56:	4581      	cmp	r9, r0
 8000c58:	d13f      	bne.n	8000cda <_malloc_r+0xe6>
 8000c5a:	6821      	ldr	r1, [r4, #0]
 8000c5c:	1a6d      	subs	r5, r5, r1
 8000c5e:	4629      	mov	r1, r5
 8000c60:	4638      	mov	r0, r7
 8000c62:	f7ff ffa7 	bl	8000bb4 <sbrk_aligned>
 8000c66:	3001      	adds	r0, #1
 8000c68:	d037      	beq.n	8000cda <_malloc_r+0xe6>
 8000c6a:	6823      	ldr	r3, [r4, #0]
 8000c6c:	442b      	add	r3, r5
 8000c6e:	6023      	str	r3, [r4, #0]
 8000c70:	f8d8 3000 	ldr.w	r3, [r8]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d038      	beq.n	8000cea <_malloc_r+0xf6>
 8000c78:	685a      	ldr	r2, [r3, #4]
 8000c7a:	42a2      	cmp	r2, r4
 8000c7c:	d12b      	bne.n	8000cd6 <_malloc_r+0xe2>
 8000c7e:	2200      	movs	r2, #0
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	e00f      	b.n	8000ca4 <_malloc_r+0xb0>
 8000c84:	6822      	ldr	r2, [r4, #0]
 8000c86:	1b52      	subs	r2, r2, r5
 8000c88:	d41f      	bmi.n	8000cca <_malloc_r+0xd6>
 8000c8a:	2a0b      	cmp	r2, #11
 8000c8c:	d917      	bls.n	8000cbe <_malloc_r+0xca>
 8000c8e:	1961      	adds	r1, r4, r5
 8000c90:	42a3      	cmp	r3, r4
 8000c92:	6025      	str	r5, [r4, #0]
 8000c94:	bf18      	it	ne
 8000c96:	6059      	strne	r1, [r3, #4]
 8000c98:	6863      	ldr	r3, [r4, #4]
 8000c9a:	bf08      	it	eq
 8000c9c:	f8c8 1000 	streq.w	r1, [r8]
 8000ca0:	5162      	str	r2, [r4, r5]
 8000ca2:	604b      	str	r3, [r1, #4]
 8000ca4:	4638      	mov	r0, r7
 8000ca6:	f104 060b 	add.w	r6, r4, #11
 8000caa:	f000 f829 	bl	8000d00 <__malloc_unlock>
 8000cae:	f026 0607 	bic.w	r6, r6, #7
 8000cb2:	1d23      	adds	r3, r4, #4
 8000cb4:	1af2      	subs	r2, r6, r3
 8000cb6:	d0ae      	beq.n	8000c16 <_malloc_r+0x22>
 8000cb8:	1b9b      	subs	r3, r3, r6
 8000cba:	50a3      	str	r3, [r4, r2]
 8000cbc:	e7ab      	b.n	8000c16 <_malloc_r+0x22>
 8000cbe:	42a3      	cmp	r3, r4
 8000cc0:	6862      	ldr	r2, [r4, #4]
 8000cc2:	d1dd      	bne.n	8000c80 <_malloc_r+0x8c>
 8000cc4:	f8c8 2000 	str.w	r2, [r8]
 8000cc8:	e7ec      	b.n	8000ca4 <_malloc_r+0xb0>
 8000cca:	4623      	mov	r3, r4
 8000ccc:	6864      	ldr	r4, [r4, #4]
 8000cce:	e7ac      	b.n	8000c2a <_malloc_r+0x36>
 8000cd0:	4634      	mov	r4, r6
 8000cd2:	6876      	ldr	r6, [r6, #4]
 8000cd4:	e7b4      	b.n	8000c40 <_malloc_r+0x4c>
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	e7cc      	b.n	8000c74 <_malloc_r+0x80>
 8000cda:	230c      	movs	r3, #12
 8000cdc:	603b      	str	r3, [r7, #0]
 8000cde:	4638      	mov	r0, r7
 8000ce0:	f000 f80e 	bl	8000d00 <__malloc_unlock>
 8000ce4:	e797      	b.n	8000c16 <_malloc_r+0x22>
 8000ce6:	6025      	str	r5, [r4, #0]
 8000ce8:	e7dc      	b.n	8000ca4 <_malloc_r+0xb0>
 8000cea:	605b      	str	r3, [r3, #4]
 8000cec:	deff      	udf	#255	; 0xff
 8000cee:	bf00      	nop
 8000cf0:	20000208 	.word	0x20000208

08000cf4 <__malloc_lock>:
 8000cf4:	4801      	ldr	r0, [pc, #4]	; (8000cfc <__malloc_lock+0x8>)
 8000cf6:	f7ff beea 	b.w	8000ace <__retarget_lock_acquire_recursive>
 8000cfa:	bf00      	nop
 8000cfc:	20000204 	.word	0x20000204

08000d00 <__malloc_unlock>:
 8000d00:	4801      	ldr	r0, [pc, #4]	; (8000d08 <__malloc_unlock+0x8>)
 8000d02:	f7ff bee5 	b.w	8000ad0 <__retarget_lock_release_recursive>
 8000d06:	bf00      	nop
 8000d08:	20000204 	.word	0x20000204

08000d0c <__sfputc_r>:
 8000d0c:	6893      	ldr	r3, [r2, #8]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	b410      	push	{r4}
 8000d14:	6093      	str	r3, [r2, #8]
 8000d16:	da07      	bge.n	8000d28 <__sfputc_r+0x1c>
 8000d18:	6994      	ldr	r4, [r2, #24]
 8000d1a:	42a3      	cmp	r3, r4
 8000d1c:	db01      	blt.n	8000d22 <__sfputc_r+0x16>
 8000d1e:	290a      	cmp	r1, #10
 8000d20:	d102      	bne.n	8000d28 <__sfputc_r+0x1c>
 8000d22:	bc10      	pop	{r4}
 8000d24:	f000 bbb4 	b.w	8001490 <__swbuf_r>
 8000d28:	6813      	ldr	r3, [r2, #0]
 8000d2a:	1c58      	adds	r0, r3, #1
 8000d2c:	6010      	str	r0, [r2, #0]
 8000d2e:	7019      	strb	r1, [r3, #0]
 8000d30:	4608      	mov	r0, r1
 8000d32:	bc10      	pop	{r4}
 8000d34:	4770      	bx	lr

08000d36 <__sfputs_r>:
 8000d36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d38:	4606      	mov	r6, r0
 8000d3a:	460f      	mov	r7, r1
 8000d3c:	4614      	mov	r4, r2
 8000d3e:	18d5      	adds	r5, r2, r3
 8000d40:	42ac      	cmp	r4, r5
 8000d42:	d101      	bne.n	8000d48 <__sfputs_r+0x12>
 8000d44:	2000      	movs	r0, #0
 8000d46:	e007      	b.n	8000d58 <__sfputs_r+0x22>
 8000d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d4c:	463a      	mov	r2, r7
 8000d4e:	4630      	mov	r0, r6
 8000d50:	f7ff ffdc 	bl	8000d0c <__sfputc_r>
 8000d54:	1c43      	adds	r3, r0, #1
 8000d56:	d1f3      	bne.n	8000d40 <__sfputs_r+0xa>
 8000d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d5c <_vfiprintf_r>:
 8000d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d60:	460d      	mov	r5, r1
 8000d62:	b09d      	sub	sp, #116	; 0x74
 8000d64:	4614      	mov	r4, r2
 8000d66:	4698      	mov	r8, r3
 8000d68:	4606      	mov	r6, r0
 8000d6a:	b118      	cbz	r0, 8000d74 <_vfiprintf_r+0x18>
 8000d6c:	6a03      	ldr	r3, [r0, #32]
 8000d6e:	b90b      	cbnz	r3, 8000d74 <_vfiprintf_r+0x18>
 8000d70:	f7ff fda0 	bl	80008b4 <__sinit>
 8000d74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d76:	07d9      	lsls	r1, r3, #31
 8000d78:	d405      	bmi.n	8000d86 <_vfiprintf_r+0x2a>
 8000d7a:	89ab      	ldrh	r3, [r5, #12]
 8000d7c:	059a      	lsls	r2, r3, #22
 8000d7e:	d402      	bmi.n	8000d86 <_vfiprintf_r+0x2a>
 8000d80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d82:	f7ff fea4 	bl	8000ace <__retarget_lock_acquire_recursive>
 8000d86:	89ab      	ldrh	r3, [r5, #12]
 8000d88:	071b      	lsls	r3, r3, #28
 8000d8a:	d501      	bpl.n	8000d90 <_vfiprintf_r+0x34>
 8000d8c:	692b      	ldr	r3, [r5, #16]
 8000d8e:	b99b      	cbnz	r3, 8000db8 <_vfiprintf_r+0x5c>
 8000d90:	4629      	mov	r1, r5
 8000d92:	4630      	mov	r0, r6
 8000d94:	f000 fbba 	bl	800150c <__swsetup_r>
 8000d98:	b170      	cbz	r0, 8000db8 <_vfiprintf_r+0x5c>
 8000d9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d9c:	07dc      	lsls	r4, r3, #31
 8000d9e:	d504      	bpl.n	8000daa <_vfiprintf_r+0x4e>
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000da4:	b01d      	add	sp, #116	; 0x74
 8000da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000daa:	89ab      	ldrh	r3, [r5, #12]
 8000dac:	0598      	lsls	r0, r3, #22
 8000dae:	d4f7      	bmi.n	8000da0 <_vfiprintf_r+0x44>
 8000db0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000db2:	f7ff fe8d 	bl	8000ad0 <__retarget_lock_release_recursive>
 8000db6:	e7f3      	b.n	8000da0 <_vfiprintf_r+0x44>
 8000db8:	2300      	movs	r3, #0
 8000dba:	9309      	str	r3, [sp, #36]	; 0x24
 8000dbc:	2320      	movs	r3, #32
 8000dbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000dc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8000dc6:	2330      	movs	r3, #48	; 0x30
 8000dc8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000f7c <_vfiprintf_r+0x220>
 8000dcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000dd0:	f04f 0901 	mov.w	r9, #1
 8000dd4:	4623      	mov	r3, r4
 8000dd6:	469a      	mov	sl, r3
 8000dd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ddc:	b10a      	cbz	r2, 8000de2 <_vfiprintf_r+0x86>
 8000dde:	2a25      	cmp	r2, #37	; 0x25
 8000de0:	d1f9      	bne.n	8000dd6 <_vfiprintf_r+0x7a>
 8000de2:	ebba 0b04 	subs.w	fp, sl, r4
 8000de6:	d00b      	beq.n	8000e00 <_vfiprintf_r+0xa4>
 8000de8:	465b      	mov	r3, fp
 8000dea:	4622      	mov	r2, r4
 8000dec:	4629      	mov	r1, r5
 8000dee:	4630      	mov	r0, r6
 8000df0:	f7ff ffa1 	bl	8000d36 <__sfputs_r>
 8000df4:	3001      	adds	r0, #1
 8000df6:	f000 80a9 	beq.w	8000f4c <_vfiprintf_r+0x1f0>
 8000dfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000dfc:	445a      	add	r2, fp
 8000dfe:	9209      	str	r2, [sp, #36]	; 0x24
 8000e00:	f89a 3000 	ldrb.w	r3, [sl]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	f000 80a1 	beq.w	8000f4c <_vfiprintf_r+0x1f0>
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e14:	f10a 0a01 	add.w	sl, sl, #1
 8000e18:	9304      	str	r3, [sp, #16]
 8000e1a:	9307      	str	r3, [sp, #28]
 8000e1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000e20:	931a      	str	r3, [sp, #104]	; 0x68
 8000e22:	4654      	mov	r4, sl
 8000e24:	2205      	movs	r2, #5
 8000e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e2a:	4854      	ldr	r0, [pc, #336]	; (8000f7c <_vfiprintf_r+0x220>)
 8000e2c:	f7ff f9f0 	bl	8000210 <memchr>
 8000e30:	9a04      	ldr	r2, [sp, #16]
 8000e32:	b9d8      	cbnz	r0, 8000e6c <_vfiprintf_r+0x110>
 8000e34:	06d1      	lsls	r1, r2, #27
 8000e36:	bf44      	itt	mi
 8000e38:	2320      	movmi	r3, #32
 8000e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e3e:	0713      	lsls	r3, r2, #28
 8000e40:	bf44      	itt	mi
 8000e42:	232b      	movmi	r3, #43	; 0x2b
 8000e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e48:	f89a 3000 	ldrb.w	r3, [sl]
 8000e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8000e4e:	d015      	beq.n	8000e7c <_vfiprintf_r+0x120>
 8000e50:	9a07      	ldr	r2, [sp, #28]
 8000e52:	4654      	mov	r4, sl
 8000e54:	2000      	movs	r0, #0
 8000e56:	f04f 0c0a 	mov.w	ip, #10
 8000e5a:	4621      	mov	r1, r4
 8000e5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e60:	3b30      	subs	r3, #48	; 0x30
 8000e62:	2b09      	cmp	r3, #9
 8000e64:	d94d      	bls.n	8000f02 <_vfiprintf_r+0x1a6>
 8000e66:	b1b0      	cbz	r0, 8000e96 <_vfiprintf_r+0x13a>
 8000e68:	9207      	str	r2, [sp, #28]
 8000e6a:	e014      	b.n	8000e96 <_vfiprintf_r+0x13a>
 8000e6c:	eba0 0308 	sub.w	r3, r0, r8
 8000e70:	fa09 f303 	lsl.w	r3, r9, r3
 8000e74:	4313      	orrs	r3, r2
 8000e76:	9304      	str	r3, [sp, #16]
 8000e78:	46a2      	mov	sl, r4
 8000e7a:	e7d2      	b.n	8000e22 <_vfiprintf_r+0xc6>
 8000e7c:	9b03      	ldr	r3, [sp, #12]
 8000e7e:	1d19      	adds	r1, r3, #4
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	9103      	str	r1, [sp, #12]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	bfbb      	ittet	lt
 8000e88:	425b      	neglt	r3, r3
 8000e8a:	f042 0202 	orrlt.w	r2, r2, #2
 8000e8e:	9307      	strge	r3, [sp, #28]
 8000e90:	9307      	strlt	r3, [sp, #28]
 8000e92:	bfb8      	it	lt
 8000e94:	9204      	strlt	r2, [sp, #16]
 8000e96:	7823      	ldrb	r3, [r4, #0]
 8000e98:	2b2e      	cmp	r3, #46	; 0x2e
 8000e9a:	d10c      	bne.n	8000eb6 <_vfiprintf_r+0x15a>
 8000e9c:	7863      	ldrb	r3, [r4, #1]
 8000e9e:	2b2a      	cmp	r3, #42	; 0x2a
 8000ea0:	d134      	bne.n	8000f0c <_vfiprintf_r+0x1b0>
 8000ea2:	9b03      	ldr	r3, [sp, #12]
 8000ea4:	1d1a      	adds	r2, r3, #4
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	9203      	str	r2, [sp, #12]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	bfb8      	it	lt
 8000eae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000eb2:	3402      	adds	r4, #2
 8000eb4:	9305      	str	r3, [sp, #20]
 8000eb6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000f80 <_vfiprintf_r+0x224>
 8000eba:	7821      	ldrb	r1, [r4, #0]
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	4650      	mov	r0, sl
 8000ec0:	f7ff f9a6 	bl	8000210 <memchr>
 8000ec4:	b138      	cbz	r0, 8000ed6 <_vfiprintf_r+0x17a>
 8000ec6:	9b04      	ldr	r3, [sp, #16]
 8000ec8:	eba0 000a 	sub.w	r0, r0, sl
 8000ecc:	2240      	movs	r2, #64	; 0x40
 8000ece:	4082      	lsls	r2, r0
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	3401      	adds	r4, #1
 8000ed4:	9304      	str	r3, [sp, #16]
 8000ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000eda:	482a      	ldr	r0, [pc, #168]	; (8000f84 <_vfiprintf_r+0x228>)
 8000edc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000ee0:	2206      	movs	r2, #6
 8000ee2:	f7ff f995 	bl	8000210 <memchr>
 8000ee6:	2800      	cmp	r0, #0
 8000ee8:	d03f      	beq.n	8000f6a <_vfiprintf_r+0x20e>
 8000eea:	4b27      	ldr	r3, [pc, #156]	; (8000f88 <_vfiprintf_r+0x22c>)
 8000eec:	bb1b      	cbnz	r3, 8000f36 <_vfiprintf_r+0x1da>
 8000eee:	9b03      	ldr	r3, [sp, #12]
 8000ef0:	3307      	adds	r3, #7
 8000ef2:	f023 0307 	bic.w	r3, r3, #7
 8000ef6:	3308      	adds	r3, #8
 8000ef8:	9303      	str	r3, [sp, #12]
 8000efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000efc:	443b      	add	r3, r7
 8000efe:	9309      	str	r3, [sp, #36]	; 0x24
 8000f00:	e768      	b.n	8000dd4 <_vfiprintf_r+0x78>
 8000f02:	fb0c 3202 	mla	r2, ip, r2, r3
 8000f06:	460c      	mov	r4, r1
 8000f08:	2001      	movs	r0, #1
 8000f0a:	e7a6      	b.n	8000e5a <_vfiprintf_r+0xfe>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	3401      	adds	r4, #1
 8000f10:	9305      	str	r3, [sp, #20]
 8000f12:	4619      	mov	r1, r3
 8000f14:	f04f 0c0a 	mov.w	ip, #10
 8000f18:	4620      	mov	r0, r4
 8000f1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f1e:	3a30      	subs	r2, #48	; 0x30
 8000f20:	2a09      	cmp	r2, #9
 8000f22:	d903      	bls.n	8000f2c <_vfiprintf_r+0x1d0>
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d0c6      	beq.n	8000eb6 <_vfiprintf_r+0x15a>
 8000f28:	9105      	str	r1, [sp, #20]
 8000f2a:	e7c4      	b.n	8000eb6 <_vfiprintf_r+0x15a>
 8000f2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f30:	4604      	mov	r4, r0
 8000f32:	2301      	movs	r3, #1
 8000f34:	e7f0      	b.n	8000f18 <_vfiprintf_r+0x1bc>
 8000f36:	ab03      	add	r3, sp, #12
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	462a      	mov	r2, r5
 8000f3c:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <_vfiprintf_r+0x230>)
 8000f3e:	a904      	add	r1, sp, #16
 8000f40:	4630      	mov	r0, r6
 8000f42:	f3af 8000 	nop.w
 8000f46:	4607      	mov	r7, r0
 8000f48:	1c78      	adds	r0, r7, #1
 8000f4a:	d1d6      	bne.n	8000efa <_vfiprintf_r+0x19e>
 8000f4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f4e:	07d9      	lsls	r1, r3, #31
 8000f50:	d405      	bmi.n	8000f5e <_vfiprintf_r+0x202>
 8000f52:	89ab      	ldrh	r3, [r5, #12]
 8000f54:	059a      	lsls	r2, r3, #22
 8000f56:	d402      	bmi.n	8000f5e <_vfiprintf_r+0x202>
 8000f58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f5a:	f7ff fdb9 	bl	8000ad0 <__retarget_lock_release_recursive>
 8000f5e:	89ab      	ldrh	r3, [r5, #12]
 8000f60:	065b      	lsls	r3, r3, #25
 8000f62:	f53f af1d 	bmi.w	8000da0 <_vfiprintf_r+0x44>
 8000f66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000f68:	e71c      	b.n	8000da4 <_vfiprintf_r+0x48>
 8000f6a:	ab03      	add	r3, sp, #12
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	462a      	mov	r2, r5
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <_vfiprintf_r+0x230>)
 8000f72:	a904      	add	r1, sp, #16
 8000f74:	4630      	mov	r0, r6
 8000f76:	f000 f879 	bl	800106c <_printf_i>
 8000f7a:	e7e4      	b.n	8000f46 <_vfiprintf_r+0x1ea>
 8000f7c:	0800189a 	.word	0x0800189a
 8000f80:	080018a0 	.word	0x080018a0
 8000f84:	080018a4 	.word	0x080018a4
 8000f88:	00000000 	.word	0x00000000
 8000f8c:	08000d37 	.word	0x08000d37

08000f90 <_printf_common>:
 8000f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f94:	4616      	mov	r6, r2
 8000f96:	4699      	mov	r9, r3
 8000f98:	688a      	ldr	r2, [r1, #8]
 8000f9a:	690b      	ldr	r3, [r1, #16]
 8000f9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	bfb8      	it	lt
 8000fa4:	4613      	movlt	r3, r2
 8000fa6:	6033      	str	r3, [r6, #0]
 8000fa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000fac:	4607      	mov	r7, r0
 8000fae:	460c      	mov	r4, r1
 8000fb0:	b10a      	cbz	r2, 8000fb6 <_printf_common+0x26>
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	6033      	str	r3, [r6, #0]
 8000fb6:	6823      	ldr	r3, [r4, #0]
 8000fb8:	0699      	lsls	r1, r3, #26
 8000fba:	bf42      	ittt	mi
 8000fbc:	6833      	ldrmi	r3, [r6, #0]
 8000fbe:	3302      	addmi	r3, #2
 8000fc0:	6033      	strmi	r3, [r6, #0]
 8000fc2:	6825      	ldr	r5, [r4, #0]
 8000fc4:	f015 0506 	ands.w	r5, r5, #6
 8000fc8:	d106      	bne.n	8000fd8 <_printf_common+0x48>
 8000fca:	f104 0a19 	add.w	sl, r4, #25
 8000fce:	68e3      	ldr	r3, [r4, #12]
 8000fd0:	6832      	ldr	r2, [r6, #0]
 8000fd2:	1a9b      	subs	r3, r3, r2
 8000fd4:	42ab      	cmp	r3, r5
 8000fd6:	dc26      	bgt.n	8001026 <_printf_common+0x96>
 8000fd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000fdc:	1e13      	subs	r3, r2, #0
 8000fde:	6822      	ldr	r2, [r4, #0]
 8000fe0:	bf18      	it	ne
 8000fe2:	2301      	movne	r3, #1
 8000fe4:	0692      	lsls	r2, r2, #26
 8000fe6:	d42b      	bmi.n	8001040 <_printf_common+0xb0>
 8000fe8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000fec:	4649      	mov	r1, r9
 8000fee:	4638      	mov	r0, r7
 8000ff0:	47c0      	blx	r8
 8000ff2:	3001      	adds	r0, #1
 8000ff4:	d01e      	beq.n	8001034 <_printf_common+0xa4>
 8000ff6:	6823      	ldr	r3, [r4, #0]
 8000ff8:	6922      	ldr	r2, [r4, #16]
 8000ffa:	f003 0306 	and.w	r3, r3, #6
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	bf02      	ittt	eq
 8001002:	68e5      	ldreq	r5, [r4, #12]
 8001004:	6833      	ldreq	r3, [r6, #0]
 8001006:	1aed      	subeq	r5, r5, r3
 8001008:	68a3      	ldr	r3, [r4, #8]
 800100a:	bf0c      	ite	eq
 800100c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001010:	2500      	movne	r5, #0
 8001012:	4293      	cmp	r3, r2
 8001014:	bfc4      	itt	gt
 8001016:	1a9b      	subgt	r3, r3, r2
 8001018:	18ed      	addgt	r5, r5, r3
 800101a:	2600      	movs	r6, #0
 800101c:	341a      	adds	r4, #26
 800101e:	42b5      	cmp	r5, r6
 8001020:	d11a      	bne.n	8001058 <_printf_common+0xc8>
 8001022:	2000      	movs	r0, #0
 8001024:	e008      	b.n	8001038 <_printf_common+0xa8>
 8001026:	2301      	movs	r3, #1
 8001028:	4652      	mov	r2, sl
 800102a:	4649      	mov	r1, r9
 800102c:	4638      	mov	r0, r7
 800102e:	47c0      	blx	r8
 8001030:	3001      	adds	r0, #1
 8001032:	d103      	bne.n	800103c <_printf_common+0xac>
 8001034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800103c:	3501      	adds	r5, #1
 800103e:	e7c6      	b.n	8000fce <_printf_common+0x3e>
 8001040:	18e1      	adds	r1, r4, r3
 8001042:	1c5a      	adds	r2, r3, #1
 8001044:	2030      	movs	r0, #48	; 0x30
 8001046:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800104a:	4422      	add	r2, r4
 800104c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001050:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001054:	3302      	adds	r3, #2
 8001056:	e7c7      	b.n	8000fe8 <_printf_common+0x58>
 8001058:	2301      	movs	r3, #1
 800105a:	4622      	mov	r2, r4
 800105c:	4649      	mov	r1, r9
 800105e:	4638      	mov	r0, r7
 8001060:	47c0      	blx	r8
 8001062:	3001      	adds	r0, #1
 8001064:	d0e6      	beq.n	8001034 <_printf_common+0xa4>
 8001066:	3601      	adds	r6, #1
 8001068:	e7d9      	b.n	800101e <_printf_common+0x8e>
	...

0800106c <_printf_i>:
 800106c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001070:	7e0f      	ldrb	r7, [r1, #24]
 8001072:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001074:	2f78      	cmp	r7, #120	; 0x78
 8001076:	4691      	mov	r9, r2
 8001078:	4680      	mov	r8, r0
 800107a:	460c      	mov	r4, r1
 800107c:	469a      	mov	sl, r3
 800107e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001082:	d807      	bhi.n	8001094 <_printf_i+0x28>
 8001084:	2f62      	cmp	r7, #98	; 0x62
 8001086:	d80a      	bhi.n	800109e <_printf_i+0x32>
 8001088:	2f00      	cmp	r7, #0
 800108a:	f000 80d4 	beq.w	8001236 <_printf_i+0x1ca>
 800108e:	2f58      	cmp	r7, #88	; 0x58
 8001090:	f000 80c0 	beq.w	8001214 <_printf_i+0x1a8>
 8001094:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001098:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800109c:	e03a      	b.n	8001114 <_printf_i+0xa8>
 800109e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80010a2:	2b15      	cmp	r3, #21
 80010a4:	d8f6      	bhi.n	8001094 <_printf_i+0x28>
 80010a6:	a101      	add	r1, pc, #4	; (adr r1, 80010ac <_printf_i+0x40>)
 80010a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80010ac:	08001105 	.word	0x08001105
 80010b0:	08001119 	.word	0x08001119
 80010b4:	08001095 	.word	0x08001095
 80010b8:	08001095 	.word	0x08001095
 80010bc:	08001095 	.word	0x08001095
 80010c0:	08001095 	.word	0x08001095
 80010c4:	08001119 	.word	0x08001119
 80010c8:	08001095 	.word	0x08001095
 80010cc:	08001095 	.word	0x08001095
 80010d0:	08001095 	.word	0x08001095
 80010d4:	08001095 	.word	0x08001095
 80010d8:	0800121d 	.word	0x0800121d
 80010dc:	08001145 	.word	0x08001145
 80010e0:	080011d7 	.word	0x080011d7
 80010e4:	08001095 	.word	0x08001095
 80010e8:	08001095 	.word	0x08001095
 80010ec:	0800123f 	.word	0x0800123f
 80010f0:	08001095 	.word	0x08001095
 80010f4:	08001145 	.word	0x08001145
 80010f8:	08001095 	.word	0x08001095
 80010fc:	08001095 	.word	0x08001095
 8001100:	080011df 	.word	0x080011df
 8001104:	682b      	ldr	r3, [r5, #0]
 8001106:	1d1a      	adds	r2, r3, #4
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	602a      	str	r2, [r5, #0]
 800110c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001110:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001114:	2301      	movs	r3, #1
 8001116:	e09f      	b.n	8001258 <_printf_i+0x1ec>
 8001118:	6820      	ldr	r0, [r4, #0]
 800111a:	682b      	ldr	r3, [r5, #0]
 800111c:	0607      	lsls	r7, r0, #24
 800111e:	f103 0104 	add.w	r1, r3, #4
 8001122:	6029      	str	r1, [r5, #0]
 8001124:	d501      	bpl.n	800112a <_printf_i+0xbe>
 8001126:	681e      	ldr	r6, [r3, #0]
 8001128:	e003      	b.n	8001132 <_printf_i+0xc6>
 800112a:	0646      	lsls	r6, r0, #25
 800112c:	d5fb      	bpl.n	8001126 <_printf_i+0xba>
 800112e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001132:	2e00      	cmp	r6, #0
 8001134:	da03      	bge.n	800113e <_printf_i+0xd2>
 8001136:	232d      	movs	r3, #45	; 0x2d
 8001138:	4276      	negs	r6, r6
 800113a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800113e:	485a      	ldr	r0, [pc, #360]	; (80012a8 <_printf_i+0x23c>)
 8001140:	230a      	movs	r3, #10
 8001142:	e012      	b.n	800116a <_printf_i+0xfe>
 8001144:	682b      	ldr	r3, [r5, #0]
 8001146:	6820      	ldr	r0, [r4, #0]
 8001148:	1d19      	adds	r1, r3, #4
 800114a:	6029      	str	r1, [r5, #0]
 800114c:	0605      	lsls	r5, r0, #24
 800114e:	d501      	bpl.n	8001154 <_printf_i+0xe8>
 8001150:	681e      	ldr	r6, [r3, #0]
 8001152:	e002      	b.n	800115a <_printf_i+0xee>
 8001154:	0641      	lsls	r1, r0, #25
 8001156:	d5fb      	bpl.n	8001150 <_printf_i+0xe4>
 8001158:	881e      	ldrh	r6, [r3, #0]
 800115a:	4853      	ldr	r0, [pc, #332]	; (80012a8 <_printf_i+0x23c>)
 800115c:	2f6f      	cmp	r7, #111	; 0x6f
 800115e:	bf0c      	ite	eq
 8001160:	2308      	moveq	r3, #8
 8001162:	230a      	movne	r3, #10
 8001164:	2100      	movs	r1, #0
 8001166:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800116a:	6865      	ldr	r5, [r4, #4]
 800116c:	60a5      	str	r5, [r4, #8]
 800116e:	2d00      	cmp	r5, #0
 8001170:	bfa2      	ittt	ge
 8001172:	6821      	ldrge	r1, [r4, #0]
 8001174:	f021 0104 	bicge.w	r1, r1, #4
 8001178:	6021      	strge	r1, [r4, #0]
 800117a:	b90e      	cbnz	r6, 8001180 <_printf_i+0x114>
 800117c:	2d00      	cmp	r5, #0
 800117e:	d04b      	beq.n	8001218 <_printf_i+0x1ac>
 8001180:	4615      	mov	r5, r2
 8001182:	fbb6 f1f3 	udiv	r1, r6, r3
 8001186:	fb03 6711 	mls	r7, r3, r1, r6
 800118a:	5dc7      	ldrb	r7, [r0, r7]
 800118c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001190:	4637      	mov	r7, r6
 8001192:	42bb      	cmp	r3, r7
 8001194:	460e      	mov	r6, r1
 8001196:	d9f4      	bls.n	8001182 <_printf_i+0x116>
 8001198:	2b08      	cmp	r3, #8
 800119a:	d10b      	bne.n	80011b4 <_printf_i+0x148>
 800119c:	6823      	ldr	r3, [r4, #0]
 800119e:	07de      	lsls	r6, r3, #31
 80011a0:	d508      	bpl.n	80011b4 <_printf_i+0x148>
 80011a2:	6923      	ldr	r3, [r4, #16]
 80011a4:	6861      	ldr	r1, [r4, #4]
 80011a6:	4299      	cmp	r1, r3
 80011a8:	bfde      	ittt	le
 80011aa:	2330      	movle	r3, #48	; 0x30
 80011ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80011b0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80011b4:	1b52      	subs	r2, r2, r5
 80011b6:	6122      	str	r2, [r4, #16]
 80011b8:	f8cd a000 	str.w	sl, [sp]
 80011bc:	464b      	mov	r3, r9
 80011be:	aa03      	add	r2, sp, #12
 80011c0:	4621      	mov	r1, r4
 80011c2:	4640      	mov	r0, r8
 80011c4:	f7ff fee4 	bl	8000f90 <_printf_common>
 80011c8:	3001      	adds	r0, #1
 80011ca:	d14a      	bne.n	8001262 <_printf_i+0x1f6>
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011d0:	b004      	add	sp, #16
 80011d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011d6:	6823      	ldr	r3, [r4, #0]
 80011d8:	f043 0320 	orr.w	r3, r3, #32
 80011dc:	6023      	str	r3, [r4, #0]
 80011de:	4833      	ldr	r0, [pc, #204]	; (80012ac <_printf_i+0x240>)
 80011e0:	2778      	movs	r7, #120	; 0x78
 80011e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80011e6:	6823      	ldr	r3, [r4, #0]
 80011e8:	6829      	ldr	r1, [r5, #0]
 80011ea:	061f      	lsls	r7, r3, #24
 80011ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80011f0:	d402      	bmi.n	80011f8 <_printf_i+0x18c>
 80011f2:	065f      	lsls	r7, r3, #25
 80011f4:	bf48      	it	mi
 80011f6:	b2b6      	uxthmi	r6, r6
 80011f8:	07df      	lsls	r7, r3, #31
 80011fa:	bf48      	it	mi
 80011fc:	f043 0320 	orrmi.w	r3, r3, #32
 8001200:	6029      	str	r1, [r5, #0]
 8001202:	bf48      	it	mi
 8001204:	6023      	strmi	r3, [r4, #0]
 8001206:	b91e      	cbnz	r6, 8001210 <_printf_i+0x1a4>
 8001208:	6823      	ldr	r3, [r4, #0]
 800120a:	f023 0320 	bic.w	r3, r3, #32
 800120e:	6023      	str	r3, [r4, #0]
 8001210:	2310      	movs	r3, #16
 8001212:	e7a7      	b.n	8001164 <_printf_i+0xf8>
 8001214:	4824      	ldr	r0, [pc, #144]	; (80012a8 <_printf_i+0x23c>)
 8001216:	e7e4      	b.n	80011e2 <_printf_i+0x176>
 8001218:	4615      	mov	r5, r2
 800121a:	e7bd      	b.n	8001198 <_printf_i+0x12c>
 800121c:	682b      	ldr	r3, [r5, #0]
 800121e:	6826      	ldr	r6, [r4, #0]
 8001220:	6961      	ldr	r1, [r4, #20]
 8001222:	1d18      	adds	r0, r3, #4
 8001224:	6028      	str	r0, [r5, #0]
 8001226:	0635      	lsls	r5, r6, #24
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	d501      	bpl.n	8001230 <_printf_i+0x1c4>
 800122c:	6019      	str	r1, [r3, #0]
 800122e:	e002      	b.n	8001236 <_printf_i+0x1ca>
 8001230:	0670      	lsls	r0, r6, #25
 8001232:	d5fb      	bpl.n	800122c <_printf_i+0x1c0>
 8001234:	8019      	strh	r1, [r3, #0]
 8001236:	2300      	movs	r3, #0
 8001238:	6123      	str	r3, [r4, #16]
 800123a:	4615      	mov	r5, r2
 800123c:	e7bc      	b.n	80011b8 <_printf_i+0x14c>
 800123e:	682b      	ldr	r3, [r5, #0]
 8001240:	1d1a      	adds	r2, r3, #4
 8001242:	602a      	str	r2, [r5, #0]
 8001244:	681d      	ldr	r5, [r3, #0]
 8001246:	6862      	ldr	r2, [r4, #4]
 8001248:	2100      	movs	r1, #0
 800124a:	4628      	mov	r0, r5
 800124c:	f7fe ffe0 	bl	8000210 <memchr>
 8001250:	b108      	cbz	r0, 8001256 <_printf_i+0x1ea>
 8001252:	1b40      	subs	r0, r0, r5
 8001254:	6060      	str	r0, [r4, #4]
 8001256:	6863      	ldr	r3, [r4, #4]
 8001258:	6123      	str	r3, [r4, #16]
 800125a:	2300      	movs	r3, #0
 800125c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001260:	e7aa      	b.n	80011b8 <_printf_i+0x14c>
 8001262:	6923      	ldr	r3, [r4, #16]
 8001264:	462a      	mov	r2, r5
 8001266:	4649      	mov	r1, r9
 8001268:	4640      	mov	r0, r8
 800126a:	47d0      	blx	sl
 800126c:	3001      	adds	r0, #1
 800126e:	d0ad      	beq.n	80011cc <_printf_i+0x160>
 8001270:	6823      	ldr	r3, [r4, #0]
 8001272:	079b      	lsls	r3, r3, #30
 8001274:	d413      	bmi.n	800129e <_printf_i+0x232>
 8001276:	68e0      	ldr	r0, [r4, #12]
 8001278:	9b03      	ldr	r3, [sp, #12]
 800127a:	4298      	cmp	r0, r3
 800127c:	bfb8      	it	lt
 800127e:	4618      	movlt	r0, r3
 8001280:	e7a6      	b.n	80011d0 <_printf_i+0x164>
 8001282:	2301      	movs	r3, #1
 8001284:	4632      	mov	r2, r6
 8001286:	4649      	mov	r1, r9
 8001288:	4640      	mov	r0, r8
 800128a:	47d0      	blx	sl
 800128c:	3001      	adds	r0, #1
 800128e:	d09d      	beq.n	80011cc <_printf_i+0x160>
 8001290:	3501      	adds	r5, #1
 8001292:	68e3      	ldr	r3, [r4, #12]
 8001294:	9903      	ldr	r1, [sp, #12]
 8001296:	1a5b      	subs	r3, r3, r1
 8001298:	42ab      	cmp	r3, r5
 800129a:	dcf2      	bgt.n	8001282 <_printf_i+0x216>
 800129c:	e7eb      	b.n	8001276 <_printf_i+0x20a>
 800129e:	2500      	movs	r5, #0
 80012a0:	f104 0619 	add.w	r6, r4, #25
 80012a4:	e7f5      	b.n	8001292 <_printf_i+0x226>
 80012a6:	bf00      	nop
 80012a8:	080018ab 	.word	0x080018ab
 80012ac:	080018bc 	.word	0x080018bc

080012b0 <__sflush_r>:
 80012b0:	898a      	ldrh	r2, [r1, #12]
 80012b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012b4:	4605      	mov	r5, r0
 80012b6:	0710      	lsls	r0, r2, #28
 80012b8:	460c      	mov	r4, r1
 80012ba:	d457      	bmi.n	800136c <__sflush_r+0xbc>
 80012bc:	684b      	ldr	r3, [r1, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	dc04      	bgt.n	80012cc <__sflush_r+0x1c>
 80012c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	dc01      	bgt.n	80012cc <__sflush_r+0x1c>
 80012c8:	2000      	movs	r0, #0
 80012ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012ce:	2e00      	cmp	r6, #0
 80012d0:	d0fa      	beq.n	80012c8 <__sflush_r+0x18>
 80012d2:	2300      	movs	r3, #0
 80012d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80012d8:	682f      	ldr	r7, [r5, #0]
 80012da:	6a21      	ldr	r1, [r4, #32]
 80012dc:	602b      	str	r3, [r5, #0]
 80012de:	d032      	beq.n	8001346 <__sflush_r+0x96>
 80012e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80012e2:	89a3      	ldrh	r3, [r4, #12]
 80012e4:	075a      	lsls	r2, r3, #29
 80012e6:	d505      	bpl.n	80012f4 <__sflush_r+0x44>
 80012e8:	6863      	ldr	r3, [r4, #4]
 80012ea:	1ac0      	subs	r0, r0, r3
 80012ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012ee:	b10b      	cbz	r3, 80012f4 <__sflush_r+0x44>
 80012f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012f2:	1ac0      	subs	r0, r0, r3
 80012f4:	2300      	movs	r3, #0
 80012f6:	4602      	mov	r2, r0
 80012f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012fa:	6a21      	ldr	r1, [r4, #32]
 80012fc:	4628      	mov	r0, r5
 80012fe:	47b0      	blx	r6
 8001300:	1c43      	adds	r3, r0, #1
 8001302:	89a3      	ldrh	r3, [r4, #12]
 8001304:	d106      	bne.n	8001314 <__sflush_r+0x64>
 8001306:	6829      	ldr	r1, [r5, #0]
 8001308:	291d      	cmp	r1, #29
 800130a:	d82b      	bhi.n	8001364 <__sflush_r+0xb4>
 800130c:	4a28      	ldr	r2, [pc, #160]	; (80013b0 <__sflush_r+0x100>)
 800130e:	410a      	asrs	r2, r1
 8001310:	07d6      	lsls	r6, r2, #31
 8001312:	d427      	bmi.n	8001364 <__sflush_r+0xb4>
 8001314:	2200      	movs	r2, #0
 8001316:	6062      	str	r2, [r4, #4]
 8001318:	04d9      	lsls	r1, r3, #19
 800131a:	6922      	ldr	r2, [r4, #16]
 800131c:	6022      	str	r2, [r4, #0]
 800131e:	d504      	bpl.n	800132a <__sflush_r+0x7a>
 8001320:	1c42      	adds	r2, r0, #1
 8001322:	d101      	bne.n	8001328 <__sflush_r+0x78>
 8001324:	682b      	ldr	r3, [r5, #0]
 8001326:	b903      	cbnz	r3, 800132a <__sflush_r+0x7a>
 8001328:	6560      	str	r0, [r4, #84]	; 0x54
 800132a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800132c:	602f      	str	r7, [r5, #0]
 800132e:	2900      	cmp	r1, #0
 8001330:	d0ca      	beq.n	80012c8 <__sflush_r+0x18>
 8001332:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001336:	4299      	cmp	r1, r3
 8001338:	d002      	beq.n	8001340 <__sflush_r+0x90>
 800133a:	4628      	mov	r0, r5
 800133c:	f7ff fbe8 	bl	8000b10 <_free_r>
 8001340:	2000      	movs	r0, #0
 8001342:	6360      	str	r0, [r4, #52]	; 0x34
 8001344:	e7c1      	b.n	80012ca <__sflush_r+0x1a>
 8001346:	2301      	movs	r3, #1
 8001348:	4628      	mov	r0, r5
 800134a:	47b0      	blx	r6
 800134c:	1c41      	adds	r1, r0, #1
 800134e:	d1c8      	bne.n	80012e2 <__sflush_r+0x32>
 8001350:	682b      	ldr	r3, [r5, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0c5      	beq.n	80012e2 <__sflush_r+0x32>
 8001356:	2b1d      	cmp	r3, #29
 8001358:	d001      	beq.n	800135e <__sflush_r+0xae>
 800135a:	2b16      	cmp	r3, #22
 800135c:	d101      	bne.n	8001362 <__sflush_r+0xb2>
 800135e:	602f      	str	r7, [r5, #0]
 8001360:	e7b2      	b.n	80012c8 <__sflush_r+0x18>
 8001362:	89a3      	ldrh	r3, [r4, #12]
 8001364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001368:	81a3      	strh	r3, [r4, #12]
 800136a:	e7ae      	b.n	80012ca <__sflush_r+0x1a>
 800136c:	690f      	ldr	r7, [r1, #16]
 800136e:	2f00      	cmp	r7, #0
 8001370:	d0aa      	beq.n	80012c8 <__sflush_r+0x18>
 8001372:	0793      	lsls	r3, r2, #30
 8001374:	680e      	ldr	r6, [r1, #0]
 8001376:	bf08      	it	eq
 8001378:	694b      	ldreq	r3, [r1, #20]
 800137a:	600f      	str	r7, [r1, #0]
 800137c:	bf18      	it	ne
 800137e:	2300      	movne	r3, #0
 8001380:	1bf6      	subs	r6, r6, r7
 8001382:	608b      	str	r3, [r1, #8]
 8001384:	2e00      	cmp	r6, #0
 8001386:	dd9f      	ble.n	80012c8 <__sflush_r+0x18>
 8001388:	6a21      	ldr	r1, [r4, #32]
 800138a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800138e:	4633      	mov	r3, r6
 8001390:	463a      	mov	r2, r7
 8001392:	4628      	mov	r0, r5
 8001394:	47e0      	blx	ip
 8001396:	2800      	cmp	r0, #0
 8001398:	dc06      	bgt.n	80013a8 <__sflush_r+0xf8>
 800139a:	89a3      	ldrh	r3, [r4, #12]
 800139c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013a0:	81a3      	strh	r3, [r4, #12]
 80013a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013a6:	e790      	b.n	80012ca <__sflush_r+0x1a>
 80013a8:	4407      	add	r7, r0
 80013aa:	1a36      	subs	r6, r6, r0
 80013ac:	e7ea      	b.n	8001384 <__sflush_r+0xd4>
 80013ae:	bf00      	nop
 80013b0:	dfbffffe 	.word	0xdfbffffe

080013b4 <_fflush_r>:
 80013b4:	b538      	push	{r3, r4, r5, lr}
 80013b6:	690b      	ldr	r3, [r1, #16]
 80013b8:	4605      	mov	r5, r0
 80013ba:	460c      	mov	r4, r1
 80013bc:	b913      	cbnz	r3, 80013c4 <_fflush_r+0x10>
 80013be:	2500      	movs	r5, #0
 80013c0:	4628      	mov	r0, r5
 80013c2:	bd38      	pop	{r3, r4, r5, pc}
 80013c4:	b118      	cbz	r0, 80013ce <_fflush_r+0x1a>
 80013c6:	6a03      	ldr	r3, [r0, #32]
 80013c8:	b90b      	cbnz	r3, 80013ce <_fflush_r+0x1a>
 80013ca:	f7ff fa73 	bl	80008b4 <__sinit>
 80013ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f3      	beq.n	80013be <_fflush_r+0xa>
 80013d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80013d8:	07d0      	lsls	r0, r2, #31
 80013da:	d404      	bmi.n	80013e6 <_fflush_r+0x32>
 80013dc:	0599      	lsls	r1, r3, #22
 80013de:	d402      	bmi.n	80013e6 <_fflush_r+0x32>
 80013e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013e2:	f7ff fb74 	bl	8000ace <__retarget_lock_acquire_recursive>
 80013e6:	4628      	mov	r0, r5
 80013e8:	4621      	mov	r1, r4
 80013ea:	f7ff ff61 	bl	80012b0 <__sflush_r>
 80013ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013f0:	07da      	lsls	r2, r3, #31
 80013f2:	4605      	mov	r5, r0
 80013f4:	d4e4      	bmi.n	80013c0 <_fflush_r+0xc>
 80013f6:	89a3      	ldrh	r3, [r4, #12]
 80013f8:	059b      	lsls	r3, r3, #22
 80013fa:	d4e1      	bmi.n	80013c0 <_fflush_r+0xc>
 80013fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013fe:	f7ff fb67 	bl	8000ad0 <__retarget_lock_release_recursive>
 8001402:	e7dd      	b.n	80013c0 <_fflush_r+0xc>

08001404 <fiprintf>:
 8001404:	b40e      	push	{r1, r2, r3}
 8001406:	b503      	push	{r0, r1, lr}
 8001408:	4601      	mov	r1, r0
 800140a:	ab03      	add	r3, sp, #12
 800140c:	4805      	ldr	r0, [pc, #20]	; (8001424 <fiprintf+0x20>)
 800140e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001412:	6800      	ldr	r0, [r0, #0]
 8001414:	9301      	str	r3, [sp, #4]
 8001416:	f7ff fca1 	bl	8000d5c <_vfiprintf_r>
 800141a:	b002      	add	sp, #8
 800141c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001420:	b003      	add	sp, #12
 8001422:	4770      	bx	lr
 8001424:	200000a0 	.word	0x200000a0

08001428 <_putc_r>:
 8001428:	b570      	push	{r4, r5, r6, lr}
 800142a:	460d      	mov	r5, r1
 800142c:	4614      	mov	r4, r2
 800142e:	4606      	mov	r6, r0
 8001430:	b118      	cbz	r0, 800143a <_putc_r+0x12>
 8001432:	6a03      	ldr	r3, [r0, #32]
 8001434:	b90b      	cbnz	r3, 800143a <_putc_r+0x12>
 8001436:	f7ff fa3d 	bl	80008b4 <__sinit>
 800143a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800143c:	07d8      	lsls	r0, r3, #31
 800143e:	d405      	bmi.n	800144c <_putc_r+0x24>
 8001440:	89a3      	ldrh	r3, [r4, #12]
 8001442:	0599      	lsls	r1, r3, #22
 8001444:	d402      	bmi.n	800144c <_putc_r+0x24>
 8001446:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001448:	f7ff fb41 	bl	8000ace <__retarget_lock_acquire_recursive>
 800144c:	68a3      	ldr	r3, [r4, #8]
 800144e:	3b01      	subs	r3, #1
 8001450:	2b00      	cmp	r3, #0
 8001452:	60a3      	str	r3, [r4, #8]
 8001454:	da05      	bge.n	8001462 <_putc_r+0x3a>
 8001456:	69a2      	ldr	r2, [r4, #24]
 8001458:	4293      	cmp	r3, r2
 800145a:	db12      	blt.n	8001482 <_putc_r+0x5a>
 800145c:	b2eb      	uxtb	r3, r5
 800145e:	2b0a      	cmp	r3, #10
 8001460:	d00f      	beq.n	8001482 <_putc_r+0x5a>
 8001462:	6823      	ldr	r3, [r4, #0]
 8001464:	1c5a      	adds	r2, r3, #1
 8001466:	6022      	str	r2, [r4, #0]
 8001468:	701d      	strb	r5, [r3, #0]
 800146a:	b2ed      	uxtb	r5, r5
 800146c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800146e:	07da      	lsls	r2, r3, #31
 8001470:	d405      	bmi.n	800147e <_putc_r+0x56>
 8001472:	89a3      	ldrh	r3, [r4, #12]
 8001474:	059b      	lsls	r3, r3, #22
 8001476:	d402      	bmi.n	800147e <_putc_r+0x56>
 8001478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800147a:	f7ff fb29 	bl	8000ad0 <__retarget_lock_release_recursive>
 800147e:	4628      	mov	r0, r5
 8001480:	bd70      	pop	{r4, r5, r6, pc}
 8001482:	4629      	mov	r1, r5
 8001484:	4622      	mov	r2, r4
 8001486:	4630      	mov	r0, r6
 8001488:	f000 f802 	bl	8001490 <__swbuf_r>
 800148c:	4605      	mov	r5, r0
 800148e:	e7ed      	b.n	800146c <_putc_r+0x44>

08001490 <__swbuf_r>:
 8001490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001492:	460e      	mov	r6, r1
 8001494:	4614      	mov	r4, r2
 8001496:	4605      	mov	r5, r0
 8001498:	b118      	cbz	r0, 80014a2 <__swbuf_r+0x12>
 800149a:	6a03      	ldr	r3, [r0, #32]
 800149c:	b90b      	cbnz	r3, 80014a2 <__swbuf_r+0x12>
 800149e:	f7ff fa09 	bl	80008b4 <__sinit>
 80014a2:	69a3      	ldr	r3, [r4, #24]
 80014a4:	60a3      	str	r3, [r4, #8]
 80014a6:	89a3      	ldrh	r3, [r4, #12]
 80014a8:	071a      	lsls	r2, r3, #28
 80014aa:	d525      	bpl.n	80014f8 <__swbuf_r+0x68>
 80014ac:	6923      	ldr	r3, [r4, #16]
 80014ae:	b31b      	cbz	r3, 80014f8 <__swbuf_r+0x68>
 80014b0:	6823      	ldr	r3, [r4, #0]
 80014b2:	6922      	ldr	r2, [r4, #16]
 80014b4:	1a98      	subs	r0, r3, r2
 80014b6:	6963      	ldr	r3, [r4, #20]
 80014b8:	b2f6      	uxtb	r6, r6
 80014ba:	4283      	cmp	r3, r0
 80014bc:	4637      	mov	r7, r6
 80014be:	dc04      	bgt.n	80014ca <__swbuf_r+0x3a>
 80014c0:	4621      	mov	r1, r4
 80014c2:	4628      	mov	r0, r5
 80014c4:	f7ff ff76 	bl	80013b4 <_fflush_r>
 80014c8:	b9e0      	cbnz	r0, 8001504 <__swbuf_r+0x74>
 80014ca:	68a3      	ldr	r3, [r4, #8]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	60a3      	str	r3, [r4, #8]
 80014d0:	6823      	ldr	r3, [r4, #0]
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	6022      	str	r2, [r4, #0]
 80014d6:	701e      	strb	r6, [r3, #0]
 80014d8:	6962      	ldr	r2, [r4, #20]
 80014da:	1c43      	adds	r3, r0, #1
 80014dc:	429a      	cmp	r2, r3
 80014de:	d004      	beq.n	80014ea <__swbuf_r+0x5a>
 80014e0:	89a3      	ldrh	r3, [r4, #12]
 80014e2:	07db      	lsls	r3, r3, #31
 80014e4:	d506      	bpl.n	80014f4 <__swbuf_r+0x64>
 80014e6:	2e0a      	cmp	r6, #10
 80014e8:	d104      	bne.n	80014f4 <__swbuf_r+0x64>
 80014ea:	4621      	mov	r1, r4
 80014ec:	4628      	mov	r0, r5
 80014ee:	f7ff ff61 	bl	80013b4 <_fflush_r>
 80014f2:	b938      	cbnz	r0, 8001504 <__swbuf_r+0x74>
 80014f4:	4638      	mov	r0, r7
 80014f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014f8:	4621      	mov	r1, r4
 80014fa:	4628      	mov	r0, r5
 80014fc:	f000 f806 	bl	800150c <__swsetup_r>
 8001500:	2800      	cmp	r0, #0
 8001502:	d0d5      	beq.n	80014b0 <__swbuf_r+0x20>
 8001504:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001508:	e7f4      	b.n	80014f4 <__swbuf_r+0x64>
	...

0800150c <__swsetup_r>:
 800150c:	b538      	push	{r3, r4, r5, lr}
 800150e:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <__swsetup_r+0xac>)
 8001510:	4605      	mov	r5, r0
 8001512:	6818      	ldr	r0, [r3, #0]
 8001514:	460c      	mov	r4, r1
 8001516:	b118      	cbz	r0, 8001520 <__swsetup_r+0x14>
 8001518:	6a03      	ldr	r3, [r0, #32]
 800151a:	b90b      	cbnz	r3, 8001520 <__swsetup_r+0x14>
 800151c:	f7ff f9ca 	bl	80008b4 <__sinit>
 8001520:	89a3      	ldrh	r3, [r4, #12]
 8001522:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001526:	0718      	lsls	r0, r3, #28
 8001528:	d422      	bmi.n	8001570 <__swsetup_r+0x64>
 800152a:	06d9      	lsls	r1, r3, #27
 800152c:	d407      	bmi.n	800153e <__swsetup_r+0x32>
 800152e:	2309      	movs	r3, #9
 8001530:	602b      	str	r3, [r5, #0]
 8001532:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001536:	81a3      	strh	r3, [r4, #12]
 8001538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800153c:	e034      	b.n	80015a8 <__swsetup_r+0x9c>
 800153e:	0758      	lsls	r0, r3, #29
 8001540:	d512      	bpl.n	8001568 <__swsetup_r+0x5c>
 8001542:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001544:	b141      	cbz	r1, 8001558 <__swsetup_r+0x4c>
 8001546:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800154a:	4299      	cmp	r1, r3
 800154c:	d002      	beq.n	8001554 <__swsetup_r+0x48>
 800154e:	4628      	mov	r0, r5
 8001550:	f7ff fade 	bl	8000b10 <_free_r>
 8001554:	2300      	movs	r3, #0
 8001556:	6363      	str	r3, [r4, #52]	; 0x34
 8001558:	89a3      	ldrh	r3, [r4, #12]
 800155a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800155e:	81a3      	strh	r3, [r4, #12]
 8001560:	2300      	movs	r3, #0
 8001562:	6063      	str	r3, [r4, #4]
 8001564:	6923      	ldr	r3, [r4, #16]
 8001566:	6023      	str	r3, [r4, #0]
 8001568:	89a3      	ldrh	r3, [r4, #12]
 800156a:	f043 0308 	orr.w	r3, r3, #8
 800156e:	81a3      	strh	r3, [r4, #12]
 8001570:	6923      	ldr	r3, [r4, #16]
 8001572:	b94b      	cbnz	r3, 8001588 <__swsetup_r+0x7c>
 8001574:	89a3      	ldrh	r3, [r4, #12]
 8001576:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800157a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800157e:	d003      	beq.n	8001588 <__swsetup_r+0x7c>
 8001580:	4621      	mov	r1, r4
 8001582:	4628      	mov	r0, r5
 8001584:	f000 f857 	bl	8001636 <__smakebuf_r>
 8001588:	89a0      	ldrh	r0, [r4, #12]
 800158a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800158e:	f010 0301 	ands.w	r3, r0, #1
 8001592:	d00a      	beq.n	80015aa <__swsetup_r+0x9e>
 8001594:	2300      	movs	r3, #0
 8001596:	60a3      	str	r3, [r4, #8]
 8001598:	6963      	ldr	r3, [r4, #20]
 800159a:	425b      	negs	r3, r3
 800159c:	61a3      	str	r3, [r4, #24]
 800159e:	6923      	ldr	r3, [r4, #16]
 80015a0:	b943      	cbnz	r3, 80015b4 <__swsetup_r+0xa8>
 80015a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80015a6:	d1c4      	bne.n	8001532 <__swsetup_r+0x26>
 80015a8:	bd38      	pop	{r3, r4, r5, pc}
 80015aa:	0781      	lsls	r1, r0, #30
 80015ac:	bf58      	it	pl
 80015ae:	6963      	ldrpl	r3, [r4, #20]
 80015b0:	60a3      	str	r3, [r4, #8]
 80015b2:	e7f4      	b.n	800159e <__swsetup_r+0x92>
 80015b4:	2000      	movs	r0, #0
 80015b6:	e7f7      	b.n	80015a8 <__swsetup_r+0x9c>
 80015b8:	200000a0 	.word	0x200000a0

080015bc <_sbrk_r>:
 80015bc:	b538      	push	{r3, r4, r5, lr}
 80015be:	4d06      	ldr	r5, [pc, #24]	; (80015d8 <_sbrk_r+0x1c>)
 80015c0:	2300      	movs	r3, #0
 80015c2:	4604      	mov	r4, r0
 80015c4:	4608      	mov	r0, r1
 80015c6:	602b      	str	r3, [r5, #0]
 80015c8:	f7ff f84a 	bl	8000660 <_sbrk>
 80015cc:	1c43      	adds	r3, r0, #1
 80015ce:	d102      	bne.n	80015d6 <_sbrk_r+0x1a>
 80015d0:	682b      	ldr	r3, [r5, #0]
 80015d2:	b103      	cbz	r3, 80015d6 <_sbrk_r+0x1a>
 80015d4:	6023      	str	r3, [r4, #0]
 80015d6:	bd38      	pop	{r3, r4, r5, pc}
 80015d8:	20000200 	.word	0x20000200

080015dc <abort>:
 80015dc:	b508      	push	{r3, lr}
 80015de:	2006      	movs	r0, #6
 80015e0:	f000 f88e 	bl	8001700 <raise>
 80015e4:	2001      	movs	r0, #1
 80015e6:	f7fe ffc8 	bl	800057a <_exit>

080015ea <__swhatbuf_r>:
 80015ea:	b570      	push	{r4, r5, r6, lr}
 80015ec:	460c      	mov	r4, r1
 80015ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015f2:	2900      	cmp	r1, #0
 80015f4:	b096      	sub	sp, #88	; 0x58
 80015f6:	4615      	mov	r5, r2
 80015f8:	461e      	mov	r6, r3
 80015fa:	da0d      	bge.n	8001618 <__swhatbuf_r+0x2e>
 80015fc:	89a3      	ldrh	r3, [r4, #12]
 80015fe:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001602:	f04f 0100 	mov.w	r1, #0
 8001606:	bf0c      	ite	eq
 8001608:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800160c:	2340      	movne	r3, #64	; 0x40
 800160e:	2000      	movs	r0, #0
 8001610:	6031      	str	r1, [r6, #0]
 8001612:	602b      	str	r3, [r5, #0]
 8001614:	b016      	add	sp, #88	; 0x58
 8001616:	bd70      	pop	{r4, r5, r6, pc}
 8001618:	466a      	mov	r2, sp
 800161a:	f000 f879 	bl	8001710 <_fstat_r>
 800161e:	2800      	cmp	r0, #0
 8001620:	dbec      	blt.n	80015fc <__swhatbuf_r+0x12>
 8001622:	9901      	ldr	r1, [sp, #4]
 8001624:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001628:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800162c:	4259      	negs	r1, r3
 800162e:	4159      	adcs	r1, r3
 8001630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001634:	e7eb      	b.n	800160e <__swhatbuf_r+0x24>

08001636 <__smakebuf_r>:
 8001636:	898b      	ldrh	r3, [r1, #12]
 8001638:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800163a:	079d      	lsls	r5, r3, #30
 800163c:	4606      	mov	r6, r0
 800163e:	460c      	mov	r4, r1
 8001640:	d507      	bpl.n	8001652 <__smakebuf_r+0x1c>
 8001642:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001646:	6023      	str	r3, [r4, #0]
 8001648:	6123      	str	r3, [r4, #16]
 800164a:	2301      	movs	r3, #1
 800164c:	6163      	str	r3, [r4, #20]
 800164e:	b002      	add	sp, #8
 8001650:	bd70      	pop	{r4, r5, r6, pc}
 8001652:	ab01      	add	r3, sp, #4
 8001654:	466a      	mov	r2, sp
 8001656:	f7ff ffc8 	bl	80015ea <__swhatbuf_r>
 800165a:	9900      	ldr	r1, [sp, #0]
 800165c:	4605      	mov	r5, r0
 800165e:	4630      	mov	r0, r6
 8001660:	f7ff fac8 	bl	8000bf4 <_malloc_r>
 8001664:	b948      	cbnz	r0, 800167a <__smakebuf_r+0x44>
 8001666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800166a:	059a      	lsls	r2, r3, #22
 800166c:	d4ef      	bmi.n	800164e <__smakebuf_r+0x18>
 800166e:	f023 0303 	bic.w	r3, r3, #3
 8001672:	f043 0302 	orr.w	r3, r3, #2
 8001676:	81a3      	strh	r3, [r4, #12]
 8001678:	e7e3      	b.n	8001642 <__smakebuf_r+0xc>
 800167a:	89a3      	ldrh	r3, [r4, #12]
 800167c:	6020      	str	r0, [r4, #0]
 800167e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001682:	81a3      	strh	r3, [r4, #12]
 8001684:	9b00      	ldr	r3, [sp, #0]
 8001686:	6163      	str	r3, [r4, #20]
 8001688:	9b01      	ldr	r3, [sp, #4]
 800168a:	6120      	str	r0, [r4, #16]
 800168c:	b15b      	cbz	r3, 80016a6 <__smakebuf_r+0x70>
 800168e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001692:	4630      	mov	r0, r6
 8001694:	f000 f84e 	bl	8001734 <_isatty_r>
 8001698:	b128      	cbz	r0, 80016a6 <__smakebuf_r+0x70>
 800169a:	89a3      	ldrh	r3, [r4, #12]
 800169c:	f023 0303 	bic.w	r3, r3, #3
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	81a3      	strh	r3, [r4, #12]
 80016a6:	89a3      	ldrh	r3, [r4, #12]
 80016a8:	431d      	orrs	r5, r3
 80016aa:	81a5      	strh	r5, [r4, #12]
 80016ac:	e7cf      	b.n	800164e <__smakebuf_r+0x18>

080016ae <_raise_r>:
 80016ae:	291f      	cmp	r1, #31
 80016b0:	b538      	push	{r3, r4, r5, lr}
 80016b2:	4604      	mov	r4, r0
 80016b4:	460d      	mov	r5, r1
 80016b6:	d904      	bls.n	80016c2 <_raise_r+0x14>
 80016b8:	2316      	movs	r3, #22
 80016ba:	6003      	str	r3, [r0, #0]
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016c0:	bd38      	pop	{r3, r4, r5, pc}
 80016c2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80016c4:	b112      	cbz	r2, 80016cc <_raise_r+0x1e>
 80016c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80016ca:	b94b      	cbnz	r3, 80016e0 <_raise_r+0x32>
 80016cc:	4620      	mov	r0, r4
 80016ce:	f000 f853 	bl	8001778 <_getpid_r>
 80016d2:	462a      	mov	r2, r5
 80016d4:	4601      	mov	r1, r0
 80016d6:	4620      	mov	r0, r4
 80016d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016dc:	f000 b83a 	b.w	8001754 <_kill_r>
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d00a      	beq.n	80016fa <_raise_r+0x4c>
 80016e4:	1c59      	adds	r1, r3, #1
 80016e6:	d103      	bne.n	80016f0 <_raise_r+0x42>
 80016e8:	2316      	movs	r3, #22
 80016ea:	6003      	str	r3, [r0, #0]
 80016ec:	2001      	movs	r0, #1
 80016ee:	e7e7      	b.n	80016c0 <_raise_r+0x12>
 80016f0:	2400      	movs	r4, #0
 80016f2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80016f6:	4628      	mov	r0, r5
 80016f8:	4798      	blx	r3
 80016fa:	2000      	movs	r0, #0
 80016fc:	e7e0      	b.n	80016c0 <_raise_r+0x12>
	...

08001700 <raise>:
 8001700:	4b02      	ldr	r3, [pc, #8]	; (800170c <raise+0xc>)
 8001702:	4601      	mov	r1, r0
 8001704:	6818      	ldr	r0, [r3, #0]
 8001706:	f7ff bfd2 	b.w	80016ae <_raise_r>
 800170a:	bf00      	nop
 800170c:	200000a0 	.word	0x200000a0

08001710 <_fstat_r>:
 8001710:	b538      	push	{r3, r4, r5, lr}
 8001712:	4d07      	ldr	r5, [pc, #28]	; (8001730 <_fstat_r+0x20>)
 8001714:	2300      	movs	r3, #0
 8001716:	4604      	mov	r4, r0
 8001718:	4608      	mov	r0, r1
 800171a:	4611      	mov	r1, r2
 800171c:	602b      	str	r3, [r5, #0]
 800171e:	f7fe ff7a 	bl	8000616 <_fstat>
 8001722:	1c43      	adds	r3, r0, #1
 8001724:	d102      	bne.n	800172c <_fstat_r+0x1c>
 8001726:	682b      	ldr	r3, [r5, #0]
 8001728:	b103      	cbz	r3, 800172c <_fstat_r+0x1c>
 800172a:	6023      	str	r3, [r4, #0]
 800172c:	bd38      	pop	{r3, r4, r5, pc}
 800172e:	bf00      	nop
 8001730:	20000200 	.word	0x20000200

08001734 <_isatty_r>:
 8001734:	b538      	push	{r3, r4, r5, lr}
 8001736:	4d06      	ldr	r5, [pc, #24]	; (8001750 <_isatty_r+0x1c>)
 8001738:	2300      	movs	r3, #0
 800173a:	4604      	mov	r4, r0
 800173c:	4608      	mov	r0, r1
 800173e:	602b      	str	r3, [r5, #0]
 8001740:	f7fe ff78 	bl	8000634 <_isatty>
 8001744:	1c43      	adds	r3, r0, #1
 8001746:	d102      	bne.n	800174e <_isatty_r+0x1a>
 8001748:	682b      	ldr	r3, [r5, #0]
 800174a:	b103      	cbz	r3, 800174e <_isatty_r+0x1a>
 800174c:	6023      	str	r3, [r4, #0]
 800174e:	bd38      	pop	{r3, r4, r5, pc}
 8001750:	20000200 	.word	0x20000200

08001754 <_kill_r>:
 8001754:	b538      	push	{r3, r4, r5, lr}
 8001756:	4d07      	ldr	r5, [pc, #28]	; (8001774 <_kill_r+0x20>)
 8001758:	2300      	movs	r3, #0
 800175a:	4604      	mov	r4, r0
 800175c:	4608      	mov	r0, r1
 800175e:	4611      	mov	r1, r2
 8001760:	602b      	str	r3, [r5, #0]
 8001762:	f7fe fefa 	bl	800055a <_kill>
 8001766:	1c43      	adds	r3, r0, #1
 8001768:	d102      	bne.n	8001770 <_kill_r+0x1c>
 800176a:	682b      	ldr	r3, [r5, #0]
 800176c:	b103      	cbz	r3, 8001770 <_kill_r+0x1c>
 800176e:	6023      	str	r3, [r4, #0]
 8001770:	bd38      	pop	{r3, r4, r5, pc}
 8001772:	bf00      	nop
 8001774:	20000200 	.word	0x20000200

08001778 <_getpid_r>:
 8001778:	f7fe bee8 	b.w	800054c <_getpid>

0800177c <_init>:
 800177c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800177e:	bf00      	nop
 8001780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001782:	bc08      	pop	{r3}
 8001784:	469e      	mov	lr, r3
 8001786:	4770      	bx	lr

08001788 <_fini>:
 8001788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800178a:	bf00      	nop
 800178c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800178e:	bc08      	pop	{r3}
 8001790:	469e      	mov	lr, r3
 8001792:	4770      	bx	lr

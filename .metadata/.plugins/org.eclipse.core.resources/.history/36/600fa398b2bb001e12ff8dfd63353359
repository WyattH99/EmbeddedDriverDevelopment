/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


// MACROS

// RCC Base
#define RCC_BASE_ADDR				0x40023800UL
// Clock Configuration Register
#define RCC_CFGR_OFFSET				0x08UL
#define RCC_CFGR_REG_ADDR			((RCC_BASE_ADDR) + (RCC_CFGR_OFFSET))
// AHB1
#define RCC_AHB1ENR_OFFSET			0x30UL
#define RCC_AHB1ENR_ADDR			((RCC_BASE_ADDR) + (RCC_AHB1ENR_OFFSET))
// GPIOA
#define GPIOA_BASE_ADDR				0x40020000UL
// GPIOA Alternate Function Reg
#define GPIOA_AFRH_OFFSET			0x24UL
#define GPIOA_AFRH_ADDR				((GPIOA_BASE_ADDR) + (GPIOA_AFRH_OFFSET))

int main(void)
{
	uint32_t *pRccCfgrReg = (uint32_t*) RCC_CFGR_REG_ADDR;

	// 1. Configure the RCC_CFGR 21-22 bits to 00 for HSI Clock Source
	*pRccCfgrReg &= ~(0x3 << 21);
	// Set MCO1 Pre-scaler bit 24:26 to 100 to divide by 2
	*pRccCfgrReg |= (1 << 24);
	*pRccCfgrReg |= (1 << 25);


	// 2. Configure PA8 to AF0 mode to behave as MCO1 signal
	// a) Enable GPIOA clock
	// Set GPIOAEN bit 0 in RCC_AHB1ENR
	uint32_t *RccAhb1EnR = (uint32_t*) RCC_AHB1ENR_ADDR;
	*RccAhb1EnR |= (1 << 0);


	// b) Configure GPIOA pin 8 mode to Alternate Function Mode
	// Set bit 17-16 to 10 to set Alternate Function Mode
	// GPIOA_MODER offset is 0x00
	uint32_t *GpioAModer = (uint32_t*) GPIOA_BASE_ADDR;
	*GpioAModer &= ~(0x3 << 16); // Clear
	*GpioAModer |= (0x2 << 16); // Set


	// c) Configure the Alternate Function Register to set the mode 0 for PA8
	uint32_t *pGpioA_Afrh = (uint32_t*) GPIOA_AFRH_ADDR;
	*pGpioA_Afrh &= (0xf << 0);



    /* Loop forever */
	for(;;);
}









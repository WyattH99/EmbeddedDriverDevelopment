/*
 * stm32f446xx_gpio_driver.c
 *
 *  Created on: Feb 10, 2024
 *      Author: wyatt
 */


#include "stm32f446xx_gpio_driver.h"



/*
 * Peripheral Clock Control
 */
// Commenting done in this format to be able to auto-generate the Documentation with Doxygen
/*********************************************************************
 * @fn      		  - GPIO_PeriClockControl
 *
 * @brief             - This function enables or disables peripheral clock for the given GPIO port
 *
 * @param[in]         - Base Address of the GPIO Peripheral
 * @param[in]         - ENABLE or DISABLE macros
 * @param[in]         -
 *
 * @return            -  void
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi){
	if(EnOrDi == ENABLE){ // Enable
		switch(pGPIOx){
			case GPIOA:
				GPIOA_PCLK_EN();
				break;
			case GPIOB:
				GPIOB_PCLK_EN();
				break;
			case GPIOC:
				GPIOC_PCLK_EN();
				break;
			case GPIOD:
				GPIOD_PCLK_EN();
				break;
			case GPIOE:
				GPIOE_PCLK_EN();
				break;
			case GPIOF:
				GPIOF_PCLK_EN();
				break;
			case GPIOG:
				GPIOG_PCLK_EN();
				break;
			case GPIOH:
				GPIOH_PCLK_EN();
				break;
			default:
				break;
		}
	}else{ // Disable
		switch(pGPIOx){
			case GPIOA:
				GPIOA_PCLK_DI();
				break;
			case GPIOB:
				GPIOB_PCLK_DI();
				break;
			case GPIOC:
				GPIOC_PCLK_DI();
				break;
			case GPIOD:
				GPIOD_PCLK_DI();
				break;
			case GPIOE:
				GPIOE_PCLK_DI();
				break;
			case GPIOF:
				GPIOF_PCLK_DI();
				break;
			case GPIOG:
				GPIOG_PCLK_DI();
				break;
			case GPIOH:
				GPIOH_PCLK_DI();
				break;
			default:
				break;
			}
	}

}


/*
 * Initialize and De-Initialize
 */
/*********************************************************************
 * @fn      		  - GPIO_Init
 *
 * @brief             - Initialize the GPIO
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){

}

/*********************************************************************
 * @fn      		  -
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
void GPIO_DeInit(GPIO_RegDef_t *pGPIOx){

}


/*
 * Data Read and Write
 */
/*********************************************************************
 * @fn      		  -
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){

}

/*********************************************************************
 * @fn      		  -
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
uint16_t GPIO_ReadFromInputPort(GPIO_RegDef_t *pGPIOx){

}

/*********************************************************************
 * @fn      		  -
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value){

}

/*********************************************************************
 * @fn      		  -
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t Value){

}

/*********************************************************************
 * @fn      		  -
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){

}


/*
 * IRQ Configuration and ISR Handling
 */
/*********************************************************************
 * @fn      		  -
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t IRQPriority, uint8_t EnOrDi){

}

/*********************************************************************
 * @fn      		  -
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
void GPIO_IRQHandling(uint8_t PinNumber){

}












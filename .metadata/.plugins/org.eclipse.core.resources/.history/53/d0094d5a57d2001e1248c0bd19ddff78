/*
 * stm32f446xx_i2c_driver.c
 *
 *  Created on: Feb 22, 2024
 *      Author: wyatt
 */

#include "stm32f446xx_i2c_driver.h"

// Peripheral Clock Setup
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
	if(EnOrDi == ENABLE){
		// Enable
		if(pI2Cx == I2C1){
			I2C1_PCLK_EN();
		}else if(pI2Cx == I2C2){
			I2C2_PCLK_EN();
		}else if(pI2Cx == I2C3){
			I2C3_PCLK_EN();
		}
	}else{
		// Disable
		if(pI2Cx == I2C1){
			I2C1_PCLK_DI();
		}else if(pI2Cx == I2C2){
			I2C2_PCLK_DI();
		}else if(pI2Cx == I2C3){
			I2C3_PCLK_DI();
		}
	}
}

// I2C Peripheral Control
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
	if(EnOrDi == ENABLE){
		// Enable
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
	}else{
		// Disable
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}

}


uint32_t RCC_GetPLLOutputClock(void){
	uint32_t temp;
	return temp;
}


uint32_t RCC_GetPCLK1Value(void){
	uint32_t pclk1;

	uint8_t clksrc;
	clksrc = (RCC->CFGR >> 2) & 0x3;

	if(clksrc == 0){
		SystemClk = 16000000;
	}else if(clksrc = 1){
		SystemClk = 8000000;
	}else if(clksrc = 2){
		SystemClk = RCC_GetPLLOutputClock();
	}else if()

	return pclk1;
}

void I2C_Init(I2C_Handle_t *pI2C_Handle){
	uint32_t tempreg = 0;

	tempreg |= pI2C_Handle->I2C_Config.I2C_ACKControl << 10;

}

void I2C_DeInit(I2C_RegDef_t *pI2Cx){
	if(pI2Cx == I2C1){
		I2C1_REG_RESET();
	}else if(pI2Cx == I2C2){
		I2C2_REG_RESET();
	}else if(pI2Cx == I2C3){
		I2C3_REG_RESET();
	}
}



/*
 * stm32f446xx.h
 *
 *  Created on: Jan 27, 2024
 *      Author: wyatt
 */

#ifndef INC_STM32F446XX_H_
#define INC_STM32F446XX_H_


#include <stdint.h>


/*
 * Base Addresses of FLash and SRAM Memories
 */
#define FLASH_BASEADDR		0x08000000U
#define SRAM1_BASEADDR		0x20000000U // 112KB
#define SRAM2_BASEADDR		0x2001C000U // 16KB
#define ROM					0x1FFF0000U // "System Memory" on the Memory Map
#define SRAM_BASEADDR		SRAM1_BASEADDR

/*
 * Base Addresses of APB and AHB Busses
 */
#define PERIPH_BASE			0x40000000U
#define APB1PERIPH_BASE		PERIPH_BASE
#define APB2PERIPH_BASE		0x40010000U
#define AHB1PERIPH_BASE		0x40020000U
#define AHB2PERIPH_BASE		0x50000000U

/*
 * Base Addresses of Peripherals on AHB1 Bus
 * BaseAddr + OFFSETS
 */
#define GPIOA_BASEADDR		(AHB1PERIPH_BASE + 0x0000)
#define GPIOB_BASEADDR		(AHB1PERIPH_BASE + 0x0400)
#define GPIOC_BASEADDR		(AHB1PERIPH_BASE + 0x0800)
#define GPIOD_BASEADDR		(AHB1PERIPH_BASE + 0x0C00)
#define GPIOE_BASEADDR		(AHB1PERIPH_BASE + 0x1000)
#define GPIOF_BASEADDR		(AHB1PERIPH_BASE + 0x1400)
#define GPIOG_BASEADDR		(AHB1PERIPH_BASE + 0x1800)
#define GPIOH_BASEADDR		(AHB1PERIPH_BASE + 0x1C00)

/*
 * Base Addresses of Peripherals on APB1 Bus
 * BaseAddr + OFFSETS
 */
#define I2C1_BASEADDR		(APB1PERIPH_BASE + 0x5400)
#define I2C2_BASEADDR		(APB1PERIPH_BASE + 0x5800)
#define I2C3_BASEADDR		(APB1PERIPH_BASE + 0x5C00)
#define SPI2_BASEADDR		(APB1PERIPH_BASE + 0x3800)
#define SPI3_BASEADDR		(APB1PERIPH_BASE + 0x3C00)
#define USART2_BASEADDR		(APB1PERIPH_BASE + 0x4400)
#define USART3_BASEADDR		(APB1PERIPH_BASE + 0x4800)
#define UART4_BASEADDR		(APB1PERIPH_BASE + 0x4C00)
#define UART5_BASEADDR		(APB1PERIPH_BASE + 0x5000)

/*
 * Base Addresses of Peripherals on APB2 Bus
 * BaseAddr + OFFSETS
 */
#define SPI1_BASEADDR		(APB2PERIPH_BASE + 0x3000)
#define USART1_BASEADDR		(APB2PERIPH_BASE + 0x1000)
#define USART6_BASEADDR		(APB2PERIPH_BASE + 0x1400)
#define EXTI_BASEADDR		(APB2PERIPH_BASE + 0x3C00)
#define SYSCFG_BASEADDR		(APB2PERIPH_BASE + 0x3800)


/*
 * Peripheral Register Definition Structures
 */

// Use Volatile as the data could update very fast for some of the GPIO Registers
// The uint32_t data type will space the variables 0x04 apart from one another
typedef struct{
	volatile uint32_t MODER;			// I/O Direction Mode.					OFFSET: 0x00
	volatile uint32_t OTYPER;		// Output Type. 						OFFSET: 0x04
	volatile uint32_t OSPEEDR;		// Output Speed. 						OFFSET: 0x08
	volatile uint32_t PUPDR;			// Pull-up or Pull-down.				OFFSET: 0x0C
	volatile uint32_t IDR;			// Read-only Input Data.				OFFSET: 0x10
	volatile uint32_t ODR;			// Read and Write Output Data.			OFFSET: 0x14
	volatile uint32_t BSRR;			// Write-only Reset or Set the ODR.		OFFSET: 0x18
	volatile uint32_t LCKR;			// Lock the Configuration of the port.	OFFSET: 0x1C
	volatile uint32_t AFRL;			// Alternate Function Selection Low.	OFFSET: 0x10
	volatile uint32_t AFRH;			// Alternate Function Selection High.	OFFSET: 0x24

} GPIO_RegDef_t;










#endif /* INC_STM32F446XX_H_ */











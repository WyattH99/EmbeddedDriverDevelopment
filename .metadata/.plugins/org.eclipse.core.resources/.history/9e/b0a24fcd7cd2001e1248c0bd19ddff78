/*
 * 010_I2C_Master_Tx_Testing.c
 *
 *  Created on: Feb 23, 2024
 *      Author: wyatt
 */


#include "stm32f446xx.h"
#include <string.h>

/*
 * I2C1 Pins:
 * SCL --> PB8
 * SDA --> PB9
 * ALT Function Mode: 5
 */

#define MY_ADDR 0x61

I2C_Handle_t I2C1Handle;

void delay(void){
	for(uint32_t i=0; i<500000/2; i++){

	}
}

void I2C1_GPIOInits(void){

	GPIO_Handle_t I2CPins;

	// Common Settings between Pins
	I2CPins.pGPIOx = GPIOB;
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFUN;
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD; // External Pull-UP Used
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;


	// SCL
	GPIO_Handle_t I2C_SCL_Pin = I2CPins;
	I2C_SCL_Pin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
	GPIO_Init(&I2C_SCL_Pin);

	// SDA
	GPIO_Handle_t I2C_SDA_Pin = I2CPins;
	I2C_SDA_Pin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
	GPIO_Init(&I2C_SDA_Pin);

}


void I2C1_Inits(void){

	I2C1Handle.pI2Cx = I2C1;
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;

	I2C_Init(&I2C1Handle);

}

void GPIO_ButtonInit(void){

	GPIO_Handle_t GpioButton;
	// Configure the Button
	GpioButton.pGPIOx = GPIOC;
	GpioButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
	GpioButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
	GpioButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
	GpioButton.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
	GPIO_Init(&GpioButton);
}



int main(void){

	// GPIO Button
	GPIO_ButtonInit();

	// Initialize the GPIO pins
	I2C1_GPIOInits();

	// Initialize the I2C1 Peripheral
	I2C1_Inits();



	uint8_t dummy_write = 0xff;
	uint8_t dummy_read;

	while(1){


		// Wait for button press
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) != BUTTON_PRESSED);
		// For the De-bouncing of the Button
		delay();

		// Enable the I2C1 Peripheral
		IC2_PeripheralControl(I2C1, ENABLE);


		// Wait until IC2 is not Busy
		while(IC2_GetFlagStatus(I2C1, IC2_BUSY_FLAG));
		// Disable the I2C1 Peripheral
		IC2_PeripheralControl(I2C1, DISABLE);
	}


	return 0;
}

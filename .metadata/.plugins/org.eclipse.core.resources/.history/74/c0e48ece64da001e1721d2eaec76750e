/*
 * 017_RTC_LCD.c
 *
 *  Created on: Mar 2, 2024
 *      Author: wyatt
 */

#include <stdio.h>

#include "ds1307.h"
#include "lcd.h"

// For printf()
extern void initialise_monitor_handles();

#define SYSTICK_TIM_CLK		16000000UL

void init_systick_timer(uint32_t tick_hz)
{
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
	uint32_t *pSCSR = (uint32_t*)0xE000E010;

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);

    //load the value in to SVR
    *pSRVR |= count_value;

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter

}



/*
 * I2C1 Pins:
 * SCL --> PB8
 * SDA --> PB9
 * ALT Function Mode: 5
 */

/*
 * LCD Pins
 * RS --> PC13
 * R/^W --> PC14
 * EN --> PC15
 * D4 --> PC9
 * D5 --> PC8
 * D6 --> PC6
 * D7 --> PC5
 */


// Helper Functions Prototypes
char* get_day_of_week(uint8_t day);
void number_to_string(uint8_t num, char* buf);
char* time_to_string(RTC_time_t *rtc_time);
char* date_to_string(RTC_date_t *rtc_date);
void printf_rtc(void);


RTC_time_t current_time;
RTC_date_t current_date;

int main(void){

	initialise_monitor_handles();


	printf("RTC test\n");

	lcd_init();

	lcd_print_string("LCD Test...");

	mdelay(2000);

	lcd_display_clear();
	lcd_display_return_home();


	if(ds1307_init()){
		printf("RTC Init Failed\n");
		while(1);
	}

	init_systick_timer(1);

	// Configure Date
	current_date.day = MONDAY;
	current_date.date = 4;
	current_date.month = 3;
	current_date.year = 24;

	// Configure Time
	current_time.seconds = 50;
	current_time.minutes = 59;
	current_time.hours = 11;
	current_time.time_format = TIME_FORMAT_12HRS_PM;

	ds1307_set_current_date(&current_date);
	ds1307_set_current_time(&current_time);

	ds1307_get_current_date(&current_date);
	ds1307_get_current_time(&current_time);

	printf_rtc();


	while(1);

	return 0;
}


void printf_rtc(void){
	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS){
		am_pm = (current_time.time_format) ? "PM" : "AM";
		printf("Current Time: %s %s\n", time_to_string(&current_time), am_pm); // 08:08:41 PM
		lcd_print_string(time_to_string(&current_time));
		lcd_print_string(time_to_string(am_pm));
	}else{
		// 24 Hours Format
		printf("Current Time: %s\n", time_to_string(&current_time)); // 20:08:41
		lcd_print_string(time_to_string(&current_time));
	}

	printf("Current Date: %s <%s>\n", date_to_string(&current_date), get_day_of_week(current_date.day));
	lcd_set_cursor(2, 1);
	lcd_print_string(date_to_string(&current_date));

}

char* get_day_of_week(uint8_t day){
	char *days_list[] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
	return days_list[day-1];
}


void number_to_string(uint8_t num, char* buf){

	if(num < 10){
		buf[0] = '0';
		buf[1] = num + 48;
	}else if(num >= 10 && num < 99){
		buf[0] = (num /10) + 48;
		buf[1] = (num % 10) + 48;
	}
}


// hh:mm:ss'\0'
char* time_to_string(RTC_time_t *rtc_time){
	static char buf[9];
	buf[2] = ':';
	buf[5] = ':';

	number_to_string(rtc_time->hours, buf);
	number_to_string(rtc_time->minutes, &buf[3]);
	number_to_string(rtc_time->seconds, &buf[6]);

	buf[8] = '\0';

	return buf;

}

// dd/mm/yy'\0'
char* date_to_string(RTC_date_t *rtc_date){
	static char buf[9];

	buf[2] = '/';
	buf[5] = '/';

	number_to_string(rtc_date->month, buf);
	number_to_string(rtc_date->date, &buf[3]);
	number_to_string(rtc_date->year, &buf[6]);

	buf[8] = '\0';

	return buf;
}



void SysTick_Handler(void){
	ds1307_get_current_date(&current_date);
	ds1307_get_current_time(&current_time);
	printf_rtc();
}








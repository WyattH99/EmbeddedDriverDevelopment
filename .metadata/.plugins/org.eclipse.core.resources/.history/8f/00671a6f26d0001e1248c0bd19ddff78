/*
 * stm32f446xx_spi_driver.c
 *
 *  Created on: Feb 14, 2024
 *      Author: wyatt
 */

#include "stm32f446xx_spi_driver.h"


// Peripheral Clock Setup
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
	if(EnOrDi == ENABLE){
		// Enable
		if(pSPIx == SPI1){
			SPI1_PCLK_EN();
		}else if(pSPIx == SPI2){
			SPI2_PCLK_EN();
		}else if(pSPIx == SPI3){
			SPI3_PCLK_EN();
		}
	}else{
		// Disable
		if(pSPIx == SPI1){
			SPI1_PCLK_DI();
		}else if(pSPIx == SPI2){
			SPI2_PCLK_DI();
		}else if(pSPIx == SPI3){
			SPI3_PCLK_DI();
		}
	}
}


// Initialize and De-Initialize
void SPI_Init(SPI_Handle_t *pSPI_Handle){
	// Enable Peripheral Clock
	SPI_PeriClockControl(pSPI_Handle->pSPIx, ENABLE);

	// Configure the SPI_CR1 Register
	uint32_t tempreg = 0;

	// 1. Device Mode
	tempreg |= pSPI_Handle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;

	// 2. BusConfig
	if(pSPI_Handle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FULL_DUPLEX){
		// BIDI mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);

	}else if(pSPI_Handle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HALF_DUPLEX){
		// BIDI mode should be set
		tempreg |= (1 << SPI_CR1_BIDIMODE);

	}else if(pSPI_Handle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
		// BIDI mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
		// RXONLY bit must be set
		tempreg |= (1 << SPI_CR1_RXONLY);
	}

	// 3. SclkSpeed (Baud Rate)
	tempreg |= pSPI_Handle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;

	// 4. DFF (Data Frame Configuration)
	tempreg |= pSPI_Handle->SPIConfig.SPI_DFF << SPI_CR1_DFF;

	// 5. CPOL (Polarity)
	tempreg |= pSPI_Handle->SPIConfig.SPI_DFF << SPI_CR1_CPOL;

	// 6. CPHA (Phase)
	tempreg |= pSPI_Handle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;

	// 7. SSM
	tempreg |= pSPI_Handle->SPIConfig.SPI_SSM << SPI_CR1_SSM;

	pSPI_Handle->pSPIx->CR1 = tempreg;


}

void SPI_DeInit(SPI_RegDef_t *pSPIx){
	if(pSPIx == SPI1){
		SPI1_REG_RESET();
	}else if(pSPIx == SPI2){
		SPI2_REG_RESET();
	}else if(pSPIx == SPI3){
		SPI3_REG_RESET();
	}

}


uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
	if(pSPIx->SR & FlagName){
		return FLAG_SET;
	}
	return FLAG_RESET;
}


// Data Send and Receive
// This is a blocking call
// Polling for the TXE Flag to be Set
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Length){
	while(Length > 0){
		// Wait until TX Buffer is empty
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);

		// Check if 8bit or 16bit
		if((pSPIx->CR1 & (1 << SPI_CR1_DFF))){
			// 16bit
			// Load DR with 2 byte of data
			pSPIx->DR = *((uint16_t*)pTxBuffer);
			// Increment Buffer Address
			(uint16_t*)pTxBuffer++;
			// Length--
			Length--;
			Length--;
		}else{
			// 8bit
			pSPIx->DR = *pTxBuffer;
			pTxBuffer++;
			Length--;
		}
	}

}

void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Length){
	while(Length > 0){
		// Wait until RX Buffer is empty
		while(SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET);

		// Check if 8bit or 16bit
		if((pSPIx->CR1 & (1 << SPI_CR1_DFF))){
			// 16bit
			// Load data from DR to RxBuffer Address
			*((uint16_t*)pRxBuffer) = pSPIx->DR;
			// Increment Buffer Address
			(uint16_t*)pRxBuffer++;
			// Length--
			Length--;
			Length--;
		}else{
			// 8bit
			*pRxBuffer = pSPIx->DR;
			pRxBuffer++;
			Length--;
		}
	}

}


// IRQ Configurations and ISR Handling
void SPI_IRQInterruptConfig(uint8_t IRQNumber,uint8_t EnOrDi){
	if(EnOrDi == ENABLE){
		// Enable
		if(IRQNumber <= 31){
			// Program ISER0 Register
			*NVIC_ISER0 |= (1 << IRQNumber);
		}else if(IRQNumber > 31 && IRQNumber < 64){
			// Program ISER1 Register
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
		}else if(IRQNumber >= 64 && IRQNumber < 96){
			// Program ISER2 Register
			*NVIC_ISER2 |= (1 << (IRQNumber % 32));
		}
	}else{
		// Disable
		if(IRQNumber <= 31){
			// Program ICER0 Register
			*NVIC_ICER0 |= (1 << IRQNumber);
		}else if(IRQNumber > 31 && IRQNumber < 64){
			// Program ICER1 Register
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
		}else if(IRQNumber >= 64 && IRQNumber < 96){
			// Program ICER2 Register
			*NVIC_ICER2 |= (1 << (IRQNumber % 32));
		}
	}
}


void SPI_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority){
	uint8_t iprx = IRQNumber / 4;
	uint8_t iprx_section = IRQNumber % 4;
	uint8_t shift_amount = (8 * iprx_section) + (8 - NUM_PR_BITS_IMPLEMENTED);
	*(NVIC_IPR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount);
}


void SPI_IRQHandling(SPI_Handle_t *pHandle){
	// Clear the EXTI Priority Register corresponding to the pin number
	if(EXTI->PR & (1 << PinNumber)){
		EXTI->PR |= (1 << PinNumber);
	}
}


void SPI_SendDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer, uint32_t Length){

}

void SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t Length){

}


void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
	if(EnOrDi == ENABLE){
		// Enable
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
	}else{
		// Disable
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}

void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
	if(EnOrDi == ENABLE){
		// Enable
		pSPIx->CR1 |= (1 << SPI_CR1_SSI);
	}else{
		// Disable
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}


void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
	if(EnOrDi == ENABLE){
		// Enable
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
	}else{
		// Disable
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}


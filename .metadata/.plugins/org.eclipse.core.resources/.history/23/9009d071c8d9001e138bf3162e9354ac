/*
 * ds1307.c
 *
 *  Created on: Mar 2, 2024
 *      Author: wyatt
 */

#include <stdint.h>
#include <string.h>

#include "ds1307.h"

I2C_Handle_t g_ds1307I2cHandle;

/*
 * Private Helper Functions Prototype
 */
static void ds1307_i2c_pin_config(void);
static void ds1307_i2c_config(void);
static void ds1307_write(uint8_t value, uint8_t reg_addr);
static uint8_t ds1307_read(uint8_t reg_addr);


/* ds1307 Initialization */
// Returns Value of CH. If 1 then Initialization Failed else Success
uint8_t ds1307_init(void){

	// 1. Initialize the I2C GPIO Pins
	ds1307_i2c_pin_config();

	// 2. Initialize the I2C Peripheral
	ds1307_i2c_config();

	// 3. Enable the I2C Peripheral
	I2C_PeripheralControl(DS1307_I2C, ENABLE);

	// 4. Make Clock Halt = 0;
	ds1307_write(0x00, DS1307_ADDR_SEC);

	// 5. Read Clock Halt Bit to see if Write was successful
	uint8_t clock_state = ds1307_read(DS1307_ADDR_SEC);

	// Clock State is the 7th bit
	return ((clock_state >> 7) & 0x1);

}


/* Set / Get Time */
void ds1307_set_current_time(RTC_time_t *rtc_time){
	uint8_t seconds, hours;

	// Set Seconds
	seconds = binary_to_bcd(rtc_time->seconds);
	seconds &= ~(1 << 7); // Make sure the clock is not halted
	ds1307_write(seconds, DS1307_ADDR_SEC);

	// Set Minutes
	ds1307_write(binary_to_bcd(rtc_time->minutes), DS1307_ADDR_MIN);

	// Set Hours
	hours = binary_to_bcd(rtc_time->hours);
	if(rtc_time->time_format == TIME_FORMAT_24HRS){
		hours &= ~(1 << 6);
	}else{
		// 12 Hour Format
		hours |= (1 << 6);
		hours = (rtc_time->time_format == TIME_FORMAT_12HRS_PM) ? hours | (1 << 5) : hours & ~(1 << 5);
	}
	ds1307_write(hours, DS1307_ADDR_HRS);

}

void ds1307_get_current_time(RTC_time_t *rtc_time){
	// Get Seconds
	uint8_t seconds = ds1307_read(DS1307_ADDR_SEC);
	seconds &= ~(1 << 7); // Clear the Clock Halt
	rtc_time->seconds = bcd_to_binary(seconds);

	// Get Minutes
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));

	// Get Hours
	uint8_t hours = ds1307_read(DS1307_ADDR_HRS);
	if(hours & (1 << 6)){
		// 12 Hour Format
		rtc_time->time_format = !((hours & (1 << 5)) == 0); // PM or AM
		hours &= ~(0x3 << 5); // Clear 6 and 5 bit
	}else{
		// 24 Hour Format
		rtc_time->time_format = TIME_FORMAT_24HRS;
	}
	rtc_time->hours = bcd_to_binary(hours);
}


/* Set / Get Date */
void ds1307_set_current_date(RTC_date_t *rtc_date){
	// Set Day
	ds1307_write(binary_to_bcd(rtc_date->day), DS1307_ADDR_DAY);

	// Set Date
	ds1307_write(binary_to_bcd(rtc_date->date), DS1307_ADDR_DATE);

	// Set Month
	ds1307_write(binary_to_bcd(rtc_date->month), DS1307_ADDR_MONTH);

	// Set Year
	ds1307_write(binary_to_bcd(rtc_date->year), DS1307_ADDR_YEAR);

}

void ds1307_get_current_date(RTC_date_t *rtc_date){

}



/*
 * Private Helper Functions Definitions
 */
static void ds1307_i2c_pin_config(void){
	/*
	 * I2C1 Pins:
	 * SCL --> PB8
	 * SDA --> PB9
	 * ALT Function Mode: 4
	 */

	/* I2C SCL */
	GPIO_Handle_t i2c_scl;
	memset(&i2c_scl, 0, sizeof(i2c_scl)); // Clear all the Variables
	i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT;
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFUN;
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
	GPIO_Init(&i2c_scl);

	/* I2C SDA */
	GPIO_Handle_t i2c_sda;
	memset(&i2c_sda, 0, sizeof(i2c_sda)); // Clear all the Variables
	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT;
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFUN;
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
	GPIO_Init(&i2c_sda);

}


static void ds1307_i2c_config(void){
	g_ds1307I2cHandle.pI2Cx = DS1307_I2C;
//	g_ds1307I2cHandle.I2C_Config.I2C_DeviceAddress = DS1307_I2C_ADDRESS;
	g_ds1307I2cHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
	g_ds1307I2cHandle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
//	g_ds1307I2cHandle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;

	I2C_Init(&g_ds1307I2cHandle);
}


static void ds1307_write(uint8_t value, uint8_t reg_addr){
	uint8_t tx[2];
	tx[0] = reg_addr;
	tx[1] = value;

	// Send Register Address then the Value
	I2C_MasterSendData(&g_ds1307I2cHandle, tx, 2, DS1307_I2C_ADDRESS, I2C_DISABLE_SR);

}


static uint8_t ds1307_read(uint8_t reg_addr){

	uint8_t data;
	I2C_MasterSendData(&g_ds1307I2cHandle, &reg_addr, 1, DS1307_I2C_ADDRESS, I2C_ENABLE_SR);
	I2C_MasterReceiveData(&g_ds1307I2cHandle, &data, 1, DS1307_I2C_ADDRESS, I2C_DISABLE_SR);

	return data;
}









